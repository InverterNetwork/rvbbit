{:flowmaps
 {:path-correction
  {:y 750,
   :fn (fn [x] x),
   :w 175,
   :raw-fn (fn [x] (str "../" x)),
   :right-click? true,
   :icon "zmdi-functions",
   :types nil,
   :z 0,
   :ports {:in {:x :any}, :out {:out :any}},
   :inputs nil,
   :h 100,
   :x 1550,
   :data
   {:flow-item
    {:category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:x :any, :out :any},
     :inputs [:x],
     :expandable? true,
     :drag-meta {:type :open-fn}}}},
  :shell-command-1
  {:w 200,
   :h 100,
   :x 1350,
   :y 1550,
   :z 0,
   :data
   {:flow-item
    {:description "Execute shell command. WARNING: only use if you know what you're doing / have controlled inputs",
     :category ":rabbit-base",
     :fn (fn [command] (rvbbit-backend.websockets/run-shell-command command)),
     :name ":shell-command",
     :icon "zmdi-washing-machine",
     :defaults {:command "ls -la"},
     :types {:command :string, :out :any},
     :input_types "[:string]",
     :style {:color "#ffdd3c"},
     :selected-style {:color "#ffdd3c"},
     :inputs "[:command]",
     :output_types ":any",
     :full_map
     "{:description \"Execute shell command. WARNING: only use if you know what you're doing / have controlled inputs\", :fn (fn [command] (rvbbit-backend.websockets/run-shell-command command)), :icon \"zmdi-washing-machine\", :defaults {:command \"ls -la\"}, :types {:command :string, :out :any}, :style {:color \"#ffdd3c\"}, :selected-style {:color \"#ffdd3c\"}, :inputs [:command], :required [:command]}",
     :required [:command]},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :root [539.1770935058594 176.171875],
    :h 6,
    :connection-id nil,
    :queries
    {:name-drag-42
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :cc59]],
      :where [:= :name ":shell-command"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":shell-command",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :where,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 6}},
   :icon "zmdi-washing-machine",
   :ports
   {:in {:command :string}, :out {:output :vector, :exception :vector, :seconds :vector, :command :string, :* :map}}},
  :json-to-edn_colorPalette
  {:y 1975,
   :fn (fn [x] (get-in x [:colorPalette])),
   :w 150,
   :raw-fn (fn [x] (get-in x [:colorPalette])),
   :icon "zmdi-functions",
   :z 0,
   :ports {:in {:x :any}, :out {:out :any}},
   :h 85,
   :x 1425,
   :data
   {:flow-item
    {:category ":rabbit-base",
     :fn (fn [x] (get-in x [:colorPalette])),
     :name ":open-fn",
     :raw-fn (fn [x] (get-in x [:colorPalette])),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:x :any, :out :any},
     :inputs [:x],
     :expandable? true,
     :drag-meta {:type :open-fn}}}},
  :convert-to-png
  {:y 1025,
   :fn (fn [x] x),
   :w 200,
   :raw-fn (fn [x y] (str "convert " x " -resize 400x -filter Lanczos -colors 32 -dither FloydSteinberg " y)),
   :right-click? true,
   :icon "zmdi-functions",
   :types nil,
   :z 0,
   :ports {:in {:x :any, :y :any}, :out {:out :any}},
   :inputs nil,
   :h 85,
   :x 1500,
   :data
   {:flow-item
    {:category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:x :any, :out :any},
     :inputs [:x],
     :expandable? true,
     :drag-meta {:type :open-fn}}}},
  :run-the-convert-command
  {:y 1150,
   :w 200,
   :right-click? true,
   :icon "zmdi-washing-machine",
   :z 0,
   :ports {:in {:command :string}, :out {:out :any}},
   :h 100,
   :x 1500,
   :data
   {:flow-item
    {:category ":rabbit-base",
     :name ":shell-command",
     :type :shell-command,
     :icon "zmdi-washing-machine",
     :defaults {:command "ls -la"},
     :types {:command :string, :out :any},
     :style {:color "#ffdd3c"},
     :selected-style {:color "#ffdd3c"},
     :inputs [:command],
     :expandable? true,
     :required [:command]},
    :drag-meta {:type :shell-command}}},
  :json-to-edn
  {:w 200,
   :h 100,
   :x 1375,
   :y 1825,
   :z 0,
   :data
   {:flow-item
    {:description "Convert a JSON string to Clojure EDN",
     :category ":rabbit-base",
     :fn (fn [json-string] (rvbbit-backend.util/json-to-edn json-string)),
     :name ":json-to-edn",
     :icon "zmdi-file-text",
     :types {:json-string :string, :out :any},
     :input_types "[:string]",
     :inputs "[:json-string]",
     :output_types ":any",
     :full_map
     "{:description \"Convert a JSON string to Clojure EDN\", :fn (fn [json-string] (rvbbit-backend.util/json-to-edn json-string)), :inputs [:json-string], :icon \"zmdi-file-text\", :types {:json-string :string, :out :any}}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :root [1297.1770935058594 207.171875],
    :h 6,
    :connection-id nil,
    :queries
    {:name-drag-41
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :uu284]],
      :where [:= :name ":json-to-edn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":json-to-edn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :where,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 7}},
   :icon "zmdi-file-text",
   :ports {:in {:json-string :string}, :out {:dominantColor :string, :colorPalette :vector, :* :map}}},
  :json-to-edn_dominantColor
  {:y 1976.0213702074168,
   :fn (fn [x] (get-in x [:dominantColor])),
   :w 125,
   :raw-fn (fn [x] (get-in x [:dominantColor])),
   :icon "zmdi-functions",
   :z 0,
   :ports {:in {:x :any}, :out {:out :any}},
   :h 85,
   :x 1595.2828409805154,
   :data
   {:flow-item
    {:category ":rabbit-base",
     :fn (fn [x] (get-in x [:dominantColor])),
     :name ":open-fn",
     :raw-fn (fn [x] (get-in x [:dominantColor])),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:x :any, :out :any},
     :inputs [:x],
     :expandable? true,
     :drag-meta {:type :open-fn}}}},
  :clojure-string-join-1
  {:w 200,
   :h 100,
   :x 1350,
   :y 1425,
   :z 0,
   :data
   {:flow-item
    {:description "Clojure.string's join function.",
     :category ":clojure-base",
     :fn (fn [delimiter & args] (clojure.string/join delimiter args)),
     :name ":clojure-string-join",
     :icon "zmdi-group",
     :defaults {:delimiter " "},
     :types {:delimiter :string, :out :string},
     :input_types "[:string]",
     :inputs "[:delimiter]",
     :output_types ":string",
     :expandable? true,
     :full_map
     "{:description \"Clojure.string's join function.\", :fn (fn [delimiter & args] (clojure.string/join delimiter args)), :inputs [:delimiter], :required [:delimiter], :defaults {:delimiter \" \"}, :expandable? true, :icon \"zmdi-group\", :types {:delimiter :string, :out :string}}",
     :required [:delimiter]},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :root [540.1770935058594 279.171875],
    :h 6,
    :connection-id nil,
    :queries
    {:name-drag-12
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :ww526]],
      :where [:= :name ":clojure-string-join"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":clojure-string-join",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :where,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 15}},
   :icon "zmdi-group",
   :ports {:in {:delimiter :string, :value-1 :any, :value-2 :any}, :out {:out :string}}},
  :image-path
  {:y 550,
   :w 475,
   :types nil,
   :z 0,
   :ports {:out {:out {:out :string}}, :in {}},
   :inputs nil,
   :h 125,
   :x 1475,
   :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input "extras/node-colorthief/logo.png"}},
  :get-color-edges
  {:y 2100,
   :fn (fn [x] x),
   :w 200,
   :raw-fn
   (fn [colors dom]
     (let [colors (vec (distinct (conj colors dom)))]
       (defn hex-to-rgb [hex] (map (fn [x] (Integer/parseInt x 16)) (re-seq (re-pattern "[0-9a-fA-F]{2}") (subs hex 1))))
       (defn brightness [rgb] (let [[r g b] rgb] (Math/sqrt (+ (* 0.299 (* r r)) (* 0.587 (* g g)) (* 0.114 (* b b))))))
       (defn rgb-to-lab [rgb]
         (let [[r g b] (map (fn [x] (/ x 255)) rgb)
               [r g b] (map (fn [v] (if (> v 0.04045) (Math/pow (/ (+ v 0.055) 1.055) 2.4) (/ v 12.92))) [r g b])
               x (* (+ (* r 0.4124564) (* g 0.3575761) (* b 0.1804375)) 100)
               y (* (+ (* r 0.2126729) (* g 0.7151522) (* b 0.072175)) 100)
               z (* (+ (* r 0.0193339) (* g 0.119192) (* b 0.9503041)) 100)
               [x y z] (map (fn [v ref] (/ v ref)) [x y z] [95.047 100 108.883])
               [x y z] (map
                         (fn [v] (if (> v 0.008856) (Math/pow v 0.3333333333333333) (+ (* 7.787 v) (/ 16 116))))
                         [x y z])]
           [(+ (* 116 y) -16) (* 500 (- x y)) (* 200 (- y z))]))
       (defn rgb-to-hsl [rgb]
         (let [[r g b] (map (fn [x] (/ x 255)) rgb)
               max (apply max [r g b])
               min (apply min [r g b])
               l (/ (+ max min) 2)
               d (- max min)
               s (if (= d 0) 0 (/ d (if (< l 0.5) (+ max min) (- 2 max min))))
               h (cond
                   (= max r) (/ (+ (- g b) (* d (if (< g b) 6 0))) 6)
                   (= max g) (/ (+ (- b r) (* d 2)) 6)
                   :else (/ (+ (- r g) (* d 4)) 6))]
           [(* h 360) s l]))
       (defn hsl-to-hex [[h s l]]
         (let [c (* s (- 1 (abs (- (* 2 l) 1))))
               x (* c (- 1 (abs (- (mod (/ h 60) 2) 1))))
               m (- l (/ c 2))
               [r g b] (cond
                         (< h 60) [(+ c m) (+ x m) m]
                         (< h 120) [(+ x m) (+ c m) m]
                         (< h 180) [m (+ c m) (+ x m)]
                         (< h 240) [m (+ x m) (+ c m)]
                         (< h 300) [(+ x m) m (+ c m)]
                         :else [(+ c m) m (+ x m)])
               r (int (* r 255))
               g (int (* g 255))
               b (int (* b 255))]
           (format "#%02x%02x%02x" r g b)))
       (defn color-distance [lab1 lab2] (Math/sqrt (reduce + (map (fn [a b] (Math/pow (- a b) 2)) lab1 lab2))))
       (defn average-contrast [lab colors]
         (/ (reduce + (map (fn [other-lab] (color-distance lab other-lab)) colors)) (count colors)))
       (defn most-frequent-color [colors] (first (apply max-key val (frequencies colors))))
       (defn generate-data-colors [base-colors num-colors brightest second-brightest]
         (let [adjust-hue (fn [hue offset] (mod (+ hue offset) 360))
               adjust-saturation (fn [saturation factor] (min 1 (* saturation factor)))
               adjust-lightness (fn [lightness factor] (min 1 (* lightness factor)))
               base-hues (map first base-colors)
               hue-offsets (take num-colors (cycle [30 60 90 120 150 180 210 240 270 300 330]))
               new-hues (map adjust-hue base-hues hue-offsets)
               new-saturations (map (partial adjust-saturation 1.2) (map second base-colors))
               new-lightnesses (map (partial adjust-lightness 1.3) (map (fn [x] (nth x 2)) base-colors))
               additional-colors (map rgb-to-hsl [(hex-to-rgb brightest) (hex-to-rgb second-brightest)])
               all-colors (concat (map vector new-hues new-saturations new-lightnesses) additional-colors)
               sorted-colors (sort-by (fn [x] (nth x 2)) > all-colors)]
           (map hsl-to-hex sorted-colors)))
       (defn notable-colors [colors dom]
         (when (not (empty? colors))
           (let [rgb-colors (map hex-to-rgb colors)
                 lab-colors (map rgb-to-lab rgb-colors)
                 hsl-colors (map rgb-to-hsl rgb-colors)
                 brightnesses (map brightness rgb-colors)
                 indexed-brightnesses (map-indexed vector brightnesses)
                 sorted-by-brightness (sort-by second indexed-brightnesses)
                 [darkest-idx second-darkest-idx] (map first (take 2 sorted-by-brightness))
                 [second-brightest-idx brightest-idx] (map first (take-last 2 sorted-by-brightness))
                 contrasts (map (fn [lab] (average-contrast lab (remove (fn [x] (= lab x)) lab-colors))) lab-colors)
                 most-contrasting-index (apply max-key (fn [i] (nth contrasts i)) (range (count colors)))
                 dark-colors-indices (filter (fn [i] (< (nth brightnesses i) 128)) (range (count colors)))
                 light-colors-indices (filter (fn [i] (>= (nth brightnesses i) 128)) (range (count colors)))
                 most-contrasting-dark-index (apply max-key (fn [i] (nth contrasts i)) dark-colors-indices)
                 most-contrasting-light-index (apply max-key (fn [i] (nth contrasts i)) light-colors-indices)
                 saturations (map second hsl-colors)
                 highest-saturation-index (apply max-key (fn [i] (nth saturations i)) (range (count colors)))
                 most-frequent (most-frequent-color colors)
                 dom-rgb (hex-to-rgb dom)
                 dom-lab (rgb-to-lab dom-rgb)
                 data-color-keys ["string"
                                  "keyword"
                                  "float"
                                  "integer"
                                  "boolean"
                                  "map"
                                  "vector"
                                  "rabbit-code"
                                  "any"
                                  "list"
                                  "datetime"
                                  "unknown"
                                  "date"
                                  "nil"]
                 data-colors (zipmap
                               data-color-keys
                               (generate-data-colors
                                 hsl-colors
                                 (count data-color-keys)
                                 (nth colors brightest-idx)
                                 (nth colors second-brightest-idx)))]
             {:second-darkest (nth colors second-darkest-idx),
              :highest-saturation (nth colors highest-saturation-index),
              :most-contrasting (nth colors most-contrasting-index),
              :darkest (nth colors darkest-idx),
              :contrast-with-dominant
              (nth colors (apply max-key (fn [i] (color-distance (nth lab-colors i) dom-lab)) (range (count colors)))),
              :colors colors,
              :most-frequent most-frequent,
              :data-colors data-colors,
              :dominant dom,
              :most-contrasting-dark (nth colors most-contrasting-dark-index),
              :second-brightest (nth colors second-brightest-idx),
              :brightest (nth colors brightest-idx),
              :most-contrasting-light (nth colors most-contrasting-light-index)})))
       (notable-colors colors dom))),
   :right-click? true,
   :icon "zmdi-functions",
   :types nil,
   :z 0,
   :ports {:in {:colors :any, :dom :any}, :out {:out :any}},
   :inputs nil,
   :h 135,
   :x 1450,
   :data
   {:flow-item
    {:category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:x :any, :out :any},
     :inputs [:colors :dom],
     :expandable? true,
     :drag-meta {:type :open-fn}}}},
  :join-output-as-string
  {:y 1700,
   :fn (fn [x] x),
   :w 200,
   :raw-fn (fn [x] (clojure.string/join " " x)),
   :right-click? true,
   :icon "zmdi-functions",
   :z 0,
   :ports {:in {:value :any}, :out {:out :any}},
   :h 100,
   :x 1375,
   :data
   {:flow-item
    {:description "Write you own Clojure function! Godspeed!",
     :category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:value :any, :out :any},
     :input_types "[:any]",
     :inputs "[:value]",
     :output_types ":any",
     :expandable? true,
     :full_map
     "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :h 6,
    :connection-id nil,
    :queries
    {:name-drag-25
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :ii11]],
      :where [:= :name ":open-fn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":open-fn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :open-fn,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}}},
  :shell-command-in
  {:y 750,
   :w 225,
   :types nil,
   :z 0,
   :ports {:out {:out {:out :string}}, :in {}},
   :inputs nil,
   :h 125,
   :x 1175,
   :data
   {:drag-meta {:type :open-block},
    :flow-item {:expandable? true},
    :user-input "cd ../extras/node-colorthief ; node ./colorThief2.js"}},
  :waiter-fn
  {:y 1300,
   :fn (fn [x] x),
   :w 125,
   :raw-fn (fn [cmd img] img),
   :right-click? true,
   :icon "zmdi-functions",
   :types nil,
   :z 0,
   :ports {:in {:cmd :any, :img :any}, :out {:out :any}},
   :inputs nil,
   :h 85,
   :x 1525,
   :data
   {:flow-item
    {:category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:x :any, :out :any},
     :inputs [:cmd :img],
     :expandable? true,
     :drag-meta {:type :open-fn}}}},
  :temp-name
  {:y 900,
   :fn (fn [x] x),
   :w 150,
   :raw-fn (fn [x] (str "/tmp/img" (hash x) "-" (rand-int 9999) ".png")),
   :right-click? true,
   :icon "zmdi-functions",
   :types nil,
   :z 0,
   :ports {:in {:x :any}, :out {:out :any}},
   :inputs nil,
   :h 100,
   :x 1650,
   :data
   {:flow-item
    {:category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:x :any, :out :any},
     :inputs [:x],
     :expandable? true,
     :drag-meta {:type :open-fn}}}}},
 :zoom [149.21 -219.97 0.565],
 :opts {:close-on-done? true, :retry-on-error? false, :timeout 800000, :retries 0},
 :flow-id "node-color-thief-js-webp",
 :flowmaps-connections
 [[:shell-command-in :clojure-string-join-1/value-1]
  [:clojure-string-join-1 :shell-command-1/command]
  [:shell-command-1/output :join-output-as-string/value]
  [:join-output-as-string :json-to-edn/json-string]
  [:temp-name :convert-to-png/y]
  [:convert-to-png :run-the-convert-command/command]
  [:run-the-convert-command :waiter-fn/cmd]
  [:temp-name :waiter-fn/img]
  [:waiter-fn :clojure-string-join-1/value-2]
  [:json-to-edn :json-to-edn_colorPalette/x]
  [:get-color-edges :done]
  [:json-to-edn :json-to-edn_dominantColor/x]
  [:json-to-edn_colorPalette :get-color-edges/colors]
  [:json-to-edn_dominantColor :get-color-edges/dom]
  [:image-path :path-correction/x]
  [:path-correction :temp-name/x]
  [:path-correction :convert-to-png/x]]}