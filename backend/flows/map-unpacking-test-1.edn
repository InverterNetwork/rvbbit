{:flowmaps
 {:open-fn
  {:y 1156.415897902397,
   :w 200,
   :raw-fn (fn [x s] (str s " - " (+ 1323 x))),
   :icon "zmdi-functions",
   :z 0,
   :ports {:in {:value* :any, :value-1 :any}, :out {:out :any}},
   :h 100,
   :x 1738.5048052226027,
   :data
   {:flow-item
    {:description
     "Clojure count function, takes a sequence and returns an integer of the number of items.",
     :category ":clojure-base",
     :name ":open-fn",
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:value* :any, :out :any},
     :input_types "[:any]",
     :inputs [:value* :value-1],
     :output_types ":any",
     :full_map
     "{:description \"Clojure count function, takes a sequence and returns an integer of the number of items.\", :view (fn [_]), :fn (fn [x] x), :inputs [:value*], :icon \"zmdi-functions\", :type :open-fn, :types {:value* :any, :out :any}}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :root [594 192.5],
    :h 6,
    :connection-id nil,
    :queries
    {:name-drag-1
     {:select
      [:name
       :full_map
       :description
       :inputs
       :icon
       :input_types
       :output_types
       :category],
      :from [[:query/flow-fn-sys :mm486]],
      :where [:= :name ":open-fn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":open-fn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :open-fn,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}}},
  :open-input
  {:w 200,
   :h 60,
   :data {:drag-meta {:type :open-block}, :user-input 44},
   :z 0,
   :ports {:out {:out :integer}},
   :x 1457.109658604452,
   :y 1130.7648116438356},
  :open-input-1
  {:w 200,
   :h 60,
   :data
   {:drag-meta {:type :open-block}, :user-input "feed me, seymour!"},
   :z 0,
   :ports {:out {:out :string}},
   :x 1465.3423480308222,
   :y 1238.531292808219},
  :open-fn-1
  {:y 1231.8565482954546,
   :w 200,
   :raw-fn
   (fn [x]
     {:counts (count (for [i (range 434)] {i x})),
      :map {:tt 45},
      :moo? true}),
   :icon "zmdi-functions",
   :z 0,
   :ports
   {:in {:value* :any},
    :out
    {:counts :integer,
     :map :map,
     :moo? :boolean,
     :* {:counts 434, :map {:tt 45}, :moo? true}}},
   :h 100,
   :x 2040.5923153409092,
   :data
   {:flow-item
    {:description
     "Clojure count function, takes a sequence and returns an integer of the number of items.",
     :category ":clojure-base",
     :name ":open-fn",
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:value* :any, :out :any},
     :input_types "[:any]",
     :inputs "[:value*]",
     :output_types ":any",
     :full_map
     "{:description \"Clojure count function, takes a sequence and returns an integer of the number of items.\", :view (fn [_]), :fn (fn [x] x), :inputs [:value*], :icon \"zmdi-functions\", :type :open-fn, :types {:value* :any, :out :any}}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :root [1275 225.5],
    :h 6,
    :connection-id nil,
    :queries
    {:name-drag-43
     {:select
      [:name
       :full_map
       :description
       :inputs
       :icon
       :input_types
       :output_types
       :category],
      :from [[:query/flow-fn-sys :ee518]],
      :where [:= :name ":open-fn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":open-fn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :open-fn,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}}},
  :*-1
  {:w 200,
   :h 100,
   :x 2351.323636363636,
   :y 1220.8,
   :z 0,
   :data
   {:flow-item
    {:description "Clojure multiply function.",
     :category ":clojure-base",
     :fn *,
     :name ":*",
     :icon "zmdi-plus",
     :types
     {:value1 [:integer :float],
      :value2 [:integer :float],
      :out [:integer :float]},
     :input_types "[[:integer :float] [:integer :float]]",
     :inputs "[:value1 :value2]",
     :output_types "[:integer :float]",
     :full_map
     "{:description \"Clojure multiply function.\", :fn *, :inputs [:value1 :value2], :icon \"zmdi-plus\", :types {:value1 [:integer :float], :value2 [:integer :float], :out [:integer :float]}}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :root [1426 238],
    :h 6,
    :connection-id nil,
    :queries
    {:name-drag-16
     {:select
      [:name
       :full_map
       :description
       :inputs
       :icon
       :input_types
       :output_types
       :category],
      :from [[:query/flow-fn-sys :ss488]],
      :where [:= :name ":*"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":*",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :where,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 4}},
   :icon "zmdi-plus",
   :ports
   {:in {:value1 [:integer :float], :value2 [:integer :float]},
    :out {:out [:integer :float]}}},
  :open-input-2
  {:w 200,
   :h 60,
   :data {:drag-meta {:type :open-block}, :user-input 3},
   :z 0,
   :ports {:out {:out :integer}},
   :x 2021.1136754261363,
   :y 1094.6733132102272},
  :kick-1
  {:w 200,
   :h 100,
   :x 2609.210140306122,
   :y 1094.326881377551,
   :z 0,
   :data
   {:flow-item
    {:description "Push items to the client UI.",
     :category ":clojure-base",
     :fn
     (fn [destination name sub-task & args]
       (rvbbit-backend.websockets/kick destination name sub-task args)),
     :name ":kick",
     :type :kick,
     :icon "images/pink-rabbit-head.png",
     :defaults
     {:destination :client-name, :sub-task :flow-id, :name :flow-id},
     :types
     {:destination [:keyword :vector :list :set],
      :name :string,
      :sub-task [:string :keyword],
      :out :any},
     :input_types
     "[[:keyword :vector :list :set] :string [:string :keyword]]",
     :style {:color "#fc0fc0"},
     :selected-style {:color "#fc0fc0"},
     :inputs [:destination :name :sub-task :value-3 :value-4],
     :output_types ":any",
     :expandable? true,
     :full_map
     "{:description \"Push items to the client UI.\", :fn (fn [destination name sub-task & args] (rvbbit-backend.websockets/kick destination name sub-task args)), :type :kick, :icon \"images/pink-rabbit-head.png\", :defaults {:destination :client-name, :sub-task :flow-id, :name :flow-id}, :types {:destination [:keyword :vector :list :set], :name :string, :sub-task [:string :keyword], :out :any}, :style {:color \"#fc0fc0\"}, :selected-style {:color \"#fc0fc0\"}, :inputs [:destination :name :sub-task], :expandable? true, :required [:destination :name :sub-task]}",
     :required [:destination :name :sub-task]},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :root [1320 103],
    :h 6,
    :connection-id nil,
    :queries
    {:name-drag-19
     {:select
      [:name
       :full_map
       :description
       :inputs
       :icon
       :input_types
       :output_types
       :category],
      :from [[:query/flow-fn-sys :ww633]],
      :where [:= :name ":kick"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":kick",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :kick,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}},
   :icon "images/pink-rabbit-head.png",
   :ports
   {:in
    {:destination [:keyword :vector :list :set],
     :name :string,
     :sub-task [:string :keyword],
     :value-3 :any,
     :value-4 :any},
    :out
    {:sent! :string,
     :to :keyword,
     :at :string,
     :payload :vector,
     :*
     {:sent! "map-unpacking-test-1",
      :to :heavenly-Prussian-blue-toad-of-wetland,
      :at "2023-12-31 20:09:35",
      :payload [(1302)]}}}}},
 :flow-id "map-unpacking-test-1",
 :flowmaps-connections
 [[:open-input :open-fn/value*]
  [:open-input-1 :open-fn/value-1]
  [:open-fn :open-fn-1/value*]
  [:open-fn-1/counts :*-1/value1]
  [:open-input-2 :*-1/value2]
  [:*-1 :kick-1/value-3]
  [:kick-1 :done]
  [:open-fn :kick-1/value-4]]}