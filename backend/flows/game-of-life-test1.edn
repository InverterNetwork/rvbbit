{:flowmaps
 {:open-fn-1
  {:y 1175,
   :fn (fn [x] x),
   :w 325,
   :raw-fn
   (fn [rows cols delay-ms iterations]
     (defn initialize-grid [rows cols]
       (into
         {}
         (for
           [y (range rows) x (range cols)]
           {[x y] {:x x, :y y, :color (if (zero? (rand-int 2)) :black :white), :age 0}})))
     (defn neighbors [grid x y]
       (for
         [dx
          [-1 0 1]
          dy
          [-1 0 1]
          :let
          [nx (+ x dx) ny (+ y dy)]
          :when
          (and (not (and (= dx 0) (= dy 0))) (>= nx 0) (< nx cols) (>= ny 0) (< ny rows))]
         (get grid [nx ny])))
     (defn alive? [cell] (and cell (= :black (:color cell))))
     (defn next-state [grid cell]
       (let [x (:x cell) y (:y cell) n (count (filter alive? (neighbors grid x y))) alive (alive? cell)]
         (cond
           (and alive (or (< n 2) (> n 3))) (assoc cell :color :white :age 0)
           (and (not alive) (= n 3)) (assoc cell :color :black :age 1)
           alive (update cell :age inc)
           :else cell)))
     (defn update-grid [grid] (into {} (map (fn [[coords cell]] [coords (next-state grid cell)]) grid)))
     (let [grid (atom (initialize-grid rows cols))
           tapln (fn [x] (rvbbit-backend.websockets/alert! :client-name [:box :child (str x)] 11 1 6))
           draw-it (fn [grid]
                     (let [max-x (apply max (map (comp :x second) grid)) max-y (apply max (map (comp :y second) grid))]
                       (rvbbit-backend.websockets/alert!
                         :client-name
                         [:box
                          :child
                          [:v-box
                           :children
                           (for
                             [y (range (inc max-y))]
                             [:h-box
                              :children
                              (for
                                [x (range (inc max-x))]
                                (let [{:keys [color age]} (get grid [x y] {:color :white, :age 0})
                                      ccolor (if (= :white color) :theme/editor-outer-rim-color "#00000000")]
                                  [:box
                                   :child
                                   (str (when (> age 0) age))
                                   :align
                                   :center
                                   :justify
                                   :center
                                   {:style
                                    {:background-color ccolor,
                                     :font-size "7px",
                                     :font-family "Homemade Apple",
                                     :font-weight 400,
                                     :color (str ccolor "12"),
                                     :width "20px",
                                     :height "20px",
                                     :border "1px solid #00000011"}}]))])]]
                         15
                         5
                         4)))
           render-it (fn [grid]
                       (let [max-x (apply max (map (comp :x second) grid)) max-y (apply max (map (comp :y second) grid))]
                         [:box
                          :style
                          {}
                          :child
                          [:v-box
                           :children
                           (for
                             [y (range (inc max-y))]
                             [:h-box
                              :children
                              (for
                                [x (range (inc max-x))]
                                (let [{:keys [color age]} (get grid [x y] {:color :white, :age 0})
                                      ccolor (if (= :white color) "#ffffff22" "#00000000")]
                                  [:box
                                   :child
                                   (str (when (> age 0) age))
                                   :align
                                   :center
                                   :justify
                                   :center
                                   {:style
                                    {:background-color ccolor,
                                     :font-size "7px",
                                     :font-family "Homemade Apple",
                                     :color (str ccolor "12"),
                                     :width "50px",
                                     :height "50px",
                                     :border "1px solid #00000011"}}]))])]]))]
       (println "Initial grid:" (deref grid))
       (defn game-of-life [rows cols delay-ms iterations]
         (let [done (java.util.concurrent.CountDownLatch. 1)]
           (.start
             (Thread.
               (fn []
                 (loop [i iterations prev-grid (deref grid)]
                   (if (zero? i)
                     (.countDown done)
                     (let [iteration-num (- iterations i)
                           alive-cnt (fn [x] (count (for [[k v] (deref grid) :when (= (get v :color) :white)] k)))]
                       (swap! grid update-grid)
                       (swap!
                         rvbbit-backend.websockets/panels-atom
                         assoc-in
                         [:client-name :block-11586 :views :hi]
                         [:box :child (render-it (deref grid))])
                       (Thread/sleep delay-ms)
                       (if (= prev-grid (deref grid))
                         (do
                           (tapln (str "Stable state reached at iteration " iteration-num (rand-int 12333)))
                           (.countDown done))
                         (recur (dec i) (deref grid)))))))))
           (.await done)))
       (game-of-life rows cols delay-ms iterations)
       (deref grid))),
   :right-click? true,
   :icon "zmdi-functions",
   :types nil,
   :z 0,
   :ports {:in {:rows :any, :cols :any, :delay-ms :any, :iterations :any}, :out {:out :any}},
   :inputs nil,
   :h 250,
   :x 1875,
   :view
   (fn [grid]
     (let [max-x (apply max (map (comp :x second) grid)) max-y (apply max (map (comp :y second) grid))]
       [:v-box
        :children
        (for
          [y (range (inc max-y))]
          [:h-box
           :children
           (for
             [x (range (inc max-x))]
             (let [{:keys [color age]} (get grid [x y] {:color :white, :age 0})
                   ccolor (if (= :white color) :theme/editor-outer-rim-color "#00000000")]
               [:box
                :child
                (str (when (> age 0) age))
                :align
                :center
                :justify
                :center
                {:style
                 {:background-color ccolor,
                  :font-size "7px",
                  :font-family "Homemade Apple",
                  :font-weight 400,
                  :color (str ccolor "12"),
                  :width "20px",
                  :height "20px",
                  :border "1px solid #00000011"}}]))])])),
   :data
   {:flow-item
    {:category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:rows :any, :cols :any, :delay-ms :any, :out :any},
     :inputs [:rows :cols :delay-ms],
     :expandable? true,
     :drag-meta {:type :open-fn}}}},
  :open-fn-2d
  {:y 1475,
   :fn (fn [x] x),
   :w 175,
   :raw-fn (fn [x] (count (for [[k v] x :when (= (get v :color) :white)] k))),
   :right-click? true,
   :icon "zmdi-functions",
   :types nil,
   :z 0,
   :ports {:in {:x :any}, :out {:out :any}},
   :inputs nil,
   :h 110,
   :x 1875,
   :data
   {:flow-item
    {:category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:x :any, :out :any},
     :inputs [:x],
     :expandable? true,
     :drag-meta {:type :open-fn}}}},
  :open-input
  {:y 1050,
   :w 125,
   :right-click? true,
   :types nil,
   :z 0,
   :ports {:in {}, :out {:out {:out :integer}}},
   :inputs nil,
   :h 85,
   :x 1775,
   :data {:flow-item {:expandable? true, :inputs []}, :drag-meta {:type :open-block}, :user-input 20}},
  :open-input-1
  {:y 1050,
   :w 125,
   :right-click? true,
   :types nil,
   :z 0,
   :ports {:in {}, :out {:out {:out :integer}}},
   :inputs nil,
   :h 85,
   :x 1925,
   :data {:flow-item {:expandable? true, :inputs []}, :drag-meta {:type :open-block}, :user-input 35}},
  :open-input-2
  {:y 1050,
   :w 125,
   :right-click? true,
   :types nil,
   :z 0,
   :ports {:in {}, :out {:out {:out :integer}}},
   :inputs nil,
   :h 85,
   :x 2075,
   :data {:flow-item {:expandable? true, :inputs []}, :drag-meta {:type :open-block}, :user-input 2456}},
  :open-input-3
  {:y 1050,
   :w 125,
   :right-click? true,
   :types nil,
   :z 0,
   :ports {:in {}, :out {:out {:out :integer}}},
   :inputs nil,
   :h 85,
   :x 2225,
   :data {:flow-item {:expandable? true, :inputs []}, :drag-meta {:type :open-block}, :user-input 13}}},
 :zoom [-785 -862 0.925],
 :opts {:retry-on-error? false, :retries 5, :close-on-done? true, :timeout 4500000},
 :flow-id "game-of-life-test1",
 :flowmaps-connections
 [[:open-fn-2d :done]
  [:open-input :open-fn-1/rows]
  [:open-input-1 :open-fn-1/cols]
  [:open-input-2 :open-fn-1/delay-ms]
  [:open-fn-1 :open-fn-2d/x]
  [:open-input-3 :open-fn-1/iterations]]}