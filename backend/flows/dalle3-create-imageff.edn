{:flowmaps
 {:open-fn-13
  {:y 1950,
   :fn (fn [x] x),
   :w 200,
   :raw-fn
   (fn [hex-colors]
     (vec
       (let [hex-to-rgb (fn [hex] (map (fn [idx] (Integer/parseInt (subs hex idx (+ idx 2)) 16)) [1 3 5]))
             brightness (fn [rgb] (let [[r g b] rgb] (+ (* 0.299 r) (* 0.587 g) (* 0.114 b))))]
         (sort-by (comp brightness hex-to-rgb) hex-colors)))),
   :right-click? true,
   :icon "zmdi-functions",
   :z 0,
   :ports
   {:in {:value :any},
    :out
    {:idx7 :string,
     :idx5 :string,
     :* :vector,
     :idx2 :string,
     :idx4 :string,
     :idx1 :string,
     :idx6 :string,
     :idx3 :string,
     :idx8 :string,
     :idx0 :string}},
   :h 100,
   :x 3850,
   :data
   {:flow-item
    {:description "Write you own Clojure function! Godspeed!",
     :category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:value :any, :out :any},
     :input_types "[:any]",
     :inputs "[:value]",
     :output_types ":any",
     :expandable? true,
     :full_map
     "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :h 6,
    :connection-id nil,
    :view-output? false,
    :queries
    {:name-drag-25
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :ii11]],
      :where [:= :name ":open-fn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":open-fn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :open-fn,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}}},
  :second-lightest
  {:y 1972.8225287543403,
   :fn (fn [x] x),
   :w 200,
   :raw-fn (fn [x] (last (drop-last x))),
   :right-click? true,
   :icon "zmdi-functions",
   :z 0,
   :ports {:in {:value :any}, :out {:out :any}},
   :h 100,
   :x 5305.513375289351,
   :data
   {:flow-item
    {:description "Write you own Clojure function! Godspeed!",
     :category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:value :any, :out :any},
     :input_types "[:any]",
     :inputs "[:value]",
     :output_types ":any",
     :expandable? true,
     :full_map
     "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :h 6,
    :connection-id nil,
    :view-output? true,
    :queries
    {:name-drag-25
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :ii11]],
      :where [:= :name ":open-fn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":open-fn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :open-fn,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}}},
  :open-fn-8
  {:y 1150,
   :fn (fn [x] x),
   :w 200,
   :raw-fn (fn [x y] (str (clojure.string/replace x "/home/ryanr/rvbbit/frontend/resources/public/" "url(") ")")),
   :right-click? true,
   :icon "zmdi-functions",
   :z 0,
   :ports {:in {:value :any, :value-1 :any}, :out {:out :any}},
   :h 100,
   :x 3475,
   :data
   {:flow-item
    {:description "Write you own Clojure function! Godspeed!",
     :category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:value :any, :out :any},
     :input_types "[:any]",
     :inputs "[:value]",
     :output_types ":any",
     :expandable? true,
     :full_map
     "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :h 6,
    :connection-id nil,
    :view-output? false,
    :queries
    {:name-drag-25
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :ii11]],
      :where [:= :name ":open-fn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":open-fn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :open-fn,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}}},
  :alert!-2
  {:w 200,
   :h 100,
   :x 5313.887965339137,
   :y 1188.6692051877603,
   :z 0,
   :data
   {:flow-item
    {:description "Send a pop-up notification to a client (or :all clients)",
     :category ":rabbit-base",
     :fn (fn [destination content w h duration] (rvbbit-backend.websockets/alert! destination content w h duration)),
     :name ":alert!",
     :icon "zmdi-alert-polygon",
     :defaults {:destination :client-name, :content "Alert!", :w 10, :h 1, :duration 6},
     :types {:destination :keyword, :content :any, :out :any, :w :integer, :h :integer, :duration :integer},
     :input_types "[:keyword :any :integer :integer :integer]",
     :style {:color "#FDFD96"},
     :selected-style {:color "#FDFD96"},
     :inputs "[:destination :content :w :h :duration]",
     :output_types ":any",
     :full_map
     "{:description \"Send a pop-up notification to a client (or :all clients)\", :fn (fn [destination content w h duration] (rvbbit-backend.websockets/alert! destination content w h duration)), :inputs [:destination :content :w :h :duration], :icon \"zmdi-alert-polygon\", :style {:color \"#FDFD96\"}, :selected-style {:color \"#FDFD96\"}, :defaults {:destination :client-name, :content \"Alert!\", :w 10, :h 1, :duration 6}, :types {:destination :keyword, :content :any, :out :any, :w :integer, :h :integer, :duration :integer}}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :root [1154 188],
    :h 6,
    :connection-id nil,
    :queries
    {:name-drag-34
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :qq253]],
      :where [:= :name ":alert!"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":alert!",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :where,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 0}},
   :icon "zmdi-alert-polygon",
   :ports {:in {:destination :keyword, :content :any, :w :integer, :h :integer, :duration :integer}, :out {:out :any}}},
  :open-fn-7
  {:y 1525,
   :fn (fn [x] x),
   :w 200,
   :raw-fn (fn [x y] (str "convert " x " " y)),
   :right-click? true,
   :icon "zmdi-functions",
   :z 0,
   :ports {:in {:value :any, :value-1 :any}, :out {:out :any}},
   :h 100,
   :x 2600,
   :data
   {:flow-item
    {:description "Write you own Clojure function! Godspeed!",
     :category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:value :any, :out :any},
     :input_types "[:any]",
     :inputs "[:value]",
     :output_types ":any",
     :expandable? true,
     :full_map
     "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :h 6,
    :connection-id nil,
    :view-output? true,
    :queries
    {:name-drag-25
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :ii11]],
      :where [:= :name ":open-fn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":open-fn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :open-fn,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}}},
  :shell-command-1
  {:w 200,
   :h 100,
   :x 3100,
   :y 1350,
   :z 0,
   :data
   {:flow-item
    {:description "Execute shell command. WARNING: only use if you know what you're doing / have controlled inputs",
     :category ":rabbit-base",
     :fn (fn [command] (rvbbit-backend.websockets/run-shell-command command)),
     :name ":shell-command",
     :icon "zmdi-washing-machine",
     :defaults {:command "ls -la"},
     :types {:command :string, :out :any},
     :input_types "[:string]",
     :style {:color "#ffdd3c"},
     :selected-style {:color "#ffdd3c"},
     :inputs "[:command]",
     :output_types ":any",
     :full_map
     "{:description \"Execute shell command. WARNING: only use if you know what you're doing / have controlled inputs\", :fn (fn [command] (rvbbit-backend.websockets/run-shell-command command)), :icon \"zmdi-washing-machine\", :defaults {:command \"ls -la\"}, :types {:command :string, :out :any}, :style {:color \"#ffdd3c\"}, :selected-style {:color \"#ffdd3c\"}, :inputs [:command], :required [:command]}",
     :required [:command]},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :root [890 244],
    :h 6,
    :connection-id nil,
    :view-output? true,
    :queries
    {:name-drag-37
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :vv683]],
      :where [:= :name ":shell-command"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":shell-command",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :where,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 7}},
   :icon "zmdi-washing-machine",
   :ports
   {:in {:command :string}, :out {:output :vector, :exception :vector, :seconds :vector, :command :string, :* :map}}},
  :lightest1
  {:y 1798.000480143229,
   :fn (fn [x] x),
   :w 200,
   :raw-fn (fn [x] (last x)),
   :right-click? true,
   :icon "zmdi-functions",
   :z 0,
   :ports {:in {:value :any}, :out {:out :any}},
   :h 100,
   :x 5290.254224537037,
   :data
   {:flow-item
    {:description "Write you own Clojure function! Godspeed!",
     :category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:value :any, :out :any},
     :input_types "[:any]",
     :inputs "[:value]",
     :output_types ":any",
     :expandable? true,
     :full_map
     "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :h 6,
    :connection-id nil,
    :view-output? true,
    :queries
    {:name-drag-25
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :ii11]],
      :where [:= :name ":open-fn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":open-fn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :open-fn,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}}},
  :gradient1
  {:y 1779.8277822989005,
   :fn (fn [x] x),
   :w 200,
   :raw-fn (fn [x y] (vec (rvbbit-backend.util/generate-gradient x y 8))),
   :right-click? true,
   :icon "zmdi-functions",
   :z 0,
   :ports
   {:in {:value :any, :value-1 :any},
    :out
    {:idx7 :string,
     :idx5 :string,
     :* :vector,
     :idx2 :string,
     :idx4 :string,
     :idx1 :string,
     :idx6 :string,
     :idx3 :string,
     :idx0 :string}},
   :h 100,
   :x 5737.372641782406,
   :data
   {:flow-item
    {:description "Write you own Clojure function! Godspeed!",
     :category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:value :any, :out :any},
     :input_types "[:any]",
     :inputs "[:value]",
     :output_types ":any",
     :expandable? true,
     :full_map
     "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :h 6,
    :connection-id nil,
    :view-output? true,
    :queries
    {:name-drag-25
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :ii11]],
      :where [:= :name ":open-fn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":open-fn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :open-fn,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}}},
  :open-fn-1
  {:y 1400,
   :fn (fn [x] x),
   :w 200,
   :raw-fn (fn [x] x),
   :right-click? true,
   :icon "zmdi-functions",
   :z 0,
   :ports {:in {:value :any}, :out {:headers :map, :method :keyword, :url :string, :body :map, :* :map}},
   :h 100,
   :x 1200,
   :data
   {:flow-item
    {:description "Write you own Clojure function! Godspeed!",
     :category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:value :any, :out :any},
     :input_types "[:any]",
     :inputs "[:value]",
     :output_types ":any",
     :expandable? true,
     :full_map
     "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :h 6,
    :connection-id nil,
    :view-output? true,
    :queries
    {:name-drag-25
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :ii11]],
      :where [:= :name ":open-fn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":open-fn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :open-fn,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}}},
  :open-fn-2
  {:y 1450,
   :fn (fn [x] x),
   :w 200,
   :raw-fn (fn [x] x),
   :right-click? true,
   :icon "zmdi-functions",
   :z 0,
   :ports {:in {:value :any}, :out {:idx0 :map, :* :vector}},
   :h 100,
   :x 1650,
   :data
   {:flow-item
    {:description "Write you own Clojure function! Godspeed!",
     :category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:value :any, :out :any},
     :input_types "[:any]",
     :inputs "[:value]",
     :output_types ":any",
     :expandable? true,
     :full_map
     "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :h 6,
    :connection-id nil,
    :view-output? true,
    :queries
    {:name-drag-25
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :ii11]],
      :where [:= :name ":open-fn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":open-fn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :open-fn,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}}},
  :darkest1
  {:y 1499.4197961877892,
   :fn (fn [x] x),
   :w 200,
   :raw-fn (fn [x] (first x)),
   :right-click? true,
   :icon "zmdi-functions",
   :z 0,
   :ports {:in {:value :any}, :out {:out :any}},
   :h 100,
   :x 5274.040574363425,
   :data
   {:flow-item
    {:description "Write you own Clojure function! Godspeed!",
     :category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:value :any, :out :any},
     :input_types "[:any]",
     :inputs "[:value]",
     :output_types ":any",
     :expandable? true,
     :full_map
     "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :h 6,
    :connection-id nil,
    :view-output? true,
    :queries
    {:name-drag-25
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :ii11]],
      :where [:= :name ":open-fn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":open-fn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :open-fn,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}}},
  :open-input-1
  {:w 200,
   :h 100,
   :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input "vivid"},
   :z 0,
   :ports {:out {:out :string}},
   :x 150,
   :y 1150},
  :open-input-3
  {:w 200,
   :h 100,
   :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input {:width 13, :height 8, :duration 9}},
   :z 0,
   :ports {:out {:width :integer, :height :integer, :duration :integer, :* :map}},
   :x 4000,
   :y 1350},
  :alert!-1
  {:w 240,
   :h 100,
   :x 5282.577773321242,
   :y 1355.4901399717228,
   :z 0,
   :data
   {:flow-item
    {:description "Send a pop-up notification to a client (or :all clients)",
     :category ":rabbit-base",
     :fn (fn [destination content w h duration] (rvbbit-backend.websockets/alert! destination content w h duration)),
     :name ":alert!",
     :icon "zmdi-alert-polygon",
     :defaults {:destination :client-name, :content "Alert!", :w 10, :h 1, :duration 6},
     :types {:destination :keyword, :content :any, :out :any, :w :integer, :h :integer, :duration :integer},
     :input_types "[:keyword :any :integer :integer :integer]",
     :style {:color "#FDFD96"},
     :selected-style {:color "#FDFD96"},
     :inputs "[:destination :content :w :h :duration]",
     :output_types ":any",
     :full_map
     "{:description \"Send a pop-up notification to a client (or :all clients)\", :fn (fn [destination content w h duration] (rvbbit-backend.websockets/alert! destination content w h duration)), :inputs [:destination :content :w :h :duration], :icon \"zmdi-alert-polygon\", :style {:color \"#FDFD96\"}, :selected-style {:color \"#FDFD96\"}, :defaults {:destination :client-name, :content \"Alert!\", :w 10, :h 1, :duration 6}, :types {:destination :keyword, :content :any, :out :any, :w :integer, :h :integer, :duration :integer}}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :root [676 74],
    :h 6,
    :connection-id nil,
    :view-output? true,
    :queries
    {:name-drag-17
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :yy463]],
      :where [:= :name ":alert!"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":alert!",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :where,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 0}},
   :icon "zmdi-alert-polygon",
   :ports {:in {:destination :keyword, :content :any, :w :integer, :h :integer, :duration :integer}, :out {:out :any}}},
  :make-data-colors
  {:y 1837.9007893880205,
   :fn (fn [x] x),
   :w 200,
   :raw-fn
   (fn [x y]
     (zipmap
       ["float"
        "boolean"
        "map"
        "list"
        "string"
        "vector"
        "keyword"
        "rabbit-code"
        "datetime"
        "integer"
        "unknown"
        "date"
        "nil"]
       (shuffle (into y x)))),
   :right-click? true,
   :icon "zmdi-functions",
   :z 0,
   :ports
   {:in {:value :any, :value-1 :any},
    :out
    {"float" :string,
     "boolean" :string,
     "map" :string,
     "list" :string,
     :* :map,
     "string" :string,
     "vector" :string,
     "keyword" :string,
     "rabbit-code" :string,
     "datetime" :string,
     "integer" :string,
     "unknown" :string,
     "date" :string,
     "nil" :string}},
   :h 100,
   :x 6211.317592592592,
   :data
   {:flow-item
    {:description "Write you own Clojure function! Godspeed!",
     :category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:value :any, :out :any},
     :input_types "[:any]",
     :inputs "[:value]",
     :output_types ":any",
     :expandable? true,
     :full_map
     "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :h 6,
    :connection-id nil,
    :queries
    {:name-drag-25
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :ii11]],
      :where [:= :name ":open-fn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":open-fn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :open-fn,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}}},
  :in-prompt
  {:w 200,
   :h 100,
   :data
   {:drag-meta {:type :open-block},
    :flow-item {:expandable? true},
    :user-input
    "A high-definition, hyperreal, vivid 16:9 image of a New England scene in America, just before dawn during a heavy snowstorm, blending traditional and cyberpunk elements. The scene has a slightly gritty atmosphere, with the town covered in snow and buildings emitting soft pink and neon light blue glows. On the left side of the frame, a young and beautiful Irish-looking woman, clearly in her late 20s, with pouty full lips (with the bottom lip being prominent) and a slightly upturned nose, poses with a pleased expression yet mischievious on her large mouth. Her long hair is slightly wet, with snow collecting on it and her face, emphasizing the heavy snowfall. She has intricate Celtic-style tattoos of rabbits and wilderness on her neck, collarbone, and shoulders. The pre-dawn light adds a serene yet mysterious feel to the scene, underscoring the fusion of the natural world and technological influence.",
    :width 750},
   :z 0,
   :ports {:out {:out :string}},
   :x 727.2187565983952,
   :y 1028.1476308461783},
  :open-fn-6
  {:y 1250,
   :fn (fn [x] x),
   :w 200,
   :raw-fn
   (fn [x]
     (clojure.string/replace
       (clojure.string/replace x ".webp" ".png")
       "/home/ryanr/rvbbit-out"
       "/home/ryanr/rvbbit/frontend/resources/public/images/gen")),
   :right-click? true,
   :icon "zmdi-functions",
   :z 0,
   :ports {:in {:value :any}, :out {:out :any}},
   :h 100,
   :x 2675,
   :data
   {:flow-item
    {:description "Write you own Clojure function! Godspeed!",
     :category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:value :any, :out :any},
     :input_types "[:any]",
     :inputs "[:value]",
     :output_types ":any",
     :expandable? true,
     :full_map
     "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :h 6,
    :connection-id nil,
    :view-output? true,
    :queries
    {:name-drag-25
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :ii11]],
      :where [:= :name ":open-fn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":open-fn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :open-fn,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}}},
  :ssecond-darkest
  {:y 1644.5442626953125,
   :fn (fn [x] x),
   :w 200,
   :raw-fn (fn [x] (second x)),
   :right-click? true,
   :icon "zmdi-functions",
   :z 0,
   :ports {:in {:value :any}, :out {:out :any}},
   :h 100,
   :x 5294.654181134259,
   :data
   {:flow-item
    {:description "Write you own Clojure function! Godspeed!",
     :category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:value :any, :out :any},
     :input_types "[:any]",
     :inputs "[:value]",
     :output_types ":any",
     :expandable? true,
     :full_map
     "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :h 6,
    :connection-id nil,
    :queries
    {:name-drag-25
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :ii11]],
      :where [:= :name ":open-fn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":open-fn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :open-fn,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}}},
  :node-color-thief-js
  {:y 1775,
   :sub-flow
   {:flow-id "node-color-thief-js",
    :file-path "./flows/node-color-thief-js.edn",
    :map
    {:image-path
     {:w 200,
      :h 100,
      :data
      {:drag-meta {:type :open-block},
       :flow-item {:expandable? true},
       :user-input " /home/ryanr/rvbbit/frontend/resources/public/images/large/shannon45.png"},
      :z 0,
      :ports {:out {:out :string}},
      :x 948.9116738809121,
      :y 1074.148015202703},
     :shell-command-1
     {:w 200,
      :h 100,
      :x 1758.4411167689732,
      :y 1117.7292503720237,
      :z 0,
      :data
      {:flow-item
       {:description "Execute shell command. WARNING: only use if you know what you're doing / have controlled inputs",
        :category ":rabbit-base",
        :fn (fn [command] (rvbbit-backend.websockets/run-shell-command command)),
        :name ":shell-command",
        :icon "zmdi-washing-machine",
        :defaults {:command "ls -la"},
        :types {:command :string, :out :any},
        :input_types "[:string]",
        :style {:color "#ffdd3c"},
        :selected-style {:color "#ffdd3c"},
        :inputs "[:command]",
        :output_types ":any",
        :full_map
        "{:description \"Execute shell command. WARNING: only use if you know what you're doing / have controlled inputs\", :fn (fn [command] (rvbbit-backend.websockets/run-shell-command command)), :icon \"zmdi-washing-machine\", :defaults {:command \"ls -la\"}, :types {:command :string, :out :any}, :style {:color \"#ffdd3c\"}, :selected-style {:color \"#ffdd3c\"}, :inputs [:command], :required [:command]}",
        :required [:command]},
       :name "drag-from-",
       :w 5,
       :source-panel :flow-fn-list*,
       :root [539.1770935058594 176.171875],
       :h 6,
       :connection-id nil,
       :queries
       {:name-drag-42
        {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
         :from [[:query/flow-fn-sys :cc59]],
         :where [:= :name ":shell-command"]}},
       :drag-meta
       {:data-type "string",
        :source-query :flow-fn-sys,
        :param-full ":shell-command",
        :param-field :name,
        :source-panel-key :flow-fn-list*,
        :type :where,
        :param-table :flow-fn-sys,
        :source-table :query/flow-fn-sys,
        :connection-id nil,
        :target :name,
        :row-num 6}},
      :icon "zmdi-washing-machine",
      :ports
      {:in {:command :string}, :out {:output :vector, :exception :vector, :seconds :vector, :command :string, :* :map}}},
     :clojure-string-join-1
     {:w 200,
      :h 100,
      :x 1348.4940418061756,
      :y 1136.4640299479165,
      :z 0,
      :data
      {:flow-item
       {:description "Clojure.string's join function.",
        :category ":clojure-base",
        :fn (fn [delimiter & args] (clojure.string/join delimiter args)),
        :name ":clojure-string-join",
        :icon "zmdi-group",
        :defaults {:delimiter " "},
        :types {:delimiter :string, :out :string},
        :input_types "[:string]",
        :inputs "[:delimiter]",
        :output_types ":string",
        :expandable? true,
        :full_map
        "{:description \"Clojure.string's join function.\", :fn (fn [delimiter & args] (clojure.string/join delimiter args)), :inputs [:delimiter], :required [:delimiter], :defaults {:delimiter \" \"}, :expandable? true, :icon \"zmdi-group\", :types {:delimiter :string, :out :string}}",
        :required [:delimiter]},
       :name "drag-from-",
       :w 5,
       :source-panel :flow-fn-list*,
       :root [540.1770935058594 279.171875],
       :h 6,
       :connection-id nil,
       :queries
       {:name-drag-12
        {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
         :from [[:query/flow-fn-sys :ww526]],
         :where [:= :name ":clojure-string-join"]}},
       :drag-meta
       {:data-type "string",
        :source-query :flow-fn-sys,
        :param-full ":clojure-string-join",
        :param-field :name,
        :source-panel-key :flow-fn-list*,
        :type :where,
        :param-table :flow-fn-sys,
        :source-table :query/flow-fn-sys,
        :connection-id nil,
        :target :name,
        :row-num 15}},
      :icon "zmdi-group",
      :ports {:in {:delimiter :string, :value-1 :any, :value-2 :any}, :out {:out :string}}},
     :shell-command-in
     {:w 200,
      :h 100,
      :data
      {:drag-meta {:type :open-block},
       :flow-item {:expandable? true},
       :user-input "cd /home/ryanr/color-thief-project ; node ./colorThief2.js"},
      :z 0,
      :ports {:out {:out :string}},
      :x 960.0851863779922,
      :y 1224.4579849567817},
     :join-output-as-string
     {:y 1158.848120777027,
      :fn (fn [x] x),
      :w 200,
      :raw-fn (fn [x] (clojure.string/join " " x)),
      :right-click? true,
      :icon "zmdi-functions",
      :z 0,
      :ports {:in {:value :any}, :out {:out :any}},
      :h 100,
      :x 2212.3248878272807,
      :data
      {:flow-item
       {:description "Write you own Clojure function! Godspeed!",
        :category ":rabbit-base",
        :fn (fn [x] x),
        :name ":open-fn",
        :raw-fn (fn [x] x),
        :type :open-fn,
        :icon "zmdi-functions",
        :types {:value :any, :out :any},
        :input_types "[:any]",
        :inputs "[:value]",
        :output_types ":any",
        :expandable? true,
        :full_map
        "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
       :name "drag-from-",
       :w 5,
       :source-panel :flow-fn-list*,
       :h 6,
       :connection-id nil,
       :queries
       {:name-drag-25
        {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
         :from [[:query/flow-fn-sys :ii11]],
         :where [:= :name ":open-fn"]}},
       :drag-meta
       {:data-type "string",
        :source-query :flow-fn-sys,
        :param-full ":open-fn",
        :param-field :name,
        :source-panel-key :flow-fn-list*,
        :type :open-fn,
        :param-table :flow-fn-sys,
        :source-table :query/flow-fn-sys,
        :connection-id nil,
        :target :name,
        :row-num 5}}},
     :json-to-edn
     {:w 200,
      :h 100,
      :x 2685.7088668823244,
      :y 1151.33984375,
      :z 0,
      :data
      {:flow-item
       {:description "Convert a JSON string to Clojure EDN",
        :category ":rabbit-base",
        :fn (fn [json-string] (rvbbit-backend.util/json-to-edn json-string)),
        :name ":json-to-edn",
        :icon "zmdi-file-text",
        :types {:json-string :string, :out :any},
        :input_types "[:string]",
        :inputs "[:json-string]",
        :output_types ":any",
        :full_map
        "{:description \"Convert a JSON string to Clojure EDN\", :fn (fn [json-string] (rvbbit-backend.util/json-to-edn json-string)), :inputs [:json-string], :icon \"zmdi-file-text\", :types {:json-string :string, :out :any}}"},
       :name "drag-from-",
       :w 5,
       :source-panel :flow-fn-list*,
       :root [1297.1770935058594 207.171875],
       :h 6,
       :connection-id nil,
       :queries
       {:name-drag-41
        {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
         :from [[:query/flow-fn-sys :uu284]],
         :where [:= :name ":json-to-edn"]}},
       :drag-meta
       {:data-type "string",
        :source-query :flow-fn-sys,
        :param-full ":json-to-edn",
        :param-field :name,
        :source-panel-key :flow-fn-list*,
        :type :where,
        :param-table :flow-fn-sys,
        :source-table :query/flow-fn-sys,
        :connection-id nil,
        :target :name,
        :row-num 7}},
      :icon "zmdi-file-text",
      :ports {:in {:json-string :string}, :out {:dominantColor :string, :colorPalette :vector, :* :map}}}},
    :connections
    [[:shell-command-in :clojure-string-join-1/value-1]
     [:image-path :clojure-string-join-1/value-2]
     [:clojure-string-join-1 :shell-command-1/command]
     [:shell-command-1/output :join-output-as-string/value]
     [:join-output-as-string :json-to-edn/json-string]
     [:json-to-edn :done]]},
   :flow-id "node-color-thief-js",
   :w 200,
   :icon "zmdi-puzzle-piece",
   :z 0,
   :ports
   {:in {:image-path :string, :shell-command-in :string}, :out {:dominantColor :string, :colorPalette :vector, :* :map}},
   :h 100,
   :file-path "./flows/node-color-thief-js.edn",
   :x 2775,
   :data
   {:flow-item nil,
    :name "drag-from-",
    :w 5,
    :source-panel :flow-list*,
    :root [678.71875 344.6979217529297],
    :h 6,
    :connection-id nil,
    :view-output? false,
    :queries
    {:flow-id-drag-5
     {:select [:flow_id :file_path :last_modified],
      :from [[:query/flows-sys :cc208]],
      :where [:= :flow_id "node-color-thief-js"]}},
    :drag-meta
    {:data-type "string",
     :done-block :json-to-edn,
     :source-query :flows-sys,
     :param-full "node-color-thief-js",
     :param-field :flow_id,
     :source-panel-key :flow-list*,
     :type :sub-flow,
     :param-table :flows-sys,
     :source-table :query/flows-sys,
     :connection-id nil,
     :target :flow_id,
     :row-num 4}}},
  :open-fn-9
  {:y 1400,
   :fn (fn [x] x),
   :w 200,
   :raw-fn (fn [& x] "vivid"),
   :right-click? true,
   :icon "zmdi-functions",
   :z 0,
   :ports {:in {:value :any, :value-1 :any}, :out {:error :string, :* :map}},
   :h 100,
   :x 450,
   :data
   {:flow-item
    {:description "Write you own Clojure function! Godspeed!",
     :category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:value :any, :out :any},
     :input_types "[:any]",
     :inputs "[:value]",
     :output_types ":any",
     :expandable? true,
     :full_map
     "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :h 6,
    :connection-id nil,
    :view-output? false,
    :queries
    {:name-drag-25
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :ii11]],
      :where [:= :name ":open-fn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":open-fn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :open-fn,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}}},
  :open-input
  {:w 200,
   :h 100,
   :data
   {:drag-meta {:type :open-block},
    :flow-item {:expandable? true},
    :user-input
    {:headers :value-2,
     :method :post,
     :url :value-3,
     :body
     {:prompt :value-0,
      :n 1,
      :size "1792x1024",
      :style :value-4,
      :response_format "b64_json",
      :model "dall-e-3",
      :quality :value-1}}},
   :z 0,
   :ports
   {:out {:headers :map, :method :keyword, :url :string, :body :map, :* :map},
    :in {:value-0 :any, :value-1 :any, :value-2 :any, :value-3 :any, :value-4 :any}},
   :x 1200,
   :y 1250},
  :dom-color1
  {:y 1700,
   :fn (fn [x] x),
   :w 200,
   :raw-fn (fn [x] x),
   :right-click? true,
   :icon "zmdi-functions",
   :z 0,
   :ports {:in {:value :any}, :out {:out :any}},
   :h 100,
   :x 3100,
   :data
   {:flow-item
    {:description "Write you own Clojure function! Godspeed!",
     :category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:value :any, :out :any},
     :input_types "[:any]",
     :inputs "[:value]",
     :output_types ":any",
     :expandable? true,
     :full_map
     "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :h 6,
    :connection-id nil,
    :queries
    {:name-drag-25
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :ii11]],
      :where [:= :name ":open-fn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":open-fn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :open-fn,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}}},
  :open-fn-11
  {:y 1750,
   :fn (fn [x] x),
   :w 200,
   :raw-fn (fn [x] x),
   :right-click? true,
   :icon "zmdi-functions",
   :z 0,
   :ports
   {:in {:value :any},
    :out
    {:idx7 :string,
     :idx5 :string,
     :* :vector,
     :idx2 :string,
     :idx4 :string,
     :idx1 :string,
     :idx6 :string,
     :idx3 :string,
     :idx8 :string,
     :idx0 :string}},
   :h 100,
   :x 3450,
   :data
   {:flow-item
    {:description "Write you own Clojure function! Godspeed!",
     :category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:value :any, :out :any},
     :input_types "[:any]",
     :inputs "[:value]",
     :output_types ":any",
     :expandable? true,
     :full_map
     "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :h 6,
    :connection-id nil,
    :queries
    {:name-drag-25
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :ii11]],
      :where [:= :name ":open-fn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":open-fn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :open-fn,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}}},
  :open-fn-3
  {:y 1350,
   :fn (fn [x] x),
   :w 200,
   :raw-fn (fn [x] x),
   :right-click? true,
   :icon "zmdi-functions",
   :z 0,
   :ports {:in {:value :any}, :out {:revised_prompt :string, :b64_json :string, :* :map}},
   :h 100,
   :x 1975,
   :data
   {:flow-item
    {:description "Write you own Clojure function! Godspeed!",
     :category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:value :any, :out :any},
     :input_types "[:any]",
     :inputs "[:value]",
     :output_types ":any",
     :expandable? true,
     :full_map
     "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :h 6,
    :connection-id nil,
    :view-output? false,
    :queries
    {:name-drag-25
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :ii11]],
      :where [:= :name ":open-fn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":open-fn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :open-fn,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}}},
  :quality
  {:w 200,
   :h 100,
   :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input "hd"},
   :z 0,
   :ports {:out {:out :string}},
   :x 734.1538809317127,
   :y 1194.2060836226851},
  :open-fn-4
  {:y 1275,
   :fn (fn [x] x),
   :w 200,
   :raw-fn (fn [x] x),
   :right-click? true,
   :icon "zmdi-functions",
   :z 0,
   :ports {:in {:value :any}, :out {:out :any}},
   :h 100,
   :x 2350,
   :data
   {:flow-item
    {:description "Write you own Clojure function! Godspeed!",
     :category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:value :any, :out :any},
     :input_types "[:any]",
     :inputs "[:value]",
     :output_types ":any",
     :expandable? true,
     :full_map
     "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :h 6,
    :connection-id nil,
    :view-output? false,
    :queries
    {:name-drag-25
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :ii11]],
      :where [:= :name ":open-fn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":open-fn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :open-fn,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}}},
  :open-fn-12
  {:y 1525,
   :fn (fn [x] x),
   :w 200,
   :raw-fn
   (fn [x] [:v-box
            :children
            [[:img
              {:src (str (clojure.string/replace x "/home/ryanr/rvbbit/frontend/resources/public/" "")),
               :width "600px",
               :style {:border-radius "10px"}}]]]),
   :right-click? true,
   :icon "zmdi-functions",
   :types nil,
   :z 0,
   :ports {:in {:x :any}, :out {:idx0 :keyword, :idx1 :keyword, :idx2 :vector, :* :vector}},
   :inputs nil,
   :h 100,
   :x 3550,
   :data
   {:flow-item
    {:description "Write you own Clojure function! Godspeed!",
     :category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:value :any, :out :any},
     :input_types "[:any]",
     :inputs "[:value]",
     :output_types ":any",
     :expandable? true,
     :full_map
     "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :h 6,
    :connection-id nil,
    :view-output? false,
    :queries
    {:name-drag-25
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :ii11]],
      :where [:= :name ":open-fn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":open-fn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :open-fn,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}}},
  :open-fn-5
  {:y 1525,
   :fn (fn [x] x),
   :w 200,
   :raw-fn (fn [x] x),
   :right-click? true,
   :icon "zmdi-functions",
   :z 0,
   :ports {:in {:value :any}, :out {:out :any}},
   :h 100,
   :x 2275,
   :data
   {:flow-item
    {:description "Write you own Clojure function! Godspeed!",
     :category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:value :any, :out :any},
     :input_types "[:any]",
     :inputs "[:value]",
     :output_types ":any",
     :expandable? true,
     :full_map
     "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :h 6,
    :connection-id nil,
    :view-output? false,
    :queries
    {:name-drag-25
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :ii11]],
      :where [:= :name ":open-fn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":open-fn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :open-fn,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}}},
  :upper-mid
  {:y 2136.9676296657985,
   :fn (fn [x] x),
   :w 200,
   :raw-fn (fn [x] (get x 6)),
   :right-click? true,
   :icon "zmdi-functions",
   :z 0,
   :ports {:in {:value :any}, :out {:out :any}},
   :h 100,
   :x 5306.102387152777,
   :data
   {:flow-item
    {:description "Write you own Clojure function! Godspeed!",
     :category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:value :any, :out :any},
     :input_types "[:any]",
     :inputs "[:value]",
     :output_types ":any",
     :expandable? true,
     :full_map
     "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :h 6,
    :connection-id nil,
    :queries
    {:name-drag-25
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :ii11]],
      :where [:= :name ":open-fn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":open-fn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :open-fn,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}}},
  :http-call-1
  {:w 200,
   :h 100,
   :x 1600,
   :y 1275,
   :z 0,
   :data
   {:flow-item
    {:description "Basic HTTP call primitive",
     :category ":rabbit-base",
     :fn (fn [req-map] (rvbbit-backend.websockets/http-call req-map)),
     :name ":http-call",
     :icon "zmdi-http",
     :defaults
     {:req-map
      {:url "https://owen-wilson-wow-api.onrender.com/wows/random",
       :query-params {:movie "Wedding Crashers", :results 40}}},
     :types {:req-map :map, :out :any},
     :input_types "[:map]",
     :style {:color "#7BB696"},
     :selected-style {:color "#7BB696"},
     :inputs "[:req-map]",
     :output_types ":any",
     :expandable? false,
     :full_map
     "{:description \"Basic HTTP call primitive\", :fn (fn [req-map] (rvbbit-backend.websockets/http-call req-map)), :icon \"zmdi-http\", :defaults {:req-map {:url \"https://owen-wilson-wow-api.onrender.com/wows/random\", :query-params {:movie \"Wedding Crashers\", :results 40}}}, :types {:req-map :map, :out :any}, :style {:color \"#7BB696\"}, :selected-style {:color \"#7BB696\"}, :inputs [:req-map], :expandable? false, :required [:req-map]}",
     :required [:req-map]},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :root [864.1770935058594 199.171875],
    :h 6,
    :connection-id nil,
    :view-output? false,
    :queries
    {:name-drag-27
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :ff241]],
      :where [:= :name ":http-call"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":http-call",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :where,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}},
   :icon "zmdi-http",
   :ports {:in {:req-map :map}, :out {:created :integer, :data :rowset, :* :map}}},
  :open-fn-14
  {:y 1150,
   :fn (fn [x] x),
   :w 200,
   :raw-fn (fn [x] [:box :child (str x) :size "none" :width "500px" :style {:font-size "9px", :overflow "auto"}] nil),
   :right-click? true,
   :icon "zmdi-functions",
   :z 0,
   :ports {:in {:value :any}, :out {:out :any}},
   :h 100,
   :x 3725,
   :data
   {:flow-item
    {:description "Write you own Clojure function! Godspeed!",
     :category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:value :any, :out :any},
     :input_types "[:any]",
     :inputs "[:value]",
     :output_types ":any",
     :expandable? true,
     :full_map
     "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :h 6,
    :connection-id nil,
    :queries
    {:name-drag-25
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :ii11]],
      :where [:= :name ":open-fn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":open-fn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :open-fn,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}}},
  :gradient2
  {:y 2042.9487506763357,
   :fn (fn [x] x),
   :w 200,
   :raw-fn (fn [x y] (vec (rvbbit-backend.util/generate-gradient x y 8))),
   :right-click? true,
   :icon "zmdi-functions",
   :z 0,
   :ports
   {:in {:value :any, :value-1 :any},
    :out
    {:idx7 :string,
     :idx5 :string,
     :* :vector,
     :idx2 :string,
     :idx4 :string,
     :idx1 :string,
     :idx6 :string,
     :idx3 :string,
     :idx0 :string}},
   :h 100,
   :x 5749.094478297879,
   :data
   {:flow-item
    {:description "Write you own Clojure function! Godspeed!",
     :category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:value :any, :out :any},
     :input_types "[:any]",
     :inputs "[:value]",
     :output_types ":any",
     :expandable? true,
     :full_map
     "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :h 6,
    :connection-id nil,
    :queries
    {:name-drag-25
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :ii11]],
      :where [:= :name ":open-fn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":open-fn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :open-fn,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}}},
  :mid-high
  {:y 2301.8376654547615,
   :fn (fn [x] x),
   :w 200,
   :raw-fn (fn [x] (get x 4)),
   :right-click? true,
   :icon "zmdi-functions",
   :z 0,
   :ports {:in {:value :any}, :out {:out :any}},
   :h 100,
   :x 5740.51254354941,
   :data
   {:flow-item
    {:description "Write you own Clojure function! Godspeed!",
     :category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:value :any, :out :any},
     :input_types "[:any]",
     :inputs "[:value]",
     :output_types ":any",
     :expandable? true,
     :full_map
     "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :h 6,
    :connection-id nil,
    :queries
    {:name-drag-25
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :ii11]],
      :where [:= :name ":open-fn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":open-fn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :open-fn,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}}},
  :open-input-2
  {:w 200,
   :h 100,
   :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input "natural"},
   :z 0,
   :ports {:out {:out :string}},
   :x 100,
   :y 1450},
  :headers-map
  {:w 200,
   :h 100,
   :data
   {:drag-meta {:type :open-block},
    :flow-item {:expandable? true},
    :user-input
    {"Authorization" "Bearer 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", "Content-Type" "application/json"}},
   :z 0,
   :ports {:out {"Authorization" :string, "Content-Type" :string, :* :map}},
   :x 786.0028392650462,
   :y 1522.4280164930553},
  :url-str
  {:w 200,
   :h 100,
   :data
   {:drag-meta {:type :open-block},
    :flow-item {:expandable? true},
    :user-input "https://api.openai.com/v1/images/generations",
    :view-output? true},
   :z 0,
   :ports {:out {:out :string}},
   :x 768.1744249131942,
   :y 1362.70009765625},
  :open-fn-10
  {:y 2075,
   :fn (fn [x] x),
   :w 200,
   :raw-fn (fn [x] x),
   :right-click? true,
   :icon "zmdi-functions",
   :z 0,
   :ports {:in {:value :any}, :out {:dominantColor :string, :colorPalette :vector, :* :map}},
   :h 100,
   :x 3450,
   :data
   {:flow-item
    {:description "Write you own Clojure function! Godspeed!",
     :category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:value :any, :out :any},
     :input_types "[:any]",
     :inputs "[:value]",
     :output_types ":any",
     :expandable? true,
     :full_map
     "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :h 6,
    :connection-id nil,
    :view-output? false,
    :queries
    {:name-drag-25
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :ii11]],
      :where [:= :name ":open-fn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":open-fn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :open-fn,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}}}},
 :opts {:retries 19, :retry-on-error? true, :close-on-done? true, :debug? false},
 :zoom [-719.01 -77.22 0.425],
 :flow-id "dalle3-create-imageff",
 :flowmaps-connections
 [[:in-prompt :open-input/value-0]
  [:quality :open-input/value-1]
  [:headers-map/* :open-input/value-2]
  [:url-str :open-input/value-3]
  [:open-input/* :open-fn-1/value]
  [:open-fn-1/* :http-call-1/req-map]
  [:http-call-1/data :open-fn-2/value]
  [:open-fn-2/idx0 :open-fn-3/value]
  [:open-fn-3/revised_prompt :open-fn-4/value]
  [:open-fn-3/b64_json :open-fn-5/value]
  [:open-fn-5 :open-fn-6/value]
  [:open-fn-5 :open-fn-7/value]
  [:open-fn-6 :open-fn-7/value-1]
  [:open-fn-7 :shell-command-1/command]
  [:open-fn-6 :done]
  [:open-fn-6 :open-fn-8/value]
  [:open-input-1 :open-fn-9/value]
  [:open-input-2 :open-fn-9/value-1]
  [:open-fn-9 :open-input/value-4]
  [:open-fn-5 :node-color-thief-js/image-path]
  [:node-color-thief-js/* :open-fn-10/value]
  [:node-color-thief-js/colorPalette :open-fn-11/value]
  [:node-color-thief-js/dominantColor :dom-color1/value]
  [:open-fn-11 :open-fn-13/value]
  [:open-fn-13 :darkest1/value]
  [:open-fn-13 :lightest1/value]
  [:open-fn-13 :ssecond-darkest/value]
  [:open-fn-13 :second-lightest/value]
  [:open-fn-13 :mid-high/value]
  [:open-fn-13 :upper-mid/value]
  [:ssecond-darkest :gradient1/value]
  [:upper-mid :gradient1/value-1]
  [:lightest1 :gradient2/value]
  [:ssecond-darkest :gradient2/value-1]
  [:gradient1 :make-data-colors/value]
  [:gradient2 :make-data-colors/value-1]
  [:open-fn-12 :alert!-1/content]
  [:open-input-3/width :alert!-1/w]
  [:open-input-3/height :alert!-1/h]
  [:open-input-3/duration :alert!-1/duration]
  [:open-fn-4 :open-fn-14/value]
  [:open-fn-14 :alert!-2/content]
  [:open-input-3/width :alert!-2/w]
  [:open-input-3/height :alert!-2/h]
  [:open-input-3/duration :alert!-2/duration]
  [:shell-command-1/* :open-fn-8/value-1]]}