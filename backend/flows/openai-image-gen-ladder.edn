{:flowmaps
 {:oai-api-call
  {:y 1325,
   :description
   ["Making the OpenAI API call with our prepared request map with all our details, headers, settings, etc. Here we are calling the gen-image endpoint for the DALLE3 model. This returns a full JSON map with includes the revised prompt as well at the base64 image string of the generated WEBP file. "
    ""
    "https://platform.openai.com/docs/guides/images/image-generation"],
   :w 175,
   :right-click? true,
   :icon "zmdi-http",
   :z 0,
   :ports {:in {:req-map :map}, :out {:created :integer, :data :rowset, :* :map}},
   :h 85,
   :x 1875,
   :data
   {:flow-item
    {:category ":rabbit-base",
     :name ":make-http-call",
     :type :make-http-call,
     :icon "zmdi-http",
     :defaults
     {:req-map
      {:url "https://owen-wilson-wow-api.onrender.com/wows/random",
       :query-params {:movie "Wedding Crashers", :results 40}}},
     :types {:req-map :map, :out :any},
     :inputs [:req-map],
     :expandable? true,
     :required [:req-map]},
    :drag-meta {:type :make-http-call}}},
  :prompt-5
  {:w 125,
   :h 60,
   :z 0,
   :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input ""},
   :right-click? true,
   :ports {:in {}, :out {:out :string}},
   :x 2150,
   :y 650},
  :node-js-color-thief-script
  {:y 1775,
   :description
   ["Passing the webp image path to a node script sub-flow in order to extract the main color and color palette, we will use these hex values in a subsequent \"view\" step. Here we can create an asset to use on a data board."],
   :sub-flow
   {:flow-id "node-color-thief-js",
    :file-path "./flows/node-color-thief-js.edn",
    :map
    {:image-path
     {:w 200,
      :h 100,
      :data
      {:drag-meta {:type :open-block},
       :flow-item {:expandable? true},
       :user-input " /home/ryanr/rvbbit/frontend/resources/public/images/shannon45.png"},
      :z 0,
      :ports {:out {:out :string}},
      :x 948.9116738809121,
      :y 1074.148015202703},
     :shell-command-1
     {:w 200,
      :h 100,
      :x 1758.4411167689732,
      :y 1117.7292503720237,
      :z 0,
      :data
      {:flow-item
       {:description "Execute shell command. WARNING: only use if you know what you're doing / have controlled inputs",
        :category ":rabbit-base",
        :fn (fn [command] (rvbbit-backend.websockets/run-shell-command command)),
        :name ":shell-command",
        :icon "zmdi-washing-machine",
        :defaults {:command "ls -la"},
        :types {:command :string, :out :any},
        :input_types "[:string]",
        :style {:color "#ffdd3c"},
        :selected-style {:color "#ffdd3c"},
        :inputs "[:command]",
        :output_types ":any",
        :full_map
        "{:description \"Execute shell command. WARNING: only use if you know what you're doing / have controlled inputs\", :fn (fn [command] (rvbbit-backend.websockets/run-shell-command command)), :icon \"zmdi-washing-machine\", :defaults {:command \"ls -la\"}, :types {:command :string, :out :any}, :style {:color \"#ffdd3c\"}, :selected-style {:color \"#ffdd3c\"}, :inputs [:command], :required [:command]}",
        :required [:command]},
       :name "drag-from-",
       :w 5,
       :source-panel :flow-fn-list*,
       :root [539.1770935058594 176.171875],
       :h 6,
       :connection-id nil,
       :queries
       {:name-drag-42
        {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
         :from [[:query/flow-fn-sys :cc59]],
         :where [:= :name ":shell-command"]}},
       :drag-meta
       {:data-type "string",
        :source-query :flow-fn-sys,
        :param-full ":shell-command",
        :param-field :name,
        :source-panel-key :flow-fn-list*,
        :type :where,
        :param-table :flow-fn-sys,
        :source-table :query/flow-fn-sys,
        :connection-id nil,
        :target :name,
        :row-num 6}},
      :icon "zmdi-washing-machine",
      :ports
      {:in {:command :string}, :out {:output :vector, :exception :vector, :seconds :vector, :command :string, :* :map}}},
     :clojure-string-join-1
     {:w 200,
      :h 100,
      :x 1348.4940418061756,
      :y 1136.4640299479165,
      :z 0,
      :data
      {:flow-item
       {:description "Clojure.string's join function.",
        :category ":clojure-base",
        :fn (fn [delimiter & args] (clojure.string/join delimiter args)),
        :name ":clojure-string-join",
        :icon "zmdi-group",
        :defaults {:delimiter " "},
        :types {:delimiter :string, :out :string},
        :input_types "[:string]",
        :inputs "[:delimiter]",
        :output_types ":string",
        :expandable? true,
        :full_map
        "{:description \"Clojure.string's join function.\", :fn (fn [delimiter & args] (clojure.string/join delimiter args)), :inputs [:delimiter], :required [:delimiter], :defaults {:delimiter \" \"}, :expandable? true, :icon \"zmdi-group\", :types {:delimiter :string, :out :string}}",
        :required [:delimiter]},
       :name "drag-from-",
       :w 5,
       :source-panel :flow-fn-list*,
       :root [540.1770935058594 279.171875],
       :h 6,
       :connection-id nil,
       :queries
       {:name-drag-12
        {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
         :from [[:query/flow-fn-sys :ww526]],
         :where [:= :name ":clojure-string-join"]}},
       :drag-meta
       {:data-type "string",
        :source-query :flow-fn-sys,
        :param-full ":clojure-string-join",
        :param-field :name,
        :source-panel-key :flow-fn-list*,
        :type :where,
        :param-table :flow-fn-sys,
        :source-table :query/flow-fn-sys,
        :connection-id nil,
        :target :name,
        :row-num 15}},
      :icon "zmdi-group",
      :ports {:in {:delimiter :string, :value-1 :any, :value-2 :any}, :out {:out :string}}},
     :shell-command-in
     {:w 200,
      :h 100,
      :data
      {:drag-meta {:type :open-block},
       :flow-item {:expandable? true},
       :user-input "cd /home/ryanr/color-thief-project ; node ./colorThief2.js"},
      :z 0,
      :ports {:out {:out :string}},
      :x 960.0851863779922,
      :y 1224.4579849567817},
     :join-output-as-string
     {:y 1158.848120777027,
      :fn (fn [x] x),
      :w 200,
      :raw-fn (fn [x] (clojure.string/join " " x)),
      :right-click? true,
      :icon "zmdi-functions",
      :z 0,
      :ports {:in {:value :any}, :out {:out :any}},
      :h 100,
      :x 2212.3248878272807,
      :data
      {:flow-item
       {:description "Write you own Clojure function! Godspeed!",
        :category ":rabbit-base",
        :fn (fn [x] x),
        :name ":open-fn",
        :raw-fn (fn [x] x),
        :type :open-fn,
        :icon "zmdi-functions",
        :types {:value :any, :out :any},
        :input_types "[:any]",
        :inputs "[:value]",
        :output_types ":any",
        :expandable? true,
        :full_map
        "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
       :name "drag-from-",
       :w 5,
       :source-panel :flow-fn-list*,
       :h 6,
       :connection-id nil,
       :queries
       {:name-drag-25
        {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
         :from [[:query/flow-fn-sys :ii11]],
         :where [:= :name ":open-fn"]}},
       :drag-meta
       {:data-type "string",
        :source-query :flow-fn-sys,
        :param-full ":open-fn",
        :param-field :name,
        :source-panel-key :flow-fn-list*,
        :type :open-fn,
        :param-table :flow-fn-sys,
        :source-table :query/flow-fn-sys,
        :connection-id nil,
        :target :name,
        :row-num 5}}},
     :json-to-edn
     {:w 200,
      :h 100,
      :x 2685.7088668823244,
      :y 1151.33984375,
      :z 0,
      :data
      {:flow-item
       {:description "Convert a JSON string to Clojure EDN",
        :category ":rabbit-base",
        :fn (fn [json-string] (rvbbit-backend.util/json-to-edn json-string)),
        :name ":json-to-edn",
        :icon "zmdi-file-text",
        :types {:json-string :string, :out :any},
        :input_types "[:string]",
        :inputs "[:json-string]",
        :output_types ":any",
        :full_map
        "{:description \"Convert a JSON string to Clojure EDN\", :fn (fn [json-string] (rvbbit-backend.util/json-to-edn json-string)), :inputs [:json-string], :icon \"zmdi-file-text\", :types {:json-string :string, :out :any}}"},
       :name "drag-from-",
       :w 5,
       :source-panel :flow-fn-list*,
       :root [1297.1770935058594 207.171875],
       :h 6,
       :connection-id nil,
       :queries
       {:name-drag-41
        {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
         :from [[:query/flow-fn-sys :uu284]],
         :where [:= :name ":json-to-edn"]}},
       :drag-meta
       {:data-type "string",
        :source-query :flow-fn-sys,
        :param-full ":json-to-edn",
        :param-field :name,
        :source-panel-key :flow-fn-list*,
        :type :where,
        :param-table :flow-fn-sys,
        :source-table :query/flow-fn-sys,
        :connection-id nil,
        :target :name,
        :row-num 7}},
      :icon "zmdi-file-text",
      :ports {:in {:json-string :string}, :out {:dominantColor :string, :colorPalette :vector, :* :map}}}},
    :connections
    [[:shell-command-in :clojure-string-join-1/value-1]
     [:image-path :clojure-string-join-1/value-2]
     [:clojure-string-join-1 :shell-command-1/command]
     [:shell-command-1/output :join-output-as-string/value]
     [:join-output-as-string :json-to-edn/json-string]
     [:json-to-edn :done]]},
   :flow-id "node-color-thief-js",
   :w 225,
   :icon "zmdi-puzzle-piece",
   :z 0,
   :ports
   {:in {:image-path :string, :shell-command-in :string}, :out {:dominantColor :string, :colorPalette :vector, :* :map}},
   :h 60,
   :file-path "./flows/node-color-thief-js.edn",
   :x 2050,
   :data
   {:flow-item nil,
    :name "drag-from-",
    :w 5,
    :source-panel :flow-list*,
    :root [678.71875 344.6979217529297],
    :h 6,
    :connection-id nil,
    :view-output? false,
    :queries
    {:flow-id-drag-5
     {:select [:flow_id :file_path :last_modified],
      :from [[:query/flows-sys :cc208]],
      :where [:= :flow_id "node-color-thief-js"]}},
    :drag-meta
    {:data-type "string",
     :done-block :json-to-edn,
     :source-query :flows-sys,
     :param-full "node-color-thief-js",
     :param-field :flow_id,
     :source-panel-key :flow-list*,
     :type :sub-flow,
     :param-table :flows-sys,
     :source-table :query/flows-sys,
     :connection-id nil,
     :target :flow_id,
     :row-num 4}}},
  :dominant-color
  {:y 2100,
   :fn (fn [x] x),
   :w 125,
   :raw-fn (fn [x] x),
   :icon "zmdi-functions",
   :z 0,
   :ports {:in {:x :any}, :out {:out :string}},
   :h 85,
   :x 2200,
   :data
   {:flow-item
    {:category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:x :any, :out :any},
     :expandable? true,
     :drag-meta {:type :open-fn}}}},
  :shell-command-2
  {:y 1050,
   :w 225,
   :right-click? true,
   :icon "zmdi-washing-machine",
   :z 0,
   :ports {:in {:command :string}, :out {:out :any}},
   :h 100,
   :x 2325,
   :data
   {:flow-item
    {:category ":rabbit-base",
     :name ":shell-command",
     :type :shell-command,
     :icon "zmdi-washing-machine",
     :defaults {:command "ls -la"},
     :types {:command :string, :out :any},
     :style {:color "#ffdd3c"},
     :selected-style {:color "#ffdd3c"},
     :inputs [:command],
     :expandable? true,
     :required [:command]},
    :drag-meta {:type :shell-command}}},
  :shell-command-1
  {:y 2600,
   :w 350,
   :right-click? true,
   :icon "zmdi-washing-machine",
   :z 0,
   :ports {:in {:command :string}, :out {:out :any}},
   :h 110,
   :x 2475,
   :data
   {:flow-item
    {:category ":rabbit-base",
     :name ":shell-command",
     :type :shell-command,
     :icon "zmdi-washing-machine",
     :defaults {:command "ls -la"},
     :types {:command :string, :out :any},
     :style {:color "#ffdd3c"},
     :selected-style {:color "#ffdd3c"},
     :inputs [:command],
     :expandable? true,
     :required [:command]},
    :drag-meta {:type :shell-command}}},
  :quality-param
  {:y 1000,
   :description
   ["The quality of the image that will be generated. hd creates images with finer details and greater consistency across the image. This param is only supported for dall-e-3."],
   :w 125,
   :right-click? true,
   :z 0,
   :ports {:in {}, :out {:out :string}},
   :h 85,
   :x 2075,
   :data
   {:drag-meta {:type :open-block},
    :flow-item
    {:expandable? true,
     :meta {:* {:scrubber {:message "OpenAI image gen quality selector - DALLE3", :values ["hd" "standard"]}}}},
    :user-input "hd"}},
  :open-fn-1
  {:y 2100,
   :fn (fn [x] x),
   :w 125,
   :raw-fn (fn [_] (str "/tmp/rand-exif-" (rand-int 123454) ".txt")),
   :right-click? true,
   :icon "zmdi-functions",
   :types nil,
   :z 0,
   :ports {:in {:_ :any}, :out {:out :string}},
   :inputs nil,
   :h 110,
   :x 2575,
   :data
   {:flow-item
    {:category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:x :any, :out :any},
     :expandable? true,
     :drag-meta {:type :open-fn}}}},
  :execute-shell-command
  {:y 1950,
   :description
   ["Run it. "
    ""
    "Notice we are flowing a port out of here into the final step, even though it does nothing. This makes sure that this step will finish BEFORE that one executes. A block cannot run until all it's inputs have produced a value. This non-data flow is more of a signal."],
   :w 225,
   :right-click? true,
   :icon "zmdi-washing-machine",
   :z 0,
   :ports {:in {:command :string}, :out {:output :list, :exception :list, :seconds :list, :command :string, :* :map}},
   :h 60,
   :x 1925,
   :data
   {:flow-item
    {:category ":rabbit-base",
     :name ":shell-command",
     :type :shell-command,
     :icon "zmdi-washing-machine",
     :defaults {:command "ls -la"},
     :types {:command :string, :out :any},
     :inputs [:command],
     :expandable? true,
     :required [:command]},
    :drag-meta {:type :shell-command}}},
  :open-fn-2
  {:y 950,
   :fn (fn [x] x),
   :w 175,
   :raw-fn (fn [x] "cd .. ; pwd"),
   :right-click? true,
   :icon "zmdi-functions",
   :types nil,
   :z 0,
   :ports {:in {:x :any}, :out {:out :any}},
   :inputs nil,
   :h 75,
   :x 2325,
   :data
   {:flow-item
    {:category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:x :any, :out :any},
     :inputs [:x],
     :expandable? true,
     :drag-meta {:type :open-fn}}}},
  :pop-color
  {:y 2075,
   :fn (fn [x] (get-in x [:colorPalette 0])),
   :w 150,
   :raw-fn (fn [x] (get-in x [:colorPalette 0])),
   :icon "zmdi-functions",
   :z 0,
   :ports {:in {:x :any}, :out {:out :string}},
   :h 85,
   :x 2025,
   :data
   {:flow-item
    {:category ":rabbit-base",
     :fn (fn [x] (get-in x [:colorPalette 0])),
     :name ":open-fn",
     :raw-fn (fn [x] (get-in x [:colorPalette 0])),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:x :any, :out :any},
     :expandable? true,
     :drag-meta {:type :open-fn}}}},
  :prompt-2
  {:w 125,
   :h 60,
   :z 0,
   :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input ""},
   :right-click? true,
   :ports {:in {}, :out {:out :string}},
   :x 1925,
   :y 575},
  :color-palette
  {:y 2025,
   :fn (fn [x] x),
   :w 100,
   :raw-fn (fn [x] x),
   :icon "zmdi-functions",
   :z 0,
   :ports {:in {:x :any}, :out {:dominantColor :string, :colorPalette :vector, :* :map}},
   :h 185,
   :x 1875,
   :data
   {:flow-item
    {:category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:x :any, :out :any},
     :expandable? true,
     :drag-meta {:type :open-fn}}}},
  :stringify-exif-map
  {:y 2100,
   :fn (fn [x] x),
   :w 200,
   :raw-fn (fn [x bang img-path] (pr-str x)),
   :right-click? true,
   :icon "zmdi-functions",
   :types nil,
   :z 0,
   :ports {:in {:x :any, :bang :any, :img-path :any}, :out {:out :string}},
   :inputs nil,
   :h 110,
   :x 2350,
   :data
   {:flow-item
    {:category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:x :any, :out :any},
     :expandable? true,
     :drag-meta {:type :open-fn}}}},
  :size-param
  {:y 950,
   :description
   ["The size of the generated images. Must be one of 256x256, 512x512, or 1024x1024 for dall-e-2. Must be one of 1024x1024, 1792x1024, or 1024x1792 for dall-e-3 models."],
   :w 175,
   :right-click? true,
   :z 0,
   :ports {:in {}, :out {:out :string}},
   :h 110,
   :x 1650,
   :data
   {:drag-meta {:type :open-block},
    :flow-item
    {:expandable? true,
     :meta
     {:* {:scrubber {:message "OpenAI image gen size selector - DALLE3", :values ["1024x1024" "1792x1024" "1024x1792"]}}}},
    :user-input "1792x1024"}},
  :prompt-jukebox
  {:y 900,
   :fn (fn [x] x),
   :w 150,
   :raw-fn (fn [& x] (rand-nth (remove (fn [xx] (empty? (clojure.string/trim xx))) x))),
   :right-click? true,
   :icon "zmdi-functions",
   :types nil,
   :z 0,
   :ports {:in {:x+ :any}, :out {:out :string}},
   :inputs nil,
   :h 85,
   :x 1850,
   :data
   {:flow-item
    {:category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:x :any, :out :any},
     :expandable? true,
     :drag-meta {:type :open-fn}}}},
  :write-file-1
  {:y 2275,
   :w 125,
   :right-click? true,
   :icon "zmdi-file-text",
   :z 0,
   :ports {:in {:full-path :string, :file-data :string}, :out {:out :string}},
   :h 85,
   :x 2475,
   :data
   {:flow-item
    {:category ":rabbit-base",
     :name ":write-file",
     :type :write-file,
     :icon "zmdi-file-text",
     :defaults nil,
     :types {:full-path :string, :file-data :string, :out :string},
     :style nil,
     :selected-style nil,
     :inputs [:full-path :file-data],
     :expandable? true,
     :required nil},
    :drag-meta {:type :write-file}}},
  :save-base64-to-webp-file
  {:y 1675,
   :description
   ["Decoding and saving as a binary file to the local file system. Here to a sub-dir of my Ubuntu home directory."],
   :w 250,
   :right-click? true,
   :icon "zmdi-broken-image",
   :z 0,
   :ports {:in {:b64-data :any, :file-path :string}, :out {:out :string}},
   :h 60,
   :x 2000,
   :data
   {:flow-item
    {:category ":rabbit-base",
     :name ":save-base64-to-webp",
     :type :save-base64-to-webp,
     :icon "zmdi-broken-image",
     :defaults nil,
     :types {:b64-data :string, :file-path :string, :out :any},
     :style nil,
     :selected-style nil,
     :inputs [:b64-data :file-path],
     :expandable? true,
     :required [:b64-data :file-path]},
    :drag-meta {:type :save-base64-to-webp}}},
  :prompt-4
  {:w 125,
   :h 60,
   :z 0,
   :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input ""},
   :right-click? true,
   :ports {:in {}, :out {:out :string}},
   :x 2125,
   :y 575},
  :request-body-map
  {:w 175,
   :h 60,
   :z 0,
   :data
   {:drag-meta {:type :open-block},
    :flow-item {:expandable? true},
    :user-input
    {:prompt :prompty*,
     :n 1,
     :size :size*,
     :style :style*,
     :response_format "b64_json",
     :model "dall-e-3",
     :quality :quality*}},
   :right-click? true,
   :ports
   {:in {:prompty* :any, :size* :any, :style* :any, :quality* :any},
    :out
    {:prompt :string,
     :n :integer,
     :size :string,
     :style :string,
     :response_format :string,
     :model :string,
     :quality :string,
     :* :map}},
   :x 1850,
   :y 1125},
  :base-web-directory
  {:y 1675,
   :w 150,
   :right-click? true,
   :types nil,
   :z 0,
   :ports {:in {}, :out {:out {:out :string}}},
   :inputs nil,
   :h 60,
   :x 1775,
   :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input ".."}},
  :prompt
  {:y 575,
   :w 300,
   :right-click? true,
   :types nil,
   :z 0,
   :ports {:in {}, :out {:out {:out :string}}},
   :inputs nil,
   :h 160,
   :x 1600,
   :data
   {:drag-meta {:type :open-block},
    :flow-item {:expandable? true},
    :user-input
    "A highly-detailed, hyperrealistic 16:9 digitally-rendered illustration of a pre-dawn winter scene in a traditional New England setting, filled with a mix of rustic charm and cyberpunk aesthetics. The town is bathed in a fresh blanket of snow under a heavy snowstorm, capturing a slightly gritty ambience, with buildings glowing softly in hues of pink and neon light blue. On the left of the frame stands a vibrant Irish woman in her early 30s. Her long hair, slightly damp from the intense snow, runs down her neck and shoulders. Intricate, Celtic-inspired tattoos depicting rabbits and wilderness adorn her neck, collarbone, and shoulders. As the sun cautiously peeps over the horizon, its light reflects off the scene, enhancing the mood set by the serene yet enigmatic pre-dawn lighting. On the outskirts, many rabbits eye the scene."}},
  :create-png-path
  {:y 1775,
   :description
   ["Making a new path for the PNG version we will generate in order to render image in a <img> tag without the base64 string or webp image."],
   :fn (fn [x] x),
   :w 125,
   :raw-fn
   (fn [x base-dir base-web-dir] (clojure.string/replace (clojure.string/replace x ".webp" ".png") base-dir base-web-dir)),
   :right-click? true,
   :icon "zmdi-functions",
   :z 0,
   :ports {:in {:x :any, :base-dir :any, :base-web-dir :any}, :out {:out :string}},
   :h 60,
   :x 1900,
   :data
   {:flow-item
    {:category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:x :any, :out :any},
     :expandable? true,
     :drag-meta {:type :open-fn}}}},
  :create-convert-command-line
  {:y 1850,
   :description ["Our 'convert' finished command line. Note, 'convert' is already in my PATH."],
   :fn (fn [x] x),
   :w 350,
   :raw-fn (fn [x y] (str "cp " y " " x)),
   :right-click? true,
   :icon "zmdi-functions",
   :types nil,
   :z 0,
   :ports {:in {:x :any, :y :any}, :out {:out :string}},
   :inputs nil,
   :h 85,
   :x 1925,
   :data
   {:flow-item
    {:category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:x :any, :out :any},
     :expandable? true,
     :drag-meta {:type :open-fn}}}},
  :hiccup-image-box-w-png
  {:y 2250,
   :description ["Take all the strings from earlier and compose a singular view element with them."],
   :fn (fn [x] [:box :child (str x)]),
   :w 600,
   :raw-fn
   (fn [x bg-color color _]
     (let [x (clojure.string/replace (str x) ".." "assets/openai-images")]
       [:v-box
        :padding
        "10px"
        :gap
        "8px"
        :width
        :width-px
        :style
        {:background-color (str bg-color), :border-radius "20px", :font-size "12px", :font-weight 700, :color (str color)}
        :children
        [[:box :child (str x)] [:box :size "auto" :child [:img {:src (str x), :style {:border-radius "30px"}}]]]])),
   :right-click? true,
   :icon "zmdi-functions",
   :types nil,
   :z 0,
   :ports
   {:in {:x :any, :bg-color :any, :color :any, :_ :any},
    :out
    {:idx7 :keyword,
     :idx5 :keyword,
     :* :vector,
     :idx2 :string,
     :idx4 :string,
     :idx1 :keyword,
     :idx6 :keyword,
     :idx3 :keyword,
     :idx10 :vector,
     :idx8 :map,
     :idx9 :keyword,
     :idx0 :keyword}},
   :inputs nil,
   :h 385,
   :x 1800,
   :view (fn [x] x),
   :data
   {:flow-item
    {:category ":rabbit-base",
     :fn (fn [x] [:box :child (str x)]),
     :name ":open-fn",
     :raw-fn (fn [x] [:box :child (str x)]),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:x :any, :out :any},
     :expandable? true,
     :drag-meta {:type :open-fn}}}},
  :generate-file-path
  {:y 1325,
   :fn (fn [x] x),
   :w 425,
   :raw-fn (fn [base-dir] (str base-dir "/b64-image3-" (rand-int 99999) "-" (rand-int 99999) ".png")),
   :right-click? true,
   :icon "zmdi-functions",
   :types nil,
   :z 0,
   :ports {:in {:base-dir :any}, :out {:out :string}},
   :inputs nil,
   :h 85,
   :x 2125,
   :data
   {:flow-item
    {:category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:x :any, :out :any},
     :expandable? true,
     :drag-meta {:type :open-fn}}}},
  :open-fn-4
  {:y 1125,
   :fn (fn [x] x),
   :w 150,
   :raw-fn (fn [x] (str "Bearer " :settings/openai-api-key)),
   :right-click? true,
   :icon "zmdi-functions",
   :types nil,
   :z 0,
   :ports {:in {:x :any}, :out {:out :any}},
   :inputs nil,
   :h 60,
   :x 1675,
   :data
   {:flow-item
    {:category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:x :any, :out :any},
     :inputs [:x],
     :expandable? true,
     :drag-meta {:type :open-fn}}}},
  :relative-url-path-for-png-version
  {:y 2825,
   :fn (fn [x] (get-in x [10 0 2])),
   :w 275,
   :raw-fn (fn [x bang] (get-in x [10 0 2])),
   :icon "zmdi-functions",
   :types nil,
   :z 0,
   :ports {:in {:x :any, :bang :any}, :out {:out :string}},
   :inputs nil,
   :h 85,
   :x 2150,
   :data
   {:flow-item
    {:category ":rabbit-base",
     :fn (fn [x] (get-in x [10 0 2])),
     :name ":open-fn",
     :raw-fn (fn [x] (get-in x [10 0 2])),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:x :any, :out :any},
     :expandable? true,
     :drag-meta {:type :open-fn}}}},
  :exif-map
  {:y 1800,
   :fn (fn [x] x),
   :w 200,
   :raw-fn (fn [prompt revised] {:prompt-asked prompt, :revised-prompt revised}),
   :right-click? true,
   :icon "zmdi-functions",
   :types nil,
   :z 0,
   :ports {:in {:prompt :any, :revised :any}, :out {:out :any}},
   :inputs nil,
   :h 110,
   :x 2350,
   :data
   {:flow-item
    {:category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:x :any, :out :any},
     :expandable? true,
     :drag-meta {:type :open-fn}}}},
  :prompt-3
  {:w 125,
   :h 60,
   :z 0,
   :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input ""},
   :right-click? true,
   :ports {:in {}, :out {:out :string}},
   :x 1950,
   :y 650},
  :http-req-map
  {:y 1225,
   :description ["Request map for the HTTP call. Headers, Method, URL, and the call body map."],
   :w 175,
   :right-click? true,
   :types nil,
   :z 0,
   :ports
   {:in {:apikey* :any, :req-body* :any},
    :out {:out {:headers :map, :method :keyword, :url :string, :body :keyword, :* :map}}},
   :inputs nil,
   :h 60,
   :x 1850,
   :data
   {:drag-meta {:type :open-block},
    :flow-item {:expandable? true, :meta {}},
    :user-input
    {:headers {"Authorization" :apikey*, "Content-Type" "application/json"},
     :method :post,
     :url "https://api.openai.com/v1/images/generations",
     :body :req-body*}}},
  :abs-file-base-path
  {:y 1175,
   :fn (fn [x] (get-in x [:output 0])),
   :w 250,
   :raw-fn (fn [x] (str (get-in x [:output 0]) "/assets/openai-images")),
   :icon "zmdi-functions",
   :types nil,
   :z 0,
   :ports {:in {:x :any}, :out {:out :any}},
   :inputs nil,
   :h 100,
   :x 2300,
   :data
   {:flow-item
    {:category ":rabbit-base",
     :fn (fn [x] (get-in x [:output 0])),
     :name ":open-fn",
     :raw-fn (fn [x] (get-in x [:output 0])),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:x :any, :out :any},
     :inputs [:x],
     :expandable? true,
     :drag-meta {:type :open-fn}}}},
  :write-exif-to-image-command
  {:y 2475,
   :fn (fn [x] x),
   :w 625,
   :raw-fn (fn [x img-path] (str "exiftool -overwrite_original -Comment=\"$(cat " x ")\" " img-path)),
   :right-click? true,
   :icon "zmdi-functions",
   :types nil,
   :z 0,
   :ports {:in {:x :any, :img-path :any}, :out {:out :string}},
   :inputs nil,
   :h 85,
   :x 2475,
   :data
   {:flow-item
    {:category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:x :any, :out :any},
     :expandable? true,
     :drag-meta {:type :open-fn}}}},
  :just-the-image
  {:y 1450,
   :description ["Using a GET-IN to extract just the base64 image string from the JSON return map."],
   :fn (fn [x] (get-in x [:data 0 :b64_json])),
   :w 275,
   :raw-fn (fn [x] (get-in x [:data 0 :b64_json])),
   :icon "zmdi-functions",
   :z 0,
   :ports {:in {:x :any}, :out {:out :string}},
   :h 200,
   :x 1775,
   :data
   {:flow-item
    {:category ":rabbit-base",
     :fn (fn [x] (get-in x [:data 0 :b64_json])),
     :name ":open-fn",
     :raw-fn (fn [x] (get-in x [:data 0 :b64_json])),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:x :any, :out :any},
     :expandable? true,
     :drag-meta {:type :open-fn}}}},
  :write-file-1_file-path
  {:y 2375,
   :fn (fn [x] (get-in x [:file-path])),
   :w 125,
   :raw-fn (fn [x] (get-in x [:file-path])),
   :icon "zmdi-functions",
   :z 0,
   :ports {:in {:x :any}, :out {:out :any}},
   :h 85,
   :x 2475,
   :data
   {:flow-item
    {:category ":rabbit-base",
     :fn (fn [x] (get-in x [:file-path])),
     :name ":open-fn",
     :raw-fn (fn [x] (get-in x [:file-path])),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:x :any, :out :any},
     :expandable? true,
     :drag-meta {:type :open-fn}}}},
  :output-revised-prompt
  {:y 1475,
   :description
   ["OpenAI runs our prompt through an additional model to generate a more flowery and fleshed out description to try and generate a more interesting image. "
    ""
    "(also it censors and removes things it does not like, feels like an early gatekeep step since raw images are much harder to automatically moderate)..."],
   :fn (fn [x] (get-in x [:data 0 :revised_prompt])),
   :w 350,
   :raw-fn (fn [x] (get-in x [:data 0 :revised_prompt])),
   :icon "zmdi-functions",
   :z 0,
   :ports {:in {:x :any}, :out {:out :string}},
   :h 160,
   :x 2250,
   :data
   {:flow-item
    {:category ":rabbit-base",
     :fn (fn [x] (get-in x [:data 0 :revised_prompt])),
     :name ":open-fn",
     :raw-fn (fn [x] (get-in x [:data 0 :revised_prompt])),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:x :any, :out :any},
     :expandable? true,
     :drag-meta {:type :open-fn}}}},
  :style-param
  {:y 1000,
   :description
   ["The style of the generated images. Must be one of vivid or natural. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for dall-e-3."],
   :w 125,
   :right-click? true,
   :z 0,
   :ports {:in {}, :out {:out :string}},
   :h 85,
   :x 1925,
   :data
   {:drag-meta {:type :open-block},
    :flow-item
    {:expandable? true,
     :meta {:* {:scrubber {:message "OpenAI image gen style selector - DALLE3", :values ["vivid" "natural"]}}}},
    :user-input "vivid"}}},
 :zoom [-1087.26 -804.94 1.25],
 :opts {:close-on-done? true, :retry-on-error? true, :timeout 120000, :retries 404, :overrides {:style-param "vivid"}},
 :flow-id "openai-image-gen-ladder",
 :flowmaps-connections
 [[:http-req-map/* :oai-api-call/req-map]
  [:oai-api-call/* :just-the-image/x]
  [:generate-file-path :save-base64-to-webp-file/file-path]
  [:just-the-image :save-base64-to-webp-file/b64-data]
  [:oai-api-call/* :output-revised-prompt/x]
  [:save-base64-to-webp-file :create-png-path/x]
  [:generate-file-path :create-convert-command-line/y]
  [:create-png-path :create-convert-command-line/x]
  [:create-convert-command-line :execute-shell-command/command]
  [:create-png-path :hiccup-image-box-w-png/x]
  [:save-base64-to-webp-file :node-js-color-thief-script/image-path]
  [:node-js-color-thief-script/dominantColor :dominant-color/x]
  [:node-js-color-thief-script/* :color-palette/x]
  [:dominant-color :hiccup-image-box-w-png/bg-color]
  [:color-palette :pop-color/x]
  [:pop-color :hiccup-image-box-w-png/color]
  [:execute-shell-command/command :hiccup-image-box-w-png/_]
  [:hiccup-image-box-w-png/* :relative-url-path-for-png-version/x]
  [:relative-url-path-for-png-version :done]
  [:base-web-directory :create-png-path/base-web-dir]
  [:request-body-map/* :http-req-map/req-body*]
  [:size-param :request-body-map/size*]
  [:style-param :request-body-map/style*]
  [:quality-param :request-body-map/quality*]
  [:prompt-jukebox :request-body-map/prompty*]
  [:output-revised-prompt :exif-map/revised]
  [:prompt-jukebox :exif-map/prompt]
  [:exif-map :stringify-exif-map/x]
  [:execute-shell-command/command :stringify-exif-map/bang]
  [:save-base64-to-webp-file :stringify-exif-map/img-path]
  [:prompt :prompt-jukebox/x+]
  [:prompt-3 :prompt-jukebox/x+]
  [:prompt-2 :prompt-jukebox/x+]
  [:prompt-5 :prompt-jukebox/x+]
  [:prompt-4 :prompt-jukebox/x+]
  [:stringify-exif-map :write-file-1/file-data]
  [:open-fn-1 :write-file-1/full-path]
  [:execute-shell-command/command :open-fn-1/_]
  [:write-file-1 :write-file-1_file-path/x]
  [:save-base64-to-webp-file :write-exif-to-image-command/img-path]
  [:write-file-1_file-path :write-exif-to-image-command/x]
  [:write-exif-to-image-command :shell-command-1/command]
  [:shell-command-1 :relative-url-path-for-png-version/bang]
  [:quality-param :open-fn-2/x]
  [:open-fn-2 :shell-command-2/command]
  [:shell-command-2 :abs-file-base-path/x]
  [:abs-file-base-path :generate-file-path/base-dir]
  [:abs-file-base-path :create-png-path/base-dir]
  [:size-param :open-fn-4/x]
  [:open-fn-4 :http-req-map/apikey*]]}