{:flowmaps
 {:open-fn-1
  {:y 1248.4358513327206,
   :fn (fn [x] x),
   :w 200,
   :raw-fn
   (fn [x] (clojure.edn/read-string (get-in x [0 :message :content]))),
   :right-click? true,
   :icon "zmdi-functions",
   :z 0,
   :ports
   {:in {:value :any},
    :out {:idx0 :string, :idx1 :string, :idx2 :boolean, :* :vector}},
   :h 100,
   :x 2561.4977022058824,
   :data
   {:flow-item
    {:description "Write you own Clojure function! Godspeed!",
     :category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:value :any, :out :any},
     :input_types "[:any]",
     :inputs "[:value]",
     :output_types ":any",
     :expandable? true,
     :full_map
     "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :h 6,
    :connection-id nil,
    :view-output? true,
    :queries
    {:name-drag-25
     {:select
      [:name
       :full_map
       :description
       :inputs
       :icon
       :input_types
       :output_types
       :category],
      :from [[:query/flow-fn-sys :ii11]],
      :where [:= :name ":open-fn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":open-fn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :open-fn,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}}},
  :http-call-2
  {:w 200,
   :h 100,
   :x 164.29098358154295,
   :y 791.3802154541015,
   :z 0,
   :data
   {:flow-item
    {:description "Basic HTTP call primitive",
     :category ":rabbit-base",
     :fn (fn [req-map] (rvbbit-backend.websockets/http-call req-map)),
     :name ":http-call",
     :icon "zmdi-http",
     :defaults
     {:req-map
      {:url "https://owen-wilson-wow-api.onrender.com/wows/random",
       :query-params {:movie "Wedding Crashers", :results 40}}},
     :types {:req-map :map, :out :any},
     :input_types "[:map]",
     :style {:color "#7BB696"},
     :selected-style {:color "#7BB696"},
     :inputs "[:req-map]",
     :output_types ":any",
     :expandable? false,
     :full_map
     "{:description \"Basic HTTP call primitive\", :fn (fn [req-map] (rvbbit-backend.websockets/http-call req-map)), :icon \"zmdi-http\", :defaults {:req-map {:url \"https://owen-wilson-wow-api.onrender.com/wows/random\", :query-params {:movie \"Wedding Crashers\", :results 40}}}, :types {:req-map :map, :out :any}, :style {:color \"#7BB696\"}, :selected-style {:color \"#7BB696\"}, :inputs [:req-map], :expandable? false, :required [:req-map]}",
     :required [:req-map]},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :root [500.1770935058594 149.171875],
    :h 6,
    :connection-id nil,
    :queries
    {:name-drag-32
     {:select
      [:name
       :full_map
       :description
       :inputs
       :icon
       :input_types
       :output_types
       :category],
      :from [[:query/flow-fn-sys :ii221]],
      :where [:= :name ":http-call"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":http-call",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :where,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}},
   :icon "zmdi-http",
   :ports
   {:in {:req-map :map},
    :out
    {:* :map,
     :10 :map,
     :4 :map,
     :7 :map,
     :1 :map,
     :8 :map,
     :9 :map,
     :2 :map,
     :5 :map,
     :200 :map,
     :3 :map,
     :6 :map}}},
  :open-fn-2
  {:y 1054.440121459961,
   :fn (fn [x] x),
   :w 200,
   :raw-fn (fn [x y] [x y]),
   :right-click? true,
   :icon "zmdi-functions",
   :z 0,
   :ports
   {:in {:value :any, :value-1 :any},
    :out {:idx0 :map, :idx1 :map, :* :vector}},
   :h 100,
   :x 1177.6373092651368,
   :data
   {:flow-item
    {:description "Write you own Clojure function! Godspeed!",
     :category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:value :any, :out :any},
     :input_types "[:any]",
     :inputs "[:value]",
     :output_types ":any",
     :expandable? true,
     :full_map
     "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :h 6,
    :connection-id nil,
    :view-output? false,
    :queries
    {:name-drag-25
     {:select
      [:name
       :full_map
       :description
       :inputs
       :icon
       :input_types
       :output_types
       :category],
      :from [[:query/flow-fn-sys :ii11]],
      :where [:= :name ":open-fn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":open-fn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :open-fn,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}}},
  :open-input-1
  {:w 200,
   :h 100,
   :data
   {:drag-meta {:type :open-block},
    :flow-item {:expandable? true},
    :user-input
    {:url
     "http://10.174.1.174/api/sqOjLm0JhoioAbwhwPm6ZlHiuCAx-KnQEYwAZOWL/groups"},
    :view-output? false},
   :z 0,
   :ports {:out {:url :string, :* :map}},
   :x 159.8031671697442,
   :y 619.0020929509942},
  :hue-change-group-color
  {:y 1253.8160268930287,
   :sub-flow
   {:flow-id "hue-change-group-color",
    :file-path "./flows/hue-change-group-color.edn",
    :map
    {:http-call-1
     {:w 200,
      :h 100,
      :x 1790.4873838682431,
      :y 1233.2681706608953,
      :z 0,
      :data
      {:flow-item
       {:description "Basic HTTP call primitive",
        :category ":rabbit-base",
        :fn
        (fn [req-map] (rvbbit-backend.websockets/http-call req-map)),
        :name ":http-call",
        :icon "zmdi-http",
        :defaults
        {:req-map
         {:url "https://owen-wilson-wow-api.onrender.com/wows/random",
          :query-params {:movie "Wedding Crashers", :results 40}}},
        :types {:req-map :map, :out :any},
        :input_types "[:map]",
        :style {:color "#7BB696"},
        :selected-style {:color "#7BB696"},
        :inputs "[:req-map]",
        :output_types ":any",
        :expandable? false,
        :full_map
        "{:description \"Basic HTTP call primitive\", :fn (fn [req-map] (rvbbit-backend.websockets/http-call req-map)), :icon \"zmdi-http\", :defaults {:req-map {:url \"https://owen-wilson-wow-api.onrender.com/wows/random\", :query-params {:movie \"Wedding Crashers\", :results 40}}}, :types {:req-map :map, :out :any}, :style {:color \"#7BB696\"}, :selected-style {:color \"#7BB696\"}, :inputs [:req-map], :expandable? false, :required [:req-map]}",
        :required [:req-map]},
       :name "drag-from-",
       :w 5,
       :source-panel :flow-fn-list*,
       :root [446.9193115234375 154.8854217529297],
       :h 6,
       :connection-id nil,
       :view-output? false,
       :queries
       {:name-drag-8
        {:select
         [:name
          :full_map
          :description
          :inputs
          :icon
          :input_types
          :output_types
          :category],
         :from [[:query/flow-fn-sys :zz280]],
         :where [:= :name ":http-call"]}},
       :drag-meta
       {:data-type "string",
        :source-query :flow-fn-sys,
        :param-full ":http-call",
        :param-field :name,
        :source-panel-key :flow-fn-list*,
        :type :where,
        :param-table :flow-fn-sys,
        :source-table :query/flow-fn-sys,
        :connection-id nil,
        :target :name,
        :row-num 5}},
      :icon "zmdi-http",
      :ports
      {:in {:req-map :map},
       :out {:idx0 :map, :idx1 :map, :idx2 :map, :* :vector}}},
     :open-input
     {:w 200,
      :h 100,
      :data
      {:drag-meta {:type :open-block},
       :flow-item {:expandable? true},
       :user-input
       {:method :put,
        :body {:hue :value-0, :on :value-3, :sat :value-1},
        :url :value-2}},
      :z 0,
      :ports
      {:out {:method :keyword, :body :map, :url :string, :* :map},
       :in
       {:value-0 :any, :value-1 :any, :value-2 :any, :value-3 :any}},
      :x 1423.3972761824323,
      :y 1195.8532899598815},
     :ccolor
     {:w 200,
      :h 90,
      :x 597.3122360641892,
      :y 1412.1360839843749,
      :z 0,
      :data
      {:h 3,
       :w 6,
       :root [0 0],
       :drag-meta
       {:type :param,
        :param-full :param/ccolor,
        :param-table :param,
        :param-field :ccolor}},
      :icon "zmdi-tune",
      :ports {:in {}, :out {:out :string}}},
     :open-fn-1
     {:y 1355.9307551203544,
      :fn (fn [x] x),
      :w 200,
      :raw-fn (fn [x] (rvbbit-backend.util/hex-to-hue-sat x)),
      :right-click? true,
      :icon "zmdi-functions",
      :z 0,
      :ports
      {:in {:value :any},
       :out {:idx0 :integer, :idx1 :integer, :* :vector}},
      :h 100,
      :x 1028.3633604307431,
      :data
      {:flow-item
       {:description "Write you own Clojure function! Godspeed!",
        :category ":rabbit-base",
        :fn (fn [x] x),
        :name ":open-fn",
        :raw-fn (fn [x] x),
        :type :open-fn,
        :icon "zmdi-functions",
        :types {:value :any, :out :any},
        :input_types "[:any]",
        :inputs "[:value]",
        :output_types ":any",
        :expandable? true,
        :full_map
        "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
       :name "drag-from-",
       :w 5,
       :source-panel :flow-fn-list*,
       :h 6,
       :connection-id nil,
       :queries
       {:name-drag-25
        {:select
         [:name
          :full_map
          :description
          :inputs
          :icon
          :input_types
          :output_types
          :category],
         :from [[:query/flow-fn-sys :ii11]],
         :where [:= :name ":open-fn"]}},
       :drag-meta
       {:data-type "string",
        :source-query :flow-fn-sys,
        :param-full ":open-fn",
        :param-field :name,
        :source-panel-key :flow-fn-list*,
        :type :open-fn,
        :param-table :flow-fn-sys,
        :source-table :query/flow-fn-sys,
        :connection-id nil,
        :target :name,
        :row-num 5}}},
     :group-id
     {:w 200,
      :h 100,
      :data
      {:drag-meta {:type :open-block},
       :flow-item {:expandable? true},
       :user-input 200},
      :z 0,
      :ports {:out {:out :integer}},
      :x 615.7898543074323,
      :y 1060.3662624049832},
     :open-fn-2
     {:y 1076.5051454286315,
      :fn (fn [x] x),
      :w 200,
      :raw-fn
      (fn [x]
        (str
          "http://10.174.1.174/api/sqOjLm0JhoioAbwhwPm6ZlHiuCAx-KnQEYwAZOWL/groups/"
          x
          "/action")),
      :right-click? true,
      :icon "zmdi-functions",
      :z 0,
      :ports {:in {:value :any}, :out {:out :any}},
      :h 100,
      :x 1033.2374630489865,
      :data
      {:flow-item
       {:description "Write you own Clojure function! Godspeed!",
        :category ":rabbit-base",
        :fn (fn [x] x),
        :name ":open-fn",
        :raw-fn (fn [x] x),
        :type :open-fn,
        :icon "zmdi-functions",
        :types {:value :any, :out :any},
        :input_types "[:any]",
        :inputs "[:value]",
        :output_types ":any",
        :expandable? true,
        :full_map
        "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
       :name "drag-from-",
       :w 5,
       :source-panel :flow-fn-list*,
       :h 6,
       :connection-id nil,
       :queries
       {:name-drag-25
        {:select
         [:name
          :full_map
          :description
          :inputs
          :icon
          :input_types
          :output_types
          :category],
         :from [[:query/flow-fn-sys :ii11]],
         :where [:= :name ":open-fn"]}},
       :drag-meta
       {:data-type "string",
        :source-query :flow-fn-sys,
        :param-full ":open-fn",
        :param-field :name,
        :source-panel-key :flow-fn-list*,
        :type :open-fn,
        :param-table :flow-fn-sys,
        :source-table :query/flow-fn-sys,
        :connection-id nil,
        :target :name,
        :row-num 5}}},
     :on-switch
     {:w 200,
      :h 90,
      :x 638.0523120777027,
      :y 1230.9223421663849,
      :z 0,
      :data
      {:h 3,
       :w 6,
       :root [0 0],
       :drag-meta
       {:type :param,
        :param-full :param/on-switch,
        :param-table :param,
        :param-field :on-switch}},
      :icon "zmdi-tune",
      :ports {:in {}, :out {:out :boolean}}}},
    :connections
    [[:open-input/* :http-call-1/req-map]
     [:http-call-1/* :done]
     [:ccolor :open-fn-1/value]
     [:open-fn-1/idx0 :open-input/value-0]
     [:open-fn-1/idx1 :open-input/value-1]
     [:group-id :open-fn-2/value]
     [:open-fn-2 :open-input/value-2]
     [:on-switch :open-input/value-3]]},
   :flow-id "hue-change-group-color",
   :w 200,
   :icon "zmdi-puzzle-piece",
   :z 0,
   :ports
   {:in {:ccolor :string, :group-id :any, :on-switch :boolean},
    :out nil},
   :h 100,
   :file-path "./flows/hue-change-group-color.edn",
   :x 3222.9988957331734,
   :data
   {:flow-item nil,
    :name "drag-from-",
    :w 5,
    :source-panel :flow-list*,
    :root [1097.5364990234375 236.515625],
    :h 6,
    :connection-id nil,
    :queries
    {:flow-id-drag-39
     {:select [:flow_id :file_path :last_modified],
      :from [[:query/flows-sys :kk701]],
      :where [:= :flow_id "hue-change-group-color"]}},
    :drag-meta
    {:data-type "string",
     :done-block :http-call-1/*,
     :source-query :flows-sys,
     :param-full "hue-change-group-color",
     :param-field :flow_id,
     :source-panel-key :flow-list*,
     :type :sub-flow,
     :param-table :flows-sys,
     :source-table :query/flows-sys,
     :connection-id nil,
     :target :flow_id,
     :row-num 1}}},
  :open-input
  {:w 200,
   :h 100,
   :data
   {:drag-meta {:type :open-block},
    :flow-item {:expandable? true},
    :user-input
    {:headers :value-0,
     :method :post,
     :url :value-1,
     :body {:model "gpt-3.5-turbo", :messages :value-2}},
    :view-output? false},
   :z 0,
   :ports
   {:out
    {:headers :map,
     :method :keyword,
     :url :string,
     :body :map,
     :* :map},
    :in {:value-0 :any, :value-1 :any, :value-2 :any}},
   :x 1508.692069738051,
   :y 1348.1065946691178},
  :system-prompt
  {:w 200,
   :h 100,
   :data
   {:drag-meta {:type :open-block},
    :flow-item {:expandable? true},
    :user-input
    {:role "system",
     :content
     "You are a parser bot. Users will ask to set a particular light-id to a certain color. You will match the light name with on of these light name IDs. Pick the one that matches to the users request best.  The only valid light-ids are ['Living Room Lights', 'Dining Room Lights', 'Patio Lights']  Only one. You will only return one thing. Two values encased in square brackets, with 2 double-quoted strings inside (valid Clojure EDN). They will be as follows. [\"The light id chosen\" \"Hex version of requested color\"]  Example:  User Input: \"Hey, change the living room lights to be green.\" Your Output: [\"Living Room\" \"#00FF00\"]"}},
   :z 0,
   :ports {:out {:role :string, :content :string, :* :map}, :in {}},
   :x 634.1564145688654,
   :y 670.2029785156247},
  :open-fn-3
  {:y 1123.0201009114583,
   :fn (fn [x] x),
   :w 200,
   :raw-fn
   (fn [x]
     (str (into {} (for [[k v] x] {(str (name k)) (get v :name)})))),
   :right-click? true,
   :icon "zmdi-functions",
   :z 0,
   :ports
   {:in {:value :any},
    :out
    {"9" :string,
     "3" :string,
     :* :map,
     "4" :string,
     "8" :string,
     "7" :string,
     "5" :string,
     "6" :string,
     "200" :string,
     "1" :string,
     "2" :string,
     "10" :string}},
   :h 100,
   :x 200.11521461123522,
   :data
   {:flow-item
    {:description "Write you own Clojure function! Godspeed!",
     :category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:value :any, :out :any},
     :input_types "[:any]",
     :inputs "[:value]",
     :output_types ":any",
     :expandable? true,
     :full_map
     "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :h 6,
    :connection-id nil,
    :view-output? false,
    :queries
    {:name-drag-25
     {:select
      [:name
       :full_map
       :description
       :inputs
       :icon
       :input_types
       :output_types
       :category],
      :from [[:query/flow-fn-sys :ii11]],
      :where [:= :name ":open-fn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":open-fn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :open-fn,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}}},
  :open-fn-4
  {:y 843.2965619255514,
   :fn (fn [x] x),
   :w 200,
   :raw-fn
   (fn [x]
     {:role "system",
      :content
      (str
        "You are a parser bot. Users will ask to set a particular light-id to a certain color. You will match the light name with on of these light name IDs. Pick the one that matches to the users request best.  The only valid light-ids and names are "
        (str x)
        "  Only one. You will only return one thing. Two values encased in square brackets, with 2 double-quoted strings inside (valid Clojure EDN). They will be as follows. [\"The light id chosen\" \"Hex version of requested color\"]  Examples:  User Input: \"Hey, change the living room lights to be green.\" Your Output: [\"200\" \"#00FF00\" true] User Input: \"Hey, turn the lights in the office off.\" Your Output [\"200\" \"#ffffff\" false] Notice that if the user requests the lights be on or off set that true or false in the 3rd postion. Always assume this to be true / 'lights on' unless otherwise instructed. These commands may be accompanied with a color. If not color, just use white.")}),
   :right-click? true,
   :icon "zmdi-functions",
   :z 0,
   :ports
   {:in {:value :any},
    :out {:role :string, :content :string, :* :map}},
   :h 100,
   :x 631.3361529181984,
   :data
   {:flow-item
    {:description "Write you own Clojure function! Godspeed!",
     :category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:value :any, :out :any},
     :input_types "[:any]",
     :inputs "[:value]",
     :output_types ":any",
     :expandable? true,
     :full_map
     "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :h 6,
    :connection-id nil,
    :view-output? false,
    :queries
    {:name-drag-25
     {:select
      [:name
       :full_map
       :description
       :inputs
       :icon
       :input_types
       :output_types
       :category],
      :from [[:query/flow-fn-sys :ii11]],
      :where [:= :name ":open-fn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":open-fn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :open-fn,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}}},
  :http-call-1
  {:w 200,
   :h 100,
   :x 2057.228400735294,
   :y 1204.8138097426472,
   :z 0,
   :data
   {:flow-item
    {:description "Basic HTTP call primitive",
     :category ":rabbit-base",
     :fn (fn [req-map] (rvbbit-backend.websockets/http-call req-map)),
     :name ":http-call",
     :icon "zmdi-http",
     :defaults
     {:req-map
      {:url "https://owen-wilson-wow-api.onrender.com/wows/random",
       :query-params {:movie "Wedding Crashers", :results 40}}},
     :types {:req-map :map, :out :any},
     :input_types "[:map]",
     :style {:color "#7BB696"},
     :selected-style {:color "#7BB696"},
     :inputs "[:req-map]",
     :output_types ":any",
     :expandable? false,
     :full_map
     "{:description \"Basic HTTP call primitive\", :fn (fn [req-map] (rvbbit-backend.websockets/http-call req-map)), :icon \"zmdi-http\", :defaults {:req-map {:url \"https://owen-wilson-wow-api.onrender.com/wows/random\", :query-params {:movie \"Wedding Crashers\", :results 40}}}, :types {:req-map :map, :out :any}, :style {:color \"#7BB696\"}, :selected-style {:color \"#7BB696\"}, :inputs [:req-map], :expandable? false, :required [:req-map]}",
     :required [:req-map]},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :root [864.1770935058594 199.171875],
    :h 6,
    :connection-id nil,
    :view-output? true,
    :queries
    {:name-drag-27
     {:select
      [:name
       :full_map
       :description
       :inputs
       :icon
       :input_types
       :output_types
       :category],
      :from [[:query/flow-fn-sys :ff241]],
      :where [:= :name ":http-call"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":http-call",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :where,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}},
   :icon "zmdi-http",
   :ports
   {:in {:req-map :map},
    :out
    {:id :string,
     :object :string,
     :created :integer,
     :model :string,
     :choices :rowset,
     :usage :map,
     :system_fingerprint :list,
     :* :map}}},
  :user-input-color
  {:w 200,
   :h 100,
   :data
   {:drag-meta {:type :open-block},
    :flow-item {:expandable? true},
    :user-input {:role "user", :content :value-0}},
   :z 0,
   :ports
   {:out {:role :string, :content :string, :* :map},
    :in {:value-0 :any}},
   :x 632.6595925071024,
   :y 1542.1945845170455},
  :open-input-2
  {:w 200,
   :h 100,
   :data
   {:drag-meta {:type :open-block},
    :flow-item {:expandable? true},
    :user-input true},
   :z 0,
   :ports {:out {:out :boolean}},
   :x 2611.701251446759,
   :y 1437.0625072337962},
  :headers-map
  {:w 200,
   :h 100,
   :data
   {:drag-meta {:type :open-block},
    :flow-item {:expandable? true},
    :user-input
    {"Authorization"
     "Bearer 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",
     "Content-Type" "application/json"}},
   :z 0,
   :ports
   {:out {"Authorization" :string, "Content-Type" :string, :* :map}},
   :x 692.0606667258523,
   :y 1169.5845081676136},
  :user-sentence
  {:w 200,
   :h 100,
   :data
   {:drag-meta {:type :open-block},
    :flow-item {:expandable? true},
    :user-input
    "hey huie, lets make the living room a nasty deep red. thank you."},
   :z 0,
   :ports {:out {:out :string}},
   :x -168.02755533854133,
   :y 1555.81591796875},
  :url-str
  {:w 200,
   :h 100,
   :data
   {:drag-meta {:type :open-block},
    :flow-item {:expandable? true},
    :user-input "https://api.openai.com/v1/chat/completions",
    :view-output? false},
   :z 0,
   :ports {:out {:out :string}},
   :x 685.0530584161934,
   :y 1334.863818359375}},
 :flow-id "gpt35-color-parser",
 :flowmaps-connections
 [[:headers-map/* :open-input/value-0]
  [:url-str :open-input/value-1]
  [:open-fn-2 :open-input/value-2]
  [:open-input/* :http-call-1/req-map]
  [:http-call-1/choices :open-fn-1/value]
  [:open-fn-1/* :done]
  [:user-sentence :user-input-color/value-0]
  [:open-input-1/* :http-call-2/req-map]
  [:http-call-2/* :open-fn-3/value]
  [:open-fn-3/* :open-fn-4/value]
  [:open-fn-4 :open-fn-2/value]
  [:user-input-color/* :open-fn-2/value-1]
  [:open-fn-1/idx0 :hue-change-group-color/group-id]
  [:open-fn-1/idx1 :hue-change-group-color/ccolor]
  [:open-fn-1/idx2 :hue-change-group-color/on-switch]]}