{:flowmaps
 {:ask-buffy-1
  {:y 975,
   :sub-flow
   {:flow-id "ask-buffy-1",
    :file-path "./flows/ask-buffy-1.edn",
    :map
    {:oai-api-call
     {:y 1125,
      :description
      ["Making the OpenAI API call with our prepared request map with all our details, headers, settings, etc. Here we are calling the gen-image endpoint for the DALLE3 model. This returns a full JSON map with includes the revised prompt as well at the base64 image string of the generated WEBP file. "
       ""
       "https://platform.openai.com/docs/guides/images/image-generation"],
      :w 175,
      :right-click? true,
      :icon "zmdi-http",
      :z 0,
      :ports {:in {:req-map :map}, :out {:created :integer, :data :rowset, :* :map}},
      :h 135,
      :x 1775,
      :data
      {:flow-item
       {:category ":rabbit-base",
        :name ":make-http-call",
        :type :make-http-call,
        :icon "zmdi-http",
        :defaults
        {:req-map
         {:url "https://owen-wilson-wow-api.onrender.com/wows/random",
          :query-params {:movie "Wedding Crashers", :results 40}}},
        :types {:req-map :map, :out :any},
        :inputs [:req-map],
        :expandable? true,
        :required [:req-map]},
       :drag-meta {:type :make-http-call}}},
     :oai-api-call_choices>0>message>content
     {:y 1300,
      :fn (fn [x] (get-in x [:choices 0 :message :content])),
      :w 250,
      :raw-fn (fn [x] [:speak (get-in x [:choices 0 :message :content])]),
      :icon "zmdi-functions",
      :types nil,
      :z 0,
      :ports {:in {:x :any}, :out {:out :any}},
      :inputs nil,
      :h 160,
      :x 1750,
      :data
      {:flow-item
       {:category ":rabbit-base",
        :fn (fn [x] (get-in x [:choices 0 :message :content])),
        :name ":open-fn",
        :raw-fn (fn [x] (get-in x [:choices 0 :message :content])),
        :type :open-fn,
        :icon "zmdi-functions",
        :types {:x :any, :out :any},
        :inputs [:x],
        :expandable? true,
        :drag-meta {:type :open-fn}}}},
     :open-fn-1
     {:y 750,
      :fn (fn [x] x),
      :w 125,
      :raw-fn
      (fn [room color] [{:role "system",
                         :content
                         "You are Buffy, a helpful, but wise cracking assistant - modeled after Buffy the Vampire Slayer from the 1990s movie - starring Kristy Swanson. I'm going to give you a command and you are going to pretent to do it, and make some wisecrack about it based on the request. Keep the responses short and punchy - reference the color and room also please! Also never reference the hex color directly and give it a funny color name."}
                        {:role "user", :content (str "Change the lights of the " room " to " color " please!")}]),
      :right-click? true,
      :icon "zmdi-functions",
      :types nil,
      :z 0,
      :ports {:in {:room :any, :color :any}, :out {:out :any}},
      :inputs nil,
      :h 85,
      :x 1775,
      :data
      {:flow-item
       {:category ":rabbit-base",
        :fn (fn [x] x),
        :name ":open-fn",
        :raw-fn (fn [x] x),
        :type :open-fn,
        :icon "zmdi-functions",
        :types {:x :any, :out :any},
        :inputs [:x],
        :expandable? true,
        :drag-meta {:type :open-fn}}}},
     :alert!-1
     {:y 1500,
      :w 250,
      :right-click? true,
      :icon "zmdi-alert-polygon",
      :z 0,
      :ports {:in {:destination :keyword, :content :any, :w :integer, :h :integer, :duration :integer}, :out {:out :any}},
      :h 110,
      :x 1750,
      :data
      {:flow-item
       {:category ":rabbit-base",
        :name ":alert!",
        :type :alert!,
        :icon "zmdi-alert-polygon",
        :defaults {:destination :client-name, :content "Alert!", :w 10, :h 1, :duration 6},
        :types {:destination :keyword, :content :any, :out :any, :w :integer, :h :integer, :duration :integer},
        :style {:color "#FDFD96"},
        :selected-style {:color "#FDFD96"},
        :inputs [:destination :content :w :h :duration],
        :expandable? true,
        :required nil},
       :drag-meta {:type :alert!}}},
     :request-body-map
     {:y 875,
      :w 175,
      :right-click? true,
      :types nil,
      :z 0,
      :ports {:in {:messages* :any}, :out {:out {:n :integer, :model :string, :messages :keyword, :* :map}}},
      :inputs nil,
      :h 85,
      :x 1775,
      :data
      {:drag-meta {:type :open-block},
       :flow-item {:expandable? true},
       :user-input {:n 1, :model "gpt-3.5-turbo-0125", :messages :messages*}}},
     :the-color
     {:y 575,
      :w 125,
      :right-click? true,
      :types nil,
      :z 0,
      :ports {:in {}, :out {:out {:out :string}}},
      :inputs nil,
      :h 85,
      :x 1850,
      :data {:flow-item {:expandable? true, :inputs []}, :drag-meta {:type :open-block}, :user-input "#ffffff"}},
     :the-room
     {:y 575,
      :w 125,
      :right-click? true,
      :types nil,
      :z 0,
      :ports {:in {}, :out {:out {:out :string}}},
      :inputs nil,
      :h 85,
      :x 1675,
      :data {:flow-item {:expandable? true, :inputs []}, :drag-meta {:type :open-block}, :user-input "Living Room"}},
     :http-req-map
     {:y 1000,
      :description ["Request map for the HTTP call. Headers, Method, URL, and the call body map."],
      :w 175,
      :right-click? true,
      :types nil,
      :z 0,
      :ports {:in {:req-body* :any}, :out {:out {:headers :map, :method :keyword, :url :string, :body :keyword, :* :map}}},
      :inputs nil,
      :h 85,
      :x 1775,
      :data
      {:drag-meta {:type :open-block},
       :flow-item {:expandable? true, :meta {}},
       :user-input
       {:headers
        {"Authorization" "Bearer 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", "Content-Type" "application/json"},
        :method :post,
        :url "https://api.openai.com/v1/chat/completions",
        :body :req-body*}}}},
    :connections
    [[:http-req-map/* :oai-api-call/req-map]
     [:request-body-map/* :http-req-map/req-body*]
     [:the-room :open-fn-1/room]
     [:the-color :open-fn-1/color]
     [:open-fn-1 :request-body-map/messages*]
     [:oai-api-call :oai-api-call_choices>0>message>content/x]
     [:oai-api-call_choices>0>message>content :alert!-1/content]
     [:alert!-1 :done]]},
   :flow-id "ask-buffy-1",
   :w 200,
   :icon "zmdi-puzzle-piece",
   :z 0,
   :ports {:in {:the-color [[:out :string] :any :string], :the-room [[:out :string] :any :string]}, :out {:out :any}},
   :h 100,
   :file-path "./flows/ask-buffy-1.edn",
   :x 1425,
   :data
   {:flow-item {:inputs [:the-color :the-room]},
    :drag-meta
    {:data-type "string",
     :done-block :alert!-1,
     :source-query :flows-sys,
     :param-full "ask-buffy-1",
     :param-field :flow_id,
     :source-panel-key :flow-list*,
     :type :sub-flow,
     :param-table :flows-sys,
     :source-table :query/flows-sys,
     :connection-id nil,
     :target :flow_id,
     :row-num 0}}},
  :open-fn-1
  {:y 850,
   :fn (fn [x] x),
   :w 100,
   :raw-fn (fn [x] (rvbbit-backend.util/hex-to-hue-sat x)),
   :right-click? true,
   :icon "zmdi-functions",
   :z 0,
   :ports {:in {:value :any}, :out {:idx0 :integer, :idx1 :integer, :* :vector}},
   :h 100,
   :x 975,
   :data
   {:flow-item
    {:description "Write you own Clojure function! Godspeed!",
     :category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:value :any, :out :any},
     :input_types "[:any]",
     :inputs "[:value]",
     :output_types ":any",
     :expandable? true,
     :full_map
     "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :h 6,
    :connection-id nil,
    :queries
    {:name-drag-25
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :ii11]],
      :where [:= :name ":open-fn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":open-fn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :open-fn,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}}},
  :open-fn-2
  {:y 850,
   :fn (fn [x] x),
   :w 150,
   :raw-fn (fn [x] (str "http://10.174.1.174/api/sqOjLm0JhoioAbwhwPm6ZlHiuCAx-KnQEYwAZOWL/groups/" x "/action")),
   :right-click? true,
   :icon "zmdi-functions",
   :z 0,
   :ports {:in {:value :any}, :out {:out :any}},
   :h 100,
   :x 1100,
   :data
   {:flow-item
    {:description "Write you own Clojure function! Godspeed!",
     :category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:value :any, :out :any},
     :input_types "[:any]",
     :inputs "[:value]",
     :output_types ":any",
     :expandable? true,
     :full_map
     "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :h 6,
    :connection-id nil,
    :queries
    {:name-drag-25
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :ii11]],
      :where [:= :name ":open-fn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":open-fn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :open-fn,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}}},
  :group-id
  {:w 100,
   :h 85,
   :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input 200},
   :z 0,
   :ports {:out {:out :integer}},
   :x 1100,
   :y 725},
  :open-input
  {:w 200,
   :h 100,
   :data
   {:drag-meta {:type :open-block},
    :flow-item {:expandable? true},
    :user-input {:method :put, :body {:hue :value-0, :on :value-3, :sat :value-1}, :url :value-2}},
   :z 0,
   :ports
   {:out {:method :keyword, :body :map, :url :string, :* :map},
    :in {:value-0 :any, :value-1 :any, :value-2 :any, :value-3 :any}},
   :x 1125,
   :y 1075},
  :on-switch
  {:w 100,
   :h 115,
   :x 1275,
   :y 725,
   :z 0,
   :data
   {:h 3,
    :w 6,
    :root [0 0],
    :drag-meta {:type :param, :param-full :param/on-switch, :param-table :param, :param-field :on-switch}},
   :icon "zmdi-tune",
   :ports {:in {}, :out {:out :boolean}}},
  :room-name
  {:y 725,
   :w 125,
   :right-click? true,
   :types nil,
   :z 0,
   :ports {:in {}, :out {:out {:out :string}}},
   :inputs nil,
   :h 85,
   :x 1400,
   :data {:flow-item {:expandable? true, :inputs []}, :drag-meta {:type :open-block}, :user-input "Living Room"}},
  :ccolor
  {:w 100,
   :h 85,
   :x 975,
   :y 725,
   :z 0,
   :data
   {:h 3,
    :w 6,
    :root [0 0],
    :drag-meta {:type :param, :param-full :param/ccolor, :param-table :param, :param-field :ccolor}},
   :icon "zmdi-tune",
   :ports {:in {}, :out {:out :string}}},
  :http-call-1
  {:w 200,
   :h 100,
   :x 1125,
   :y 1225,
   :z 0,
   :data
   {:flow-item
    {:description "Basic HTTP call primitive",
     :category ":rabbit-base",
     :fn (fn [req-map] (rvbbit-backend.websockets/http-call req-map)),
     :name ":http-call",
     :icon "zmdi-http",
     :defaults
     {:req-map
      {:url "https://owen-wilson-wow-api.onrender.com/wows/random",
       :query-params {:movie "Wedding Crashers", :results 40}}},
     :types {:req-map :map, :out :any},
     :input_types "[:map]",
     :style {:color "#7BB696"},
     :selected-style {:color "#7BB696"},
     :inputs "[:req-map]",
     :output_types ":any",
     :expandable? false,
     :full_map
     "{:description \"Basic HTTP call primitive\", :fn (fn [req-map] (rvbbit-backend.websockets/http-call req-map)), :icon \"zmdi-http\", :defaults {:req-map {:url \"https://owen-wilson-wow-api.onrender.com/wows/random\", :query-params {:movie \"Wedding Crashers\", :results 40}}}, :types {:req-map :map, :out :any}, :style {:color \"#7BB696\"}, :selected-style {:color \"#7BB696\"}, :inputs [:req-map], :expandable? false, :required [:req-map]}",
     :required [:req-map]},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :root [446.9193115234375 154.8854217529297],
    :h 6,
    :connection-id nil,
    :view-output? false,
    :queries
    {:name-drag-8
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :zz280]],
      :where [:= :name ":http-call"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":http-call",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :where,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}},
   :icon "zmdi-http",
   :ports {:in {:req-map :map}, :out {:idx0 :map, :idx1 :map, :idx2 :map, :* :vector}}}},
 :zoom [-1472.5 -1083.39 1.675],
 :opts {:overrides {:group-id "7", :on-switch true, :ccolor "#ff0202"}},
 :flow-id "hue-change-group-color",
 :flowmaps-connections
 [[:open-input/* :http-call-1/req-map]
  [:http-call-1/* :done]
  [:ccolor :open-fn-1/value]
  [:open-fn-1/idx0 :open-input/value-0]
  [:open-fn-1/idx1 :open-input/value-1]
  [:group-id :open-fn-2/value]
  [:open-fn-2 :open-input/value-2]
  [:on-switch :open-input/value-3]
  [:ccolor :ask-buffy-1/the-color]
  [:room-name :ask-buffy-1/the-room]]}