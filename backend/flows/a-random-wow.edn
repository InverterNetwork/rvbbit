{:flowmaps
 {:movie-name
  {:y 700,
   :fn (fn [x] x),
   :w 125,
   :raw-fn (fn [value] (Thread/sleep 900) value),
   :right-click? true,
   :icon "zmdi-functions",
   :z 0,
   :ports {:in {:value :any}, :out {:out :string}},
   :h 100,
   :x 1150,
   :data
   {:flow-item
    {:description "Write you own Clojure function! Godspeed!",
     :category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:value :any, :out :any},
     :input_types "[:any]",
     :inputs "[:value]",
     :output_types ":any",
     :expandable? true,
     :full_map
     "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :h 6,
    :connection-id nil,
    :queries
    {:name-drag-25
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :ii11]],
      :where [:= :name ":open-fn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":open-fn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :open-fn,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}}},
  :unpack-results-map_poster
  {:y 828.8827626233314,
   :fn (fn [x] (get-in x [:poster])),
   :w 175,
   :raw-fn (fn [x] (get-in x [:poster])),
   :icon "zmdi-functions",
   :z 0,
   :ports {:in {:x :any}, :out {:out :any}},
   :h 310,
   :x 914.9390597794543,
   :view (fn [x] [:img {:src x}]),
   :data
   {:flow-item
    {:category ":rabbit-base",
     :fn (fn [x] (get-in x [:poster])),
     :name ":open-fn",
     :raw-fn (fn [x] (get-in x [:poster])),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:x :any, :out :any},
     :expandable? true,
     :drag-meta {:type :open-fn}}}},
  :rando-string
  {:w 125,
   :h 75,
   :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input "feed me, seymour!"},
   :z 0,
   :ports {:in {}, :out {:out :string}},
   :x 1350,
   :y 575},
  :unpack-results-map_video=480p
  {:y 875,
   :fn (fn [x] (get-in x [:video :480p])),
   :w 375,
   :raw-fn (fn [x] (get-in x [:video :480p])),
   :icon "zmdi-functions",
   :z 0,
   :ports {:in {:x :any}, :out {:out :any}},
   :h 275,
   :x 1350,
   :view
   (fn [x] [:iframe
            {:src x,
             :style
             {:border "none", :background-color "#00000000", :width :panel-width+80-px, :height :panel-height+80-px}}]),
   :data
   {:flow-item
    {:category ":rabbit-base",
     :fn (fn [x] (get-in x [:video :480p])),
     :name ":open-fn",
     :raw-fn (fn [x] (get-in x [:video :480p])),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:x :any, :out :any},
     :inputs [:x],
     :expandable? true,
     :drag-meta {:type :open-fn}}}},
  :full-wow-line
  {:y 700,
   :fn (fn [x] x),
   :w 125,
   :raw-fn (fn [value] value),
   :right-click? true,
   :icon "zmdi-functions",
   :z 0,
   :ports {:in {:value :any}, :out {:out :string}},
   :h 100,
   :x 1300,
   :data
   {:flow-item
    {:description "Write you own Clojure function! Godspeed!",
     :category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:value :any, :out :any},
     :input_types "[:any]",
     :inputs "[:value]",
     :output_types ":any",
     :expandable? true,
     :full_map
     "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :h 6,
    :connection-id nil,
    :view-output? true,
    :queries
    {:name-drag-25
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :ii11]],
      :where [:= :name ":open-fn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":open-fn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :open-fn,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}}},
  :unpack-results-map
  {:y 550,
   :fn (fn [x] x),
   :w 200,
   :raw-fn (fn [value] (Thread/sleep 900) value),
   :right-click? true,
   :icon "zmdi-functions",
   :z 0,
   :ports
   {:in {:value :any},
    :out
    {:video :map,
     :total_wows_in_movie :integer,
     :* :map,
     :release_date :string,
     :director :string,
     :full_line :string,
     :movie :string,
     :year :integer,
     :poster :string,
     :audio :string,
     :current_wow_in_movie :integer,
     :timestamp :string,
     :movie_duration :string,
     :character :string}},
   :h 100,
   :x 1050,
   :data
   {:flow-item
    {:description "Write you own Clojure function! Godspeed!",
     :category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:value :any, :out :any},
     :input_types "[:any]",
     :inputs "[:value]",
     :output_types ":any",
     :expandable? true,
     :full_map
     "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :h 6,
    :connection-id nil,
    :view-output? true,
    :queries
    {:name-drag-25
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :ii11]],
      :where [:= :name ":open-fn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":open-fn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :open-fn,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}}},
  :open-input
  {:w 225,
   :h 85,
   :data
   {:drag-meta {:type :open-block},
    :flow-item {:expandable? true, :inputs []},
    :user-input {:url "https://owen-wilson-wow-api.onrender.com/wows/random"},
    :view-output? false,
    :width 350},
   :z 0,
   :ports {:out {:url :string, :* :map}, :in {}},
   :x 1000,
   :y 275},
  :open-fn-5
  {:y 700,
   :fn (fn [x] x),
   :w 125,
   :raw-fn (fn [value] (str value)),
   :right-click? true,
   :icon "zmdi-functions",
   :z 0,
   :ports {:in {:value :any}, :out {:out :string}},
   :h 100,
   :x 1450,
   :data
   {:flow-item
    {:description "Write you own Clojure function! Godspeed!",
     :category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:value :any, :out :any},
     :input_types "[:any]",
     :inputs "[:value]",
     :output_types ":any",
     :expandable? true,
     :full_map
     "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :h 6,
    :connection-id nil,
    :queries
    {:name-drag-25
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :ii11]],
      :where [:= :name ":open-fn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":open-fn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :open-fn,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}}},
  :http-call-1
  {:w 175,
   :h 100,
   :x 1050,
   :y 400,
   :z 0,
   :data
   {:flow-item
    {:description "Basic HTTP call primitive",
     :category ":rabbit-base",
     :fn (fn [req-map] (rvbbit-backend.websockets/http-call req-map)),
     :name ":http-call",
     :icon "zmdi-http",
     :defaults
     {:req-map
      {:url "https://owen-wilson-wow-api.onrender.com/wows/random",
       :query-params {:movie "Wedding Crashers", :results 40}}},
     :types {:req-map :map, :out :any},
     :input_types "[:map]",
     :style {:color "#7BB696"},
     :selected-style {:color "#7BB696"},
     :inputs "[:req-map]",
     :output_types ":any",
     :expandable? true,
     :full_map
     "{:description \"Basic HTTP call primitive\", :fn (fn [req-map] (rvbbit-backend.websockets/http-call req-map)), :icon \"zmdi-http\", :defaults {:req-map {:url \"https://owen-wilson-wow-api.onrender.com/wows/random\", :query-params {:movie \"Wedding Crashers\", :results 40}}}, :types {:req-map :map, :out :any}, :style {:color \"#7BB696\"}, :selected-style {:color \"#7BB696\"}, :inputs [:req-map], :expandable? true, :required [:req-map]}",
     :required [:req-map]},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :root [395 185],
    :h 6,
    :connection-id nil,
    :view-output? true,
    :queries
    {:name-drag-26
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :nn42]],
      :where [:= :name ":http-call"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":http-call",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :where,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 6}},
   :icon "zmdi-http",
   :ports {:in {:req-map :map}, :out {:idx0 :map, :* :vector}}},
  :character
  {:y 700,
   :fn (fn [x] x),
   :w 175,
   :raw-fn (fn [value] value),
   :right-click? true,
   :icon "zmdi-functions",
   :z 0,
   :ports {:in {:value :any}, :out {:out :string}},
   :h 100,
   :x 950,
   :data
   {:flow-item
    {:description "Write you own Clojure function! Godspeed!",
     :category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:value :any, :out :any},
     :input_types "[:any]",
     :inputs "[:value]",
     :output_types ":any",
     :expandable? true,
     :full_map
     "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :h 6,
    :connection-id nil,
    :queries
    {:name-drag-25
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :ii11]],
      :where [:= :name ":open-fn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":open-fn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :open-fn,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}}}},
 :zoom [-251.86 -320.96 1.225],
 :opts nil,
 :flow-id "a-random-wow",
 :flowmaps-connections
 [[:http-call-1/idx0 :unpack-results-map/value]
  [:unpack-results-map/full_line :full-wow-line/value]
  [:open-input/* :http-call-1/req-map]
  [:unpack-results-map/character :character/value]
  [:unpack-results-map/movie :movie-name/value]
  [:rando-string :open-fn-5/value]
  [:unpack-results-map :unpack-results-map_poster/x]
  [:movie-name :done]
  [:unpack-results-map :unpack-results-map_video=480p/x]]}