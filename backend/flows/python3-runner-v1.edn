{:flowmaps
 {:shell-command-2
  {:w 200,
   :h 100,
   :x 2500,
   :y 1875,
   :z 0,
   :data
   {:flow-item
    {:description "Execute shell command. WARNING: only use if you know what you're doing / have controlled inputs",
     :category ":rabbit-base",
     :fn (fn [command] (rvbbit-backend.websockets/run-shell-command command)),
     :name ":shell-command",
     :icon "zmdi-washing-machine",
     :defaults {:command "ls -la"},
     :types {:command :string, :out :any},
     :input_types "[:string]",
     :style {:color "#ffdd3c"},
     :selected-style {:color "#ffdd3c"},
     :inputs "[:command]",
     :output_types ":any",
     :full_map
     "{:description \"Execute shell command. WARNING: only use if you know what you're doing / have controlled inputs\", :fn (fn [command] (rvbbit-backend.websockets/run-shell-command command)), :inputs [:command], :defaults {:command \"ls -la\"}, :style {:color \"#ffdd3c\"}, :selected-style {:color \"#ffdd3c\"}, :icon \"zmdi-washing-machine\", :types {:command :string, :out :any}}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :root [619.9114685058594 371.8880310058594],
    :h 6,
    :connection-id nil,
    :queries
    {:name-drag-40
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :xx536]],
      :where [:= :name ":shell-command"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":shell-command",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :where,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 4}},
   :icon "zmdi-washing-machine",
   :ports
   {:in {:command :string},
    :out
    {:output :vector,
     :exception :vector,
     :seconds :vector,
     :command :string,
     :* {:output ["Wed Jan  3 01:46:10 EST 2024"], :exception [], :seconds [], :command "date"}}}},
  :shell-command-1
  {:w 200,
   :h 100,
   :x 1850,
   :y 1600,
   :z 0,
   :data
   {:flow-item
    {:description "Execute shell command. WARNING: only use if you know what you're doing / have controlled inputs",
     :category ":rabbit-base",
     :fn (fn [command] (rvbbit-backend.websockets/run-shell-command command)),
     :name ":shell-command",
     :icon "zmdi-washing-machine",
     :defaults {:command "ls -la"},
     :types {:command :string, :out :any},
     :input_types "[:string]",
     :style {:color "#ffdd3c"},
     :selected-style {:color "#ffdd3c"},
     :inputs "[:command]",
     :output_types ":any",
     :full_map
     "{:description \"Execute shell command. WARNING: only use if you know what you're doing / have controlled inputs\", :fn (fn [command] (rvbbit-backend.websockets/run-shell-command command)), :inputs [:command], :defaults {:command \"ls -la\"}, :style {:color \"#ffdd3c\"}, :selected-style {:color \"#ffdd3c\"}, :icon \"zmdi-washing-machine\", :types {:command :string, :out :any}}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :root [644.0833435058594 212.05990600585938],
    :h 6,
    :connection-id nil,
    :queries
    {:name-drag-14
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :cc526]],
      :where [:= :name ":shell-command"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":shell-command",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :where,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 4}},
   :icon "zmdi-washing-machine",
   :ports
   {:in {:command :string},
    :out
    {:output :vector,
     :exception :vector,
     :seconds :vector,
     :command :string,
     :*
     {:output ["python3 ver installed  3.10.12 (main, Nov 20 2023, 15:14:05) [GCC 11.4.0]"],
      :exception [],
      :seconds [],
      :command "python3 /tmp/shit.py"}}}},
  :open-fn-1
  {:y 1000,
   :w 200,
   :raw-fn (fn [x] x),
   :icon "zmdi-functions",
   :z 0,
   :ports {:in {:value :any}, :out {:out :any}},
   :h 100,
   :x 2150,
   :data
   {:flow-item
    {:description "Write you own Clojure function! Godspeed!",
     :category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:value :any, :out :any},
     :input_types "[:any]",
     :inputs "[:value]",
     :output_types ":any",
     :expandable? true,
     :full_map
     "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}",
     :view (fn [_])},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :root [513.3619842529297 185.34896850585938],
    :h 6,
    :connection-id nil,
    :view-output? false,
    :queries
    {:name-drag-1
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :ee199]],
      :where [:= :name ":open-fn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":open-fn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :open-fn,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}}},
  :open-fn-2
  {:y 2025,
   :fn (fn [x] x),
   :w 200,
   :raw-fn (fn [x] (str "rand-int " (rand-int 123))),
   :right-click? true,
   :icon "zmdi-functions",
   :z 0,
   :ports {:in {:value-0 :any}, :out {:out :any}},
   :h 100,
   :x 2000,
   :data
   {:flow-item
    {:description "Write you own Clojure function! Godspeed!",
     :category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:value :any, :out :any},
     :input_types "[:any]",
     :inputs [:value-0],
     :output_types ":any",
     :expandable? true,
     :full_map
     "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :h 6,
    :connection-id nil,
    :queries
    {:name-drag-25
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :ii11]],
      :where [:= :name ":open-fn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":open-fn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :open-fn,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}}},
  :open-input-1
  {:w 275,
   :h 135,
   :data
   {:drag-meta {:type :open-block},
    :flow-item {:expandable? true, :inputs [:value-0]},
    :user-input ["import sys" "" "print(\"{{:value-0}}\", sys.version)" ""],
    :syntax "python",
    :width 350,
    :view-output? false},
   :z 0,
   :ports {:out {:out :any}, :in {:value-0 :any}},
   :x 2100,
   :y 1125},
  :open-input-3
  {:w 200,
   :h 110,
   :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input "python3"},
   :z 0,
   :ports {:out {:out :string}},
   :x 1650,
   :y 850},
  :write-file-1
  {:w 200,
   :h 100,
   :x 1950,
   :y 1300,
   :z 0,
   :data
   {:flow-item
    {:description "Write file content to the server. Useful in chaining together operations.",
     :category ":rabbit-base",
     :fn (fn [full-path file-data] (rvbbit-backend.websockets/write-local-file full-path file-data)),
     :name ":write-file",
     :icon "zmdi-file-text",
     :types {:full-path :string, :file-data :string, :out :string},
     :input_types "[:string :string]",
     :inputs "[:full-path :file-data]",
     :output_types ":string",
     :full_map
     "{:description \"Write file content to the server. Useful in chaining together operations.\", :fn (fn [full-path file-data] (rvbbit-backend.websockets/write-local-file full-path file-data)), :inputs [:full-path :file-data], :icon \"zmdi-file-text\", :types {:full-path :string, :file-data :string, :out :string}}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :root [1006.3619842529297 95.34896850585938],
    :h 6,
    :connection-id nil,
    :view-output? true,
    :queries
    {:name-drag-11
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :hh964]],
      :where [:= :name ":write-file"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":write-file",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :where,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 3}},
   :icon "zmdi-file-text",
   :ports
   {:in {:full-path :string, :file-data :string},
    :out {:status :keyword, :file-path :string, :* {:status :ok, :file-path "/tmp/shit.py"}}}},
  :clojure-string-join-2
  {:w 200,
   :h 100,
   :x 1925,
   :y 2275,
   :z 0,
   :data
   {:flow-item
    {:description "Clojure.string's join function.",
     :category ":clojure-base",
     :fn (fn [delimiter & args] (clojure.string/join delimiter args)),
     :name ":clojure-string-join",
     :icon "zmdi-group",
     :defaults {:delimiter " "},
     :types {:delimiter :string, :out :string},
     :input_types "[:string]",
     :inputs [:delimiter :value-1 :value-2 :value-3],
     :output_types ":string",
     :expandable? true,
     :full_map
     "{:description \"Clojure.string's join function.\", :fn (fn [delimiter & args] (clojure.string/join delimiter args)), :inputs [:delimiter], :required [:delimiter], :defaults {:delimiter \" \"}, :expandable? true, :icon \"zmdi-group\", :types {:delimiter :string, :out :string}}",
     :required [:delimiter]},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :root [1030.9114685058594 221.88803100585938],
    :h 6,
    :connection-id nil,
    :queries
    {:name-drag-3
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :ss930]],
      :where [:= :name ":clojure-string-join"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":clojure-string-join",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :where,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 22}},
   :icon "zmdi-group",
   :ports {:in {:delimiter :string, :value-1 :any, :value-2 :any, :value-3 :any}, :out {:out :string}}},
  :open-fn-6
  {:y 2050,
   :fn (fn [x] x),
   :w 200,
   :raw-fn (fn [x] (first x)),
   :right-click? true,
   :icon "zmdi-functions",
   :z 0,
   :ports {:in {:value :any}, :out {:idx0 :string, :* ["Wed Jan  3 01:18:14 EST 2024"]}},
   :h 100,
   :x 2525,
   :data
   {:flow-item
    {:description "Write you own Clojure function! Godspeed!",
     :category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:value :any, :out :any},
     :input_types "[:any]",
     :inputs "[:value]",
     :output_types ":any",
     :expandable? true,
     :full_map
     "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :h 6,
    :connection-id nil,
    :queries
    {:name-drag-25
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :ii11]],
      :where [:= :name ":open-fn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":open-fn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :open-fn,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}}},
  :open-input-5
  {:w 200,
   :h 110,
   :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input ", "},
   :z 0,
   :ports {:out {:out :string}},
   :x 1350,
   :y 1275},
  :open-input
  {:w 200,
   :h 110,
   :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input "python3 ver installed "},
   :z 0,
   :ports {:out {:out :string}},
   :x 2150,
   :y 850},
  :clojure-string-join-1
  {:w 245,
   :h 100,
   :x 1825,
   :y 1450,
   :z 0,
   :data
   {:flow-item
    {:description "Clojure.string's join function.",
     :category ":clojure-base",
     :fn (fn [delimiter & args] (clojure.string/join delimiter args)),
     :name ":clojure-string-join",
     :icon "zmdi-group",
     :defaults {:delimiter " "},
     :types {:delimiter :string, :out :string},
     :input_types "[:string]",
     :inputs [:delimiter :value-1 :value-2],
     :output_types ":string",
     :expandable? true,
     :full_map
     "{:description \"Clojure.string's join function.\", :fn (fn [delimiter & args] (clojure.string/join delimiter args)), :inputs [:delimiter], :required [:delimiter], :defaults {:delimiter \" \"}, :expandable? true, :icon \"zmdi-group\", :types {:delimiter :string, :out :string}}",
     :required [:delimiter]},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :root [740 342],
    :h 6,
    :connection-id nil,
    :queries
    {:name-drag-35
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :bb736]],
      :where [:= :name ":clojure-string-join"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":clojure-string-join",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :where,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 22}},
   :icon "zmdi-group",
   :ports {:in {:delimiter :string, :value-1 :any, :value-2 :any}, :out {:out :string}}},
  :open-input-4
  {:w 200,
   :h 100,
   :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input "date"},
   :z 0,
   :ports {:out {:out :string}},
   :x 2500,
   :y 1700},
  :open-fn-3
  {:y 1775,
   :fn (fn [x] x),
   :w 200,
   :raw-fn (fn [x] x),
   :right-click? true,
   :icon "zmdi-functions",
   :z 0,
   :ports
   {:in {:value-1 :any},
    :out
    {:output :vector,
     :exception :vector,
     :seconds :vector,
     :command :string,
     :*
     {:output ["python3 ver installed  3.10.12 (main, Nov 20 2023, 15:14:05) [GCC 11.4.0]"],
      :exception [],
      :seconds [],
      :command "python3 /tmp/shit.py"}}},
   :h 100,
   :x 1800,
   :data
   {:flow-item
    {:description "Write you own Clojure function! Godspeed!",
     :category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:value :any, :out :any},
     :input_types "[:any]",
     :inputs [:value-1],
     :output_types ":any",
     :expandable? true,
     :full_map
     "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :h 6,
    :connection-id nil,
    :queries
    {:name-drag-25
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :ii11]],
      :where [:= :name ":open-fn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":open-fn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :open-fn,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}}},
  :open-fn-4
  {:y 1775,
   :fn (fn [x] x),
   :w 200,
   :raw-fn (fn [x] x),
   :right-click? true,
   :icon "zmdi-functions",
   :z 0,
   :ports
   {:in {:value :any},
    :out {:idx0 :string, :* ["python3 ver installed  3.10.12 (main, Nov 20 2023, 15:14:05) [GCC 11.4.0]"]}},
   :h 100,
   :x 2050,
   :data
   {:flow-item
    {:description "Write you own Clojure function! Godspeed!",
     :category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:value :any, :out :any},
     :input_types "[:any]",
     :inputs "[:value]",
     :output_types ":any",
     :expandable? true,
     :full_map
     "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :h 6,
    :connection-id nil,
    :view-output? false,
    :queries
    {:name-drag-25
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :ii11]],
      :where [:= :name ":open-fn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":open-fn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :open-fn,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}}},
  :open-fn-5
  {:y 2000,
   :fn (fn [x] x),
   :w 200,
   :raw-fn (fn [x] x),
   :right-click? true,
   :icon "zmdi-functions",
   :z 0,
   :ports {:in {:value :any}, :out {:out :any}},
   :h 100,
   :x 2250,
   :data
   {:flow-item
    {:description "Write you own Clojure function! Godspeed!",
     :category ":rabbit-base",
     :fn (fn [x] x),
     :name ":open-fn",
     :raw-fn (fn [x] x),
     :type :open-fn,
     :icon "zmdi-functions",
     :types {:value :any, :out :any},
     :input_types "[:any]",
     :inputs "[:value]",
     :output_types ":any",
     :expandable? true,
     :full_map
     "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
    :name "drag-from-",
    :w 5,
    :source-panel :flow-fn-list*,
    :h 6,
    :connection-id nil,
    :queries
    {:name-drag-25
     {:select [:name :full_map :description :inputs :icon :input_types :output_types :category],
      :from [[:query/flow-fn-sys :ii11]],
      :where [:= :name ":open-fn"]}},
    :drag-meta
    {:data-type "string",
     :source-query :flow-fn-sys,
     :param-full ":open-fn",
     :param-field :name,
     :source-panel-key :flow-fn-list*,
     :type :open-fn,
     :param-table :flow-fn-sys,
     :source-table :query/flow-fn-sys,
     :connection-id nil,
     :target :name,
     :row-num 5}}},
  :open-input-2
  {:w 200,
   :h 110,
   :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input "/tmp/shit.py", :view-output? false},
   :z 0,
   :ports {:out {:out :string}},
   :x 1900,
   :y 850}},
 :zoom [-501.88 -661.13 0.925],
 :opts nil,
 :flow-id "python3-runner-v1",
 :flowmaps-connections
 [[:open-input :open-fn-1/value]
  [:open-fn-1 :open-input-1/value-0]
  [:open-input-2 :write-file-1/full-path]
  [:open-input-1 :write-file-1/file-data]
  [:shell-command-1/* :open-fn-3/value-1]
  [:shell-command-1/output :open-fn-4/value]
  [:open-fn-4/idx0 :open-fn-5/value]
  [:clojure-string-join-1 :shell-command-1/command]
  [:open-input-3 :clojure-string-join-1/value-1]
  [:write-file-1/file-path :clojure-string-join-1/value-2]
  [:open-fn-4/idx0 :open-fn-2/value-0]
  [:open-input-4 :shell-command-2/command]
  [:shell-command-2/output :open-fn-6/value]
  [:open-fn-2 :clojure-string-join-2/value-1]
  [:open-fn-5 :clojure-string-join-2/value-2]
  [:open-fn-6/* :clojure-string-join-2/value-3]
  [:clojure-string-join-2 :done]
  [:open-input-5 :clojure-string-join-2/delimiter]]}