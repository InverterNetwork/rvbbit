{:orders
 {:flow-fn-sys
  [:name
   :full_map
   :description
   :inputs
   :icon
   :input_types
   :output_types
   :category],
  :fields-sys [:field_name :field_type :data_type],
  :tables-sys
  [:db_schema
   :db_catalog
   :connection_id
   :schema_cat
   :table_name
   :fields],
  :flows-sys [:flow_id :file_path :last_modified],
  :flow-fn-categories-sys [:category],
  :connections-sys [:database_name :connection_id],
  :reco-counts [:table_name :cnt],
  :kit-results-sys
  [:id
   :item_hash
   :item_name
   :kit_name
   :item_type
   :item_key
   :item_idx
   :item_options
   :item_data
   :client_name
   :flow_id
   :updated],
  :flow-fn-all-sys [:name]},
 :reco-preview nil,
 :flow? false,
 :sql-source {},
 :selected-flow-block nil,
 :meta
 {:flow-fn-sys
  {:fields
   {:name
    {:data-type "string",
     :distinct 29,
     :group-by? true,
     :commons {":=" 1, ":>=" 1, ":write-file" 1},
     :cardinality 100},
    :full_map
    {:data-type "string",
     :distinct 29,
     :group-by? true,
     :commons
     {"{:file-path \"./flows/a-random-wow.edn\", :icon \"zmdi-pizza\", :description \"A random Owen Wilson quote from the Wedding Crashers movie.\"}"
      1,
      "{:description \"Clojure greater-than-or-equal function.\", :fn >, :inputs [:value1 :value2], :icon \"zmdi-chevron-right\", :types {:value1 [:integer :float], :value2 [:integer :float], :out :boolean}}"
      1,
      "{:description \"Clojure subtract function.\", :fn =, :inputs [:value1 :value2], :icon \"zmdi-swap\", :types {:value1 :any, :value2 :any, :out :boolean}}"
      1},
     :cardinality 100},
    :description
    {:data-type "string",
     :distinct 28,
     :group-by? true,
     :commons
     {"Clojure subtract function." 2,
      "Get top 50 color frequencies from an image in hex form." 1,
      "Clojure.string's join function." 1},
     :cardinality 96},
    :inputs
    {:data-type "string",
     :distinct 16,
     :group-by? true,
     :commons {"[:value1 :value2]" 8, "[:value]" 6, "" 2},
     :cardinality 55},
    :icon
    {:data-type "string",
     :distinct 18,
     :group-by? true,
     :commons {"zmdi-pizza" 4, "zmdi-file-text" 3, "zmdi-dns" 2},
     :cardinality 62},
    :input_types
    {:data-type "string",
     :distinct 14,
     :group-by? true,
     :commons
     {"[[:integer :float] [:integer :float]]" 7,
      "[:string]" 5,
      "[:any]" 3},
     :cardinality 48},
    :output_types
    {:data-type "string",
     :distinct 8,
     :group-by? true,
     :commons {":boolean" 11, ":any" 6, ":string" 4},
     :cardinality 27},
    :category
    {:data-type "string",
     :distinct 3,
     :group-by? true,
     :commons
     {":clojure-base" 16, ":rabbit-base" 12, ":owen-wilson" 1},
     :cardinality 10}},
   :rowcount 29},
  :fields-sys
  {:fields
   {:field_name
    {:data-type "string",
     :distinct 13,
     :group-by? true,
     :commons {"state" 1, "comments" 1, "datetime" 1},
     :cardinality 100},
    :field_type
    {:data-type "string",
     :distinct 10,
     :group-by? true,
     :commons {"DECIMAL" 2, "VARCHAR(9)" 2, "VARCHAR(2)" 2},
     :cardinality 76},
    :data_type
    {:data-type "string",
     :distinct 5,
     :group-by? true,
     :commons {"string" 8, "float" 2, "integer" 1},
     :cardinality 38}},
   :rowcount 13},
  :tables-sys
  {:fields
   {:db_schema
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {"none" 9},
     :cardinality 11},
    :db_catalog
    {:data-type "unknown",
     :distinct 1,
     :group-by? true,
     :commons {nil 9},
     :cardinality 11},
    :connection_id
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {"bigfoot-ufos" 9},
     :cardinality 11},
    :schema_cat
    {:data-type "unknown",
     :distinct 1,
     :group-by? false,
     :commons {nil 9},
     :cardinality 11},
    :table_name
    {:data-type "string",
     :distinct 9,
     :group-by? true,
     :commons {"us_states" 1, "ufo_sightings_vw" 1, "test_me" 1},
     :cardinality 100},
    :fields
    {:data-type "integer",
     :distinct 9,
     :group-by? false,
     :commons {42 1, 14 1, 11 1},
     :cardinality 100}},
   :rowcount 9},
  :flows-sys
  {:fields
   {:flow_id
    {:data-type "string",
     :distinct 53,
     :group-by? true,
     :commons {"clam-flow-851" 3, "map-pull-test2" 1, "callie-3" 1},
     :cardinality 96},
    :file_path
    {:data-type "string",
     :distinct 55,
     :group-by? true,
     :commons
     {"./flows/hey-rabbit-pathfinder.edn" 1,
      "./flows/dalle3-create-image-newengland-old.edn" 1,
      "./flows/hue-change-group-color.edn" 1},
     :cardinality 100},
    :last_modified
    {:data-type "string",
     :distinct 55,
     :group-by? true,
     :commons
     {"2023-12-31 20:10:21" 1,
      "2024-01-24 13:20:30" 1,
      "2024-01-06 18:53:33" 1},
     :cardinality 100}},
   :rowcount 55},
  :flow-fn-categories-sys
  {:fields
   {:category
    {:data-type "string",
     :distinct 3,
     :group-by? true,
     :commons {":rabbit-base" 1, ":owen-wilson" 1, ":clojure-base" 1},
     :cardinality 100}},
   :rowcount 3},
  :connections-sys
  {:fields
   {:database_name
    {:data-type "string",
     :distinct 3,
     :group-by? true,
     :commons {"*cache-db*" 5, "SQLite" 4, "*csv-import-db*" 1},
     :cardinality 30},
    :connection_id
    {:data-type "string",
     :distinct 10,
     :group-by? true,
     :commons {"imported" 1, "bigfoot-ufos" 1, "snifftmp1" 1},
     :cardinality 100}},
   :rowcount 10},
  :reco-counts {:fields {}, :rowcount 0},
  :kit-results-sys {:fields {}, :rowcount 0},
  :flow-fn-all-sys
  {:fields
   {:name
    {:data-type "string",
     :distinct 29,
     :group-by? true,
     :commons {":=" 1, ":>=" 1, ":write-file" 1},
     :cardinality 100}},
   :rowcount 29}},
 :default-col-widths
 {:system-connections-list* {:connections-sys 111},
  :system-tables-list* {:tables-sys 137},
  :system-fields-list* {:fields-sys 170},
  :flow-list* {:flows-sys 187}},
 :data-hash -840447778,
 :tabs ["strategic grill locations"],
 :selected-cols nil,
 :server
 {:settings
  {:harvest-on-boot? true,
   :default "./screens/winter-theme.edn",
   :eleven-labs-api-key nil,
   :kits
   {:buffy
    {:author
     {:name "Ryan Robitaille",
      :email "ryan.robitaille@gmail.com",
      :x "@ryrobes",
      :site "https://ryrob.es/"},
     :kit-name :buffy,
     :package-name :grab-bag,
     :fn (rvbbit-backend.assistants/buffy :query-name),
     :name "Ask Buffy!",
     :icon "zmdi-cocktail",
     :run-on :queries,
     :description "What does Buffy think about this data? Who knows!"},
    :outliers
    {:description
     "A basic multivariate outlier detection runstream. Highlight outliers in various dimensional groupings as a launch pad for further exploration.",
     :image-url "images/outliers-image.png",
     :fn
     (rabbit-kit-outliers.core/get-outliers
       :query-name
       :panel-name
       :query),
     :name "Outliers",
     :icon "zmdi-functions",
     :author
     {:name "Ryan Robitaille",
      :email "ryan.robitaille@gmail.com",
      :x "@ryrobes",
      :site "https://ryrob.es/"},
     :run-on :queries,
     :repl {:host "127.0.0.1", :port 42999},
     :kit-name :outliers,
     :package-name :query-basics-1},
    :forecast
    {:description
     "WIP: basic timeseries forecasting based on previous values",
     :fn
     (rabbit-kit-outliers.core/get-forecast
       :query-name
       :panel-name
       :query),
     :name "Forecasting",
     :icon "zmdi-brightness-7",
     :author
     {:name "Ryan Robitaille",
      :email "ryan.robitaille@gmail.com",
      :x "@ryrobes",
      :site "https://ryrob.es/"},
     :run-on :queries,
     :repl {:host "127.0.0.1", :port 42999},
     :kit-name :forecast,
     :package-name :query-basics-1}},
   :graphite-host "127.0.0.1",
   :openapi-org-id nil,
   :debug-level 1,
   :screens
   ["GGGeat-ochre-mole-exiled-from-abyssal-plain"
    "SSSSSSuccessful-oval-sea-urchin-of-mountain-range"
    "SSuccessful-oval-sea-urchin-of-mountain-range"
    "aaa-run-amok"
    "asdasdasdasd"
    "autumn-theme"
    "bigfoot-snapshots"
    "bigfoot-snapshots2"
    "bigfoot-snapshots3"
    "blank-sizzle"
    "blank-sizzle2"
    "boston-test-10-3-23"
    "bunch of bullshit"
    "bunch of bullshit2"
    "bunch of bullshit4"
    "caliope"
    "calliope"
    "canvas-scrubber-test1"
    "chaos simple"
    "chaos-views"
    "clean-grey-defaults"
    "code-data-literal-stonks-test"
    "crazy-alice"
    "dark-crested-jackelope"
    "data-literals-test-sunday"
    "data-literals-test-sundaydd"
    "demo-dark-pumpkin-bkgrd-sept23"
    "demo-light-bkgrd-sept23"
    "demo-lime-green-slime"
    "desktops-and-broomsticks"
    "error-monitor"
    "error-monitor-vanessa"
    "error-monitor-vanessa2"
    "fake-books-1"
    "fetching-pentagonal-termite-of-tghe-submarine-canyon"
    "glass-fish-board-test"
    "hue-board-1"
    "late-winter-theme"
    "layout-test-1"
    "layout-test-12"
    "light-theme"
    "literal-data-test"
    "luck-of-the-irish"
    "mapbox-test"
    "night-city-never-sleeps"
    "nivo-getting-better!"
    "nivo-hacking-2023"
    "nivo-hacking-2023333"
    "nivo-hacking-october-2nd"
    "old-defaults"
    "poor-touring-me"
    "pres-sql-test-1"
    "recharts-test-blocks"
    "refresh-test"
    "riffle-test"
    "sizzle-board-1"
    "sneaky-swamp-creatures1"
    "swamp-nightgown"
    "swamp-reacher"
    "tallica-param-test2"
    "the-future-soon"
    "the-generated-lass"
    "the-generated-lass-glow"
    "the-generated-lass-ne"
    "tweet-bigfoot-is-blurry"
    "tweet-demo-thing-bigfoot-is-blurry"
    "unnamed-screen!"
    "weave-test"
    "weave-test1"
    "weave-test122"
    "who ya gonna call?"
    "who ya gonna call? again"
    "winter-theme"
    "winter-theme-choom"
    "winter-theme2"
    "winter-theme33"
    "winter-theme45"
    "winter-theme47"
    "wow-board"],
   :openapi-key
   "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"}},
 :runstreams
 {"dalle3-create-image3" {:open? false},
  "a-random-wow" {:open? false},
  "hue-lights-api" {:open? false},
  "node-color-thief-js" {:open? true}},
 :editor? false,
 :buffy? true,
 :status-data
 {:heartbeat
  {:kick
   {:data
    [{:sent! :heartbeat,
      :to :all,
      :at "2024-01-28 16:00:37",
      :payload nil,
      :payload-kp [:heartbeat :heartbeat]}
     nil],
    :elapsed-ms nil,
    :reco-count nil}},
  "kick-test!"
  {:kick
   {:data
    [{:sent! "kick-test!",
      :to :genius-desert-jay-hailing-from-glen,
      :at "2024-01-28 16:00:55",
      :payload
      {:query-log
       {:data
        [{:content ["2024-01-28 16:00:55 - query ran in 15 ms."],
          :name "query-log-:flows-sys",
          :order 1706475655,
          :parameters {},
          :forced-mutates {},
          :step-mutates {}}],
        :description "query-log-:flows-sys",
        :mutates {},
        :options {:actions? false, :pages? false, :search? false},
        :parameters {}}},
      :payload-kp [:flows-sys "kick-test!"]}
     nil],
    :elapsed-ms nil,
    :reco-count nil}}},
 :re-pressed.core/keydown
 {:keys
  [{:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey false,
    :keyCode 32}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey false,
    :keyCode 27}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey false,
    :keyCode 27}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey true,
    :keyCode 32}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey false,
    :keyCode 32}
   {:altKey false,
    :ctrlKey true,
    :metaKey false,
    :shiftKey false,
    :keyCode 32}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey false,
    :keyCode 27}
   {:altKey false,
    :ctrlKey true,
    :metaKey false,
    :shiftKey false,
    :keyCode 32}
   {:altKey false,
    :ctrlKey true,
    :metaKey false,
    :shiftKey false,
    :keyCode 32}
   {:altKey false,
    :ctrlKey true,
    :metaKey false,
    :shiftKey false,
    :keyCode 32}],
  :event-keys
  [[[:viz-yard.bricks/esc-unselect-current] [{:keyCode 27}]]
   [[:viz-yard.bricks/redo-one]
    [{:keyCode 90, :ctrlKey true, :shiftKey true}]]
   [[:viz-yard.bricks/undo-one]
    [{:keyCode 90, :ctrlKey true, :shiftKey false}]]
   [[:viz-yard.bricks/toggle-buffy]
    [{:keyCode 32, :shiftKey true, :ctrlKey false}]]
   [[:viz-yard.bricks/toggle-editor]
    [{:keyCode 32, :shiftKey false, :ctrlKey false}]]
   [[:viz-yard.bricks/toggle-flow]
    [{:keyCode 32, :shiftKey false, :ctrlKey true}]]
   [[:viz-yard.bricks/next-panel] [{:keyCode 9}]]
   [[:viz-yard.bricks/toggle-kick-alert] [{:keyCode 75}]]
   [[:viz-yard.bricks/toggle-peek] [{:keyCode 80}]]
   [[:viz-yard.bricks/toggle-lines] [{:keyCode 76}]]
   [[:viz-yard.bricks/toggle-auto-run] [{:keyCode 79}]]
   [[:viz-yard.bricks/delete-selected-panel]
    [{:keyCode 46, :shiftKey true}]]
   [[:viz-yard.bricks/cycle-column-select false] [{:keyCode 81}]]
   [[:viz-yard.bricks/cycle-column-select true] [{:keyCode 69}]]
   [[:viz-yard.audio/start-recording] [{:keyCode 84}]]
   [[:viz-yard.audio/stop-recording] [{:keyCode 89}]]
   [[:viz-yard.bricks/stretch-panel :wider]
    [{:keyCode 68, :shiftKey true}]]
   [[:viz-yard.bricks/stretch-panel :longer]
    [{:keyCode 83, :shiftKey true}]]
   [[:viz-yard.bricks/stretch-panel :narrower]
    [{:keyCode 65, :shiftKey true}]]
   [[:viz-yard.bricks/stretch-panel :shorter]
    [{:keyCode 87, :shiftKey true}]]
   [[:viz-yard.bricks/panel-depth-up] [{:keyCode 82, :shiftKey true}]]
   [[:viz-yard.bricks/panel-depth-down]
    [{:keyCode 70, :shiftKey true}]]
   [[:viz-yard.bricks/nudge-panel :up] [{:keyCode 87}]]
   [[:viz-yard.bricks/nudge-panel :down] [{:keyCode 83}]]
   [[:viz-yard.bricks/nudge-panel :left] [{:keyCode 65}]]
   [[:viz-yard.bricks/nudge-panel :right] [{:keyCode 68}]]],
  :clear-keys nil,
  :always-listen-keys nil,
  :prevent-default-keys
  [{:keyCode 32}
   {:keyCode 46, :shiftKey true}
   {:keyCode 83, :ctrlKey true}
   {:keyCode 9}
   {:keyCode 70, :ctrlKey true}]},
 :flow-subs
 [:flow/hey-rabbit-pathfinder>*running?
  :flow/dalle3-create-image3>*running?
  :flow/a-random-wow>*running?
  :flow/hue-lights-api>*running?
  :flow/node-color-thief-js>*running?],
 :client-name :genius-desert-jay-hailing-from-glen,
 :flows
 {"hey-rabbit-sql-helper"
  {:map
   {:open-input
    {:w 200,
     :h 100,
     :data
     {:drag-meta {:type :open-block},
      :flow-item {:expandable? true},
      :user-input "feed me, seymour!"},
     :z 0,
     :ports {:in {}, :out {:out :string}},
     :x 1151.3513513513512,
     :y 1138.3783783783783},
    :open-input-1
    {:w 200,
     :h 100,
     :data
     {:drag-meta {:type :open-block},
      :flow-item {:expandable? true},
      :user-input "feed me, seymour!"},
     :z 0,
     :ports {:in {}, :out {:out :string}},
     :x 1481.081081081081,
     :y 1051.3513513513512},
    :open-fn-1
    {:y 923.7837837837837,
     :fn (fn [x] x),
     :w 200,
     :raw-fn (fn [x] x),
     :right-click? true,
     :icon "zmdi-functions",
     :z 0,
     :ports {:in {:value :any}, :out {:out :any}},
     :h 100,
     :x 837.8378378378378,
     :data
     {:flow-item
      {:description "Write you own Clojure function! Godspeed!",
       :category ":rabbit-base",
       :fn (fn [x] x),
       :name ":open-fn",
       :raw-fn (fn [x] x),
       :type :open-fn,
       :icon "zmdi-functions",
       :types {:value :any, :out :any},
       :input_types "[:any]",
       :inputs "[:value]",
       :output_types ":any",
       :expandable? true,
       :full_map
       "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
      :name "drag-from-",
      :w 5,
      :source-panel :flow-fn-list*,
      :h 6,
      :connection-id nil,
      :queries
      {:name-drag-25
       {:select
        [:name
         :full_map
         :description
         :inputs
         :icon
         :input_types
         :output_types
         :category],
        :from [[:query/flow-fn-sys :ii11]],
        :where [:= :name ":open-fn"]}},
      :drag-meta
      {:data-type "string",
       :source-query :flow-fn-sys,
       :param-full ":open-fn",
       :param-field :name,
       :source-panel-key :flow-fn-list*,
       :type :open-fn,
       :param-table :flow-fn-sys,
       :source-table :query/flow-fn-sys,
       :connection-id nil,
       :target :name,
       :row-num 5}}},
    :open-fn-2
    {:y 1127.027027027027,
     :fn (fn [x] x),
     :w 200,
     :raw-fn (fn [x] x),
     :right-click? true,
     :icon "zmdi-functions",
     :z 0,
     :ports {:in {:value :any}, :out {:out :any}},
     :h 100,
     :x 797.8378378378378,
     :data
     {:flow-item
      {:description "Write you own Clojure function! Godspeed!",
       :category ":rabbit-base",
       :fn (fn [x] x),
       :name ":open-fn",
       :raw-fn (fn [x] x),
       :type :open-fn,
       :icon "zmdi-functions",
       :types {:value :any, :out :any},
       :input_types "[:any]",
       :inputs "[:value]",
       :output_types ":any",
       :expandable? true,
       :full_map
       "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
      :name "drag-from-",
      :w 5,
      :source-panel :flow-fn-list*,
      :h 6,
      :connection-id nil,
      :queries
      {:name-drag-25
       {:select
        [:name
         :full_map
         :description
         :inputs
         :icon
         :input_types
         :output_types
         :category],
        :from [[:query/flow-fn-sys :ii11]],
        :where [:= :name ":open-fn"]}},
      :drag-meta
      {:data-type "string",
       :source-query :flow-fn-sys,
       :param-full ":open-fn",
       :param-field :name,
       :source-panel-key :flow-fn-list*,
       :type :open-fn,
       :param-table :flow-fn-sys,
       :source-table :query/flow-fn-sys,
       :connection-id nil,
       :target :name,
       :row-num 5}}},
    :open-fn-3
    {:y 961.6216216216216,
     :fn (fn [x] x),
     :w 200,
     :raw-fn (fn [x] x),
     :right-click? true,
     :icon "zmdi-functions",
     :z 0,
     :ports {:in {:value :any}, :out {:out :any}},
     :h 100,
     :x 1115.6756756756756,
     :data
     {:flow-item
      {:description "Write you own Clojure function! Godspeed!",
       :category ":rabbit-base",
       :fn (fn [x] x),
       :name ":open-fn",
       :raw-fn (fn [x] x),
       :type :open-fn,
       :icon "zmdi-functions",
       :types {:value :any, :out :any},
       :input_types "[:any]",
       :inputs "[:value]",
       :output_types ":any",
       :expandable? true,
       :full_map
       "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
      :name "drag-from-",
      :w 5,
      :source-panel :flow-fn-list*,
      :h 6,
      :connection-id nil,
      :queries
      {:name-drag-25
       {:select
        [:name
         :full_map
         :description
         :inputs
         :icon
         :input_types
         :output_types
         :category],
        :from [[:query/flow-fn-sys :ii11]],
        :where [:= :name ":open-fn"]}},
      :drag-meta
      {:data-type "string",
       :source-query :flow-fn-sys,
       :param-full ":open-fn",
       :param-field :name,
       :source-panel-key :flow-fn-list*,
       :type :open-fn,
       :param-table :flow-fn-sys,
       :source-table :query/flow-fn-sys,
       :connection-id nil,
       :target :name,
       :row-num 5}}},
    :open-fn-4
    {:y 875.1351351351351,
     :fn (fn [x] x),
     :w 200,
     :raw-fn (fn [x] x),
     :right-click? true,
     :icon "zmdi-functions",
     :z 0,
     :ports {:in {:value :any}, :out {:out :any}},
     :h 100,
     :x 1422.7027027027025,
     :data
     {:flow-item
      {:description "Write you own Clojure function! Godspeed!",
       :category ":rabbit-base",
       :fn (fn [x] x),
       :name ":open-fn",
       :raw-fn (fn [x] x),
       :type :open-fn,
       :icon "zmdi-functions",
       :types {:value :any, :out :any},
       :input_types "[:any]",
       :inputs "[:value]",
       :output_types ":any",
       :expandable? true,
       :full_map
       "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
      :name "drag-from-",
      :w 5,
      :source-panel :flow-fn-list*,
      :h 6,
      :connection-id nil,
      :queries
      {:name-drag-25
       {:select
        [:name
         :full_map
         :description
         :inputs
         :icon
         :input_types
         :output_types
         :category],
        :from [[:query/flow-fn-sys :ii11]],
        :where [:= :name ":open-fn"]}},
      :drag-meta
      {:data-type "string",
       :source-query :flow-fn-sys,
       :param-full ":open-fn",
       :param-field :name,
       :source-panel-key :flow-fn-list*,
       :type :open-fn,
       :param-table :flow-fn-sys,
       :source-table :query/flow-fn-sys,
       :connection-id nil,
       :target :name,
       :row-num 5}}}}},
  "hey-rabbit-pathfinder"
  {:map
   {:voice-input
    {:w 200,
     :h 100,
     :data
     {:drag-meta {:type :open-block},
      :flow-item {:expandable? true},
      :user-input "..."},
     :z 0,
     :ports {:in {}, :out {:out :string}},
     :x 1151.3513513513512,
     :y 1138.3783783783783},
    :user-contexts
    {:w 200,
     :h 100,
     :data
     {:drag-meta {:type :open-block},
      :flow-item {:expandable? true},
      :user-input :session-state},
     :z 0,
     :ports {:in {}, :out {:out :string}},
     :x 1481.081081081081,
     :y 1051.3513513513512},
    :open-fn-1
    {:y 923.7837837837837,
     :fn (fn [x] x),
     :w 200,
     :raw-fn (fn [x] x),
     :right-click? true,
     :icon "zmdi-functions",
     :z 0,
     :ports {:in {:value :any}, :out {:out :any}},
     :h 100,
     :x 837.8378378378378,
     :data
     {:flow-item
      {:description "Write you own Clojure function! Godspeed!",
       :category ":rabbit-base",
       :fn (fn [x] x),
       :name ":open-fn",
       :raw-fn (fn [x] x),
       :type :open-fn,
       :icon "zmdi-functions",
       :types {:value :any, :out :any},
       :input_types "[:any]",
       :inputs "[:value]",
       :output_types ":any",
       :expandable? true,
       :full_map
       "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
      :name "drag-from-",
      :w 5,
      :source-panel :flow-fn-list*,
      :h 6,
      :connection-id nil,
      :queries
      {:name-drag-25
       {:select
        [:name
         :full_map
         :description
         :inputs
         :icon
         :input_types
         :output_types
         :category],
        :from [[:query/flow-fn-sys :ii11]],
        :where [:= :name ":open-fn"]}},
      :drag-meta
      {:data-type "string",
       :source-query :flow-fn-sys,
       :param-full ":open-fn",
       :param-field :name,
       :source-panel-key :flow-fn-list*,
       :type :open-fn,
       :param-table :flow-fn-sys,
       :source-table :query/flow-fn-sys,
       :connection-id nil,
       :target :name,
       :row-num 5}}},
    :open-fn-2
    {:y 1127.027027027027,
     :fn (fn [x] x),
     :w 200,
     :raw-fn (fn [x] x),
     :right-click? true,
     :icon "zmdi-functions",
     :z 0,
     :ports {:in {:value :any}, :out {:out :any}},
     :h 100,
     :x 797.8378378378378,
     :data
     {:flow-item
      {:description "Write you own Clojure function! Godspeed!",
       :category ":rabbit-base",
       :fn (fn [x] x),
       :name ":open-fn",
       :raw-fn (fn [x] x),
       :type :open-fn,
       :icon "zmdi-functions",
       :types {:value :any, :out :any},
       :input_types "[:any]",
       :inputs "[:value]",
       :output_types ":any",
       :expandable? true,
       :full_map
       "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
      :name "drag-from-",
      :w 5,
      :source-panel :flow-fn-list*,
      :h 6,
      :connection-id nil,
      :queries
      {:name-drag-25
       {:select
        [:name
         :full_map
         :description
         :inputs
         :icon
         :input_types
         :output_types
         :category],
        :from [[:query/flow-fn-sys :ii11]],
        :where [:= :name ":open-fn"]}},
      :drag-meta
      {:data-type "string",
       :source-query :flow-fn-sys,
       :param-full ":open-fn",
       :param-field :name,
       :source-panel-key :flow-fn-list*,
       :type :open-fn,
       :param-table :flow-fn-sys,
       :source-table :query/flow-fn-sys,
       :connection-id nil,
       :target :name,
       :row-num 5}}},
    :open-fn-3
    {:y 961.6216216216216,
     :fn (fn [x] x),
     :w 200,
     :raw-fn (fn [x] x),
     :right-click? true,
     :icon "zmdi-functions",
     :z 0,
     :ports {:in {:value :any}, :out {:out :any}},
     :h 100,
     :x 1115.6756756756756,
     :data
     {:flow-item
      {:description "Write you own Clojure function! Godspeed!",
       :category ":rabbit-base",
       :fn (fn [x] x),
       :name ":open-fn",
       :raw-fn (fn [x] x),
       :type :open-fn,
       :icon "zmdi-functions",
       :types {:value :any, :out :any},
       :input_types "[:any]",
       :inputs "[:value]",
       :output_types ":any",
       :expandable? true,
       :full_map
       "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
      :name "drag-from-",
      :w 5,
      :source-panel :flow-fn-list*,
      :h 6,
      :connection-id nil,
      :queries
      {:name-drag-25
       {:select
        [:name
         :full_map
         :description
         :inputs
         :icon
         :input_types
         :output_types
         :category],
        :from [[:query/flow-fn-sys :ii11]],
        :where [:= :name ":open-fn"]}},
      :drag-meta
      {:data-type "string",
       :source-query :flow-fn-sys,
       :param-full ":open-fn",
       :param-field :name,
       :source-panel-key :flow-fn-list*,
       :type :open-fn,
       :param-table :flow-fn-sys,
       :source-table :query/flow-fn-sys,
       :connection-id nil,
       :target :name,
       :row-num 5}}},
    :open-fn-4
    {:y 875.1351351351351,
     :fn (fn [x] x),
     :w 200,
     :raw-fn (fn [x] x),
     :right-click? true,
     :icon "zmdi-functions",
     :z 0,
     :ports {:in {:value :any}, :out {:out :any}},
     :h 100,
     :x 1422.7027027027025,
     :data
     {:flow-item
      {:description "Write you own Clojure function! Godspeed!",
       :category ":rabbit-base",
       :fn (fn [x] x),
       :name ":open-fn",
       :raw-fn (fn [x] x),
       :type :open-fn,
       :icon "zmdi-functions",
       :types {:value :any, :out :any},
       :input_types "[:any]",
       :inputs "[:value]",
       :output_types ":any",
       :expandable? true,
       :full_map
       "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
      :name "drag-from-",
      :w 5,
      :source-panel :flow-fn-list*,
      :h 6,
      :connection-id nil,
      :queries
      {:name-drag-25
       {:select
        [:name
         :full_map
         :description
         :inputs
         :icon
         :input_types
         :output_types
         :category],
        :from [[:query/flow-fn-sys :ii11]],
        :where [:= :name ":open-fn"]}},
      :drag-meta
      {:data-type "string",
       :source-query :flow-fn-sys,
       :param-full ":open-fn",
       :param-field :name,
       :source-panel-key :flow-fn-list*,
       :type :open-fn,
       :param-table :flow-fn-sys,
       :source-table :query/flow-fn-sys,
       :connection-id nil,
       :target :name,
       :row-num 5}}}},
   :connections []}},
 :runstreams-lookups
 {"dalle3-create-image3"
  {:open-inputs
   {:in-prompt
    {:user-input
     "a beautiful woman, of irish descent, standing in a dystopian cyberpunk world. dark and moody with neon pinks and blues, smoky ambiance, close up looking at the camera. long hair. high quality, highly detailed, intricate neck tattoos. gritty and atmospheric.",
     :defaults {},
     :type :string},
    :quality {:user-input "hd", :defaults {}, :type :string},
    :headers-map
    {:user-input
     {"Authorization"
      "Bearer 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",
      "Content-Type" "application/json"},
     :defaults {},
     :type :map},
    :url-str
    {:user-input "https://api.openai.com/v1/images/generations",
     :defaults {},
     :type :string}},
   :blocks
   {:open-fn-7
    {:type {:out :any}, :last? false, :sample "no sample data"},
    :shell-command-1
    {:type
     {:output :vector,
      :exception :vector,
      :seconds :vector,
      :command :string,
      :* :map},
     :last? false,
     :sample "no sample data"},
    :open-fn-1
    {:type
     {:headers :map,
      :method :keyword,
      :url :string,
      :body :map,
      :* :map},
     :last? false,
     :sample "no sample data"},
    :open-fn-2
    {:type {:idx0 :map, :* :vector},
     :last? false,
     :sample "no sample data"},
    :in-prompt
    {:type {:out :string}, :last? false, :sample "no sample data"},
    :open-fn-6
    {:type {:out :any}, :last? true, :sample "no sample data"},
    :open-input
    {:type
     {:headers :map,
      :method :keyword,
      :url :string,
      :body :map,
      :* :map},
     :last? false,
     :sample "no sample data"},
    :open-fn-3
    {:type {:revised_prompt :string, :b64_json :string, :* :map},
     :last? false,
     :sample "no sample data"},
    :quality
    {:type {:out :string}, :last? false, :sample "no sample data"},
    :open-fn-4
    {:type {:out :any}, :last? false, :sample "no sample data"},
    :open-fn-5
    {:type {:out :any}, :last? false, :sample "no sample data"},
    :http-call-1
    {:type {:created :integer, :data :rowset, :* :map},
     :last? false,
     :sample "no sample data"},
    :headers-map
    {:type {"Authorization" :string, "Content-Type" :string, :* :map},
     :last? false,
     :sample "no sample data"},
    :url-str
    {:type {:out :string}, :last? false, :sample "no sample data"}}},
  "hue-lights-api"
  {:open-inputs
   {:open-input-1
    {:user-input
     {:url
      "http://10.174.1.174/api/sqOjLm0JhoioAbwhwPm6ZlHiuCAx-KnQEYwAZOWL/groups"},
     :defaults {},
     :type :map},
    :open-input
    {:user-input
     {:url
      "http://10.174.1.174/api/sqOjLm0JhoioAbwhwPm6ZlHiuCAx-KnQEYwAZOWL/lights"},
     :defaults {},
     :type :map}},
   :blocks
   {:http-call-2
    {:type
     {:* :map,
      :10 :map,
      :4 :map,
      :7 :map,
      :1 :map,
      :8 :map,
      :9 :map,
      :2 :map,
      :5 :map,
      :200 :map,
      :3 :map,
      :6 :map},
     :last? false,
     :sample "no sample data"},
    :open-input-1
    {:type {:url :string, :* :map},
     :last? false,
     :sample "no sample data"},
    :open-input
    {:type {:url :string, :* :map},
     :last? false,
     :sample "no sample data"},
    :http-call-1
    {:type
     {:14 :map,
      :* :map,
      :27 :map,
      :18 :map,
      :12 :map,
      :11 :map,
      :24 :map,
      :10 :map,
      :21 :map,
      :23 :map,
      :13 :map,
      :26 :map,
      :16 :map,
      :7 :map,
      :8 :map,
      :22 :map,
      :25 :map,
      :9 :map,
      :20 :map,
      :17 :map,
      :28 :map,
      :19 :map,
      :5 :map,
      :15 :map,
      :6 :map,
      :29 :map},
     :last? true,
     :sample "no sample data"}}},
  "node-color-thief-js"
  {:open-inputs
   {:image-path
    {:user-input
     " /home/ryanr/viz-yard/resources/public/images/shannon45.png",
     :defaults {},
     :type :string},
    :shell-command-in
    {:user-input
     "cd /home/ryanr/color-thief-project ; node ./colorThief.js",
     :defaults {},
     :type :string}},
   :blocks
   {:shell-command-1
    {:type
     {:output :vector,
      :exception :vector,
      :seconds :vector,
      :command :string,
      :* :map},
     :last? false,
     :sample "no sample data"},
    :json-to-edn
    {:type {:dominantColor :string, :colorPalette :vector, :* :map},
     :last? true,
     :sample "no sample data"},
    :clojure-string-join-1
    {:type {:out :string}, :last? false, :sample "no sample data"},
    :image-path
    {:type {:out :string}, :last? false, :sample "no sample data"},
    :join-output-as-string
    {:type {:out :any}, :last? false, :sample "no sample data"},
    :shell-command-in
    {:type {:out :string}, :last? false, :sample "no sample data"}}},
  "a-random-wow"
  {:open-inputs
   {:rando-string
    {:user-input "feed me, seymour!", :defaults {}, :type :string},
    :open-input
    {:user-input
     {:url "https://owen-wilson-wow-api.onrender.com/wows/random"},
     :defaults {},
     :type :map},
    :http-call-1-idx0 {:user-input nil, :defaults {}, :type :map}},
   :blocks
   {:open-fn-1
    {:type :map,
     :last? false,
     :sample
     "{:video {:1080p \"https:/videos.ctfassets.net/bs8ntwkklfua/2x..."},
    :kick-1 {:type :keyword, :last? true, :sample ":sent!"},
    :rando-string
    {:type :string, :last? false, :sample "feed me, seymour!"},
    :open-fn-2
    {:type :string,
     :last? false,
     :sample
     "There's a saying in Hawaii that goes a little something like..."},
    :open-input
    {:type :map,
     :last? false,
     :sample
     "{:url \"https://owen-wilson-wow-api.onrender.com/wows/random\"..."},
    :http-call-1-idx0
    {:type :map,
     :last? false,
     :sample
     "{:video {:1080p \"https:/videos.ctfassets.net/bs8ntwkklfua/2x..."},
    :open-fn-3 {:type :string, :last? false, :sample "Kyle Reynolds"},
    :open-fn-4 {:type :string, :last? false, :sample "Father Figures"},
    :open-fn-5
    {:type :string, :last? false, :sample "feed me, seymour!"},
    :http-call-1
    {:type :rowset,
     :last? false,
     :sample
     "[{:video {:1080p \"https:/videos.ctfassets.net/bs8ntwkklfua/2..."}}},
  "hey-rabbit-pathfinder"
  {:open-inputs
   {:open-fn-1 {:user-input nil, :defaults {}, :type :any},
    :open-fn-2 {:user-input nil, :defaults {}, :type :any},
    :voice-input {:user-input "...", :defaults {}, :type :string},
    :open-fn-3 {:user-input nil, :defaults {}, :type :any},
    :user-contexts
    {:user-input :session-state, :defaults {}, :type :string},
    :open-fn-4 {:user-input nil, :defaults {}, :type :any}},
   :blocks
   {:open-fn-1
    {:type {:out :any}, :last? false, :sample "no sample data"},
    :open-fn-2
    {:type {:out :any}, :last? false, :sample "no sample data"},
    :voice-input
    {:type {:out :string}, :last? false, :sample "no sample data"},
    :open-fn-3
    {:type {:out :any}, :last? false, :sample "no sample data"},
    :user-contexts
    {:type {:out :string}, :last? false, :sample "no sample data"},
    :open-fn-4
    {:type {:out :any}, :last? false, :sample "no sample data"}}}},
 :openai-api-key "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",
 :window {:w 2762, :h 1599},
 :post-meta
 {:flows-sys
  {:*
   {:rowcount
    "[SQLITE_ERROR] SQL error or missing database (near \")\": syntax error)"}}},
 :status
 {:heartbeat
  {:kick
   [:flow/dalle3-create-image3>*running?
    :flow/a-random-wow>*running?
    :flow/hue-lights-api>*running?
    :flow/node-color-thief-js>*running?]},
  "kick-test!" {:kick :flows-sys}},
 :screen-name "pinup-rabbit-fields",
 :recos-page2 0,
 :selected-tab "strategic grill locations",
 :col-names nil,
 :openai-org-id "org-YLngjih2M4oju0tnnZtKCAYg",
 :alerts [],
 :recos-page 0,
 :re-pollsive.core/polling
 {:rules
  [{:interval 10,
    :event [:viz-yard.bricks/dispatch-auto-queries],
    :poll-when [:viz-yard.bricks/auto-run-and-connected?],
    :dispatch-event-on-start? false}
   {:interval 5,
    :event [:viz-yard.bricks/update-metadata],
    :dispatch-event-on-start? false,
    :started-at 0,
    :stopped-time-since-last-poll nil,
    :started-before? true}
   {:interval 120,
    :event [:viz-yard.bricks/clean-up-reco-previews],
    :dispatch-event-on-start? false,
    :started-at 0,
    :stopped-time-since-last-poll nil,
    :started-before? true}
   {:interval 2,
    :event [:viz-yard.bricks/prune-alerts],
    :dispatch-event-on-start? false,
    :started-at 0,
    :stopped-time-since-last-poll nil,
    :started-before? true}
   {:interval 1,
    :event [:viz-yard.bricks/refresh-runstreams],
    :poll-when [:viz-yard.bricks/runstream-running?],
    :dispatch-event-on-start? false}
   {:interval 1,
    :event [:viz-yard.bricks/sub-to-flows],
    :poll-when [:viz-yard.bricks/new-flow-subs?],
    :dispatch-event-on-start? false,
    :started-at nil,
    :stopped-time-since-last-poll -1,
    :started-before? true}
   {:interval 1000,
    :event [:viz-yard.bricks/update-metadata-tabs],
    :dispatch-event-on-start? false,
    :started-at 0,
    :stopped-time-since-last-poll nil,
    :started-before? true}
   {:interval 1,
    :event [:viz-yard.bricks/update-conditionals],
    :dispatch-event-on-start? false,
    :started-at 0,
    :stopped-time-since-last-poll nil,
    :started-before? true}
   {:interval 4,
    :event [:viz-yard.bricks/refresh-status],
    :poll-when [:viz-yard.bricks/bg-status?],
    :dispatch-event-on-start? false}],
  :counter 27342},
 :panels-hash -1223500505,
 :elevenlabs-api-key "f74e20dec69741c2d51663cbd8cd4cf6",
 :websocket-fx.core/sockets
 {:default
  {:status :connected,
   :options
   {:url "ws://localhost:3030/ws",
    :format :edn,
    :on-disconnect
    [:websocket-fx.core/unsubscribe :default :server-push2],
    :on-connect
    [:websocket-fx.core/subscribe
     :default
     :server-push2
     {:message
      {:kind :server-push2,
       :client-name :genius-desert-jay-hailing-from-glen,
       :ui-keypath [:server],
       :extras {:hello? true}},
      :on-message [:viz-yard.http/simple-response]}]},
   :requests {},
   :subscriptions
   {:server-push2
    {:message
     {:kind :server-push2,
      :client-name :genius-desert-jay-hailing-from-glen,
      :ui-keypath [:server],
      :extras {:hello? true}},
     :on-message [:viz-yard.http/simple-response]}}}},
 :user-params-hash 278685043,
 :grid-recos? true,
 :panels
 {:hello-there-brother
  {:h 3,
   :w 12,
   :root [2 2],
   :name "hello there!",
   :tab "strategic grill locations",
   :views
   {:heya!
    [:box
     :align
     :center
     :justify
     :center
     :style
     {:font-size "50px",
      :font-weight 700,
      :color :theme/editor-outer-rim-color,
      :padding-top "14px",
      :opacity 1,
      :font-family :theme/base-font}
     :child
     "hello! 🐇 🍂 🦃"]},
   :queries {}},
  nil {:queries {:flows-sys {:_last-run "16:00:55"}}}},
 :selected-block "none!",
 :click-param
 {:theme
  {:codemirror-theme "ayu-dark",
   :editor-param-background-color "#000000",
   :base-block-style {:backdrop-filter "blur(2px) brightness(70%) "},
   :vega-defaults
   {:view {:stroke "transparent"},
    :axis
    {:domainColor "#ffffff22",
     :grid true,
     :font "Lato",
     :labelColor "#ffffff88",
     :titleFont "Lato",
     :titleColor "#ffffff99",
     :labelFont "Lato",
     :domain false,
     :gridColor "#ffffff22",
     :tickColor "#ffffff22",
     :axisFont "Lato"},
    :legend
    {:labelFont "Lato",
     :legendFont "Lato",
     :labelColor "#ffffff99",
     :titleColor "#ffffff99",
     :stroke "#ffffff99",
     :titleFont "Lato"},
    :header
    {:labelFont "Lato", :titleFont "Lato", :titleColor "#ffffff99"},
    :mark {:font "Lato"},
    :title
    {:font "Lato",
     :subtitleFont "Lato",
     :labelFont "Lato",
     :titleFont "Lato",
     :titleColor "#ffffff99"}},
   :grid-selected-column-css
   {:background-color "#00000088", :filter "brightness(200%)"},
   :base-block-color-selected "#00030a",
   :block-title-font-color "#ffffff",
   :base-block-color "#071b2b82",
   :editor-rim-color "#96a1c6",
   :base-block-filter-selected
   "drop-shadow(0.35rem 0.35rem 0.4rem #8dceff) drop-shadow(-0.35rem -0.35rem 0.4rem #8dceff)",
   :vega-default-color-scheme {:scheme "pastel2"},
   :data-colors
   {"float" "#59657A",
    "boolean" "#10EFDC6",
    "map" "#878C96",
    "list" "#C9C2B1",
    "string" "#12511BCF",
    "vector" "#4B5970",
    "keyword" "#898D98",
    "rabbit-code" "#19F19FEC",
    "datetime" "#EFE7C0",
    "integer" "#160158DD",
    "unknown" "#677183",
    "date" "#33445D",
    "nil" "#33445D"},
   :editor-grid-selected-font-color "#000000",
   :monospaced-font "JetBrains Mono",
   :editor-grid-selected-background-color "#d5d5ec",
   :nivo-defaults
   {:font-family "Instagram Sans",
    :labels
    {:text
     {:fill "#ffffff",
      :font-size "16px",
      :font-family "Instagram Sans",
      :font-weight 700}},
    :tooltip
    {:container
     {:background "#000",
      :color "#ffffff",
      :text {:fill "#eeeeee"},
      :fontSize "18px",
      :borderRadius "4px",
      :boxShadow "0 1px 2px rgba(0, 0, 0, 0.55)",
      :padding "5px 9px"},
     :basic {:whiteSpace "pre", :display "flex", :alignItems "center"},
     :tableCell {:padding "3px 5px"}},
    :axis
    {:legend
     {:text
      {:fill "#ffffff",
       :font-size "14px",
       :font-family "Instagram Sans",
       :font-weight 700}},
     :ticks
     {:line {:stroke "#ffffff60"},
      :text {:fill "#ffffff60", :font-weight 700}}},
    :grid
    {:line
     {:stroke "#ffffff", :strokeWidth 0, :strokeDasharray "0 0"}}},
   :editor-outer-rim-color "#96a1c6",
   :grid-selected-font-color "#000000",
   :block-title-selected-font-color "#ffffff",
   :grid-selected-background-color "#a3d3ff",
   :grid-font-color "#ffffff",
   :canvas-background-css
   {:background-image "url(images/rabbit-winter-pinup1234-8k-4k.png)",
    :transition "all 0.8s ease-in-out",
    :background-size "cover",
    :background-color "#424f57"},
   :editor-font-color "#ffffff",
   :base-font "Instagram Sans",
   :block-tab-selected-font-color "#c9d1ff",
   :editor-background-color "#000006",
   :editor-grid-font-color "#ffffff"},
  :param {:selected-view [nil nil], :selected-view-data nil},
  :connections-sys
  {:database_name "SQLite", :connection_id "bigfoot-ufos"},
  :tables-sys
  {:db_schema "none",
   :db_catalog nil,
   :connection_id "bigfoot-ufos",
   :schema_cat nil,
   :table_name "ufo_sightings",
   :fields 14},
  :flow
  {:dalle3-create-image3>*running? nil,
   :a-random-wow>*running? nil,
   :hue-lights-api>*running? nil,
   :node-color-thief-js>*running? nil,
   :hey-rabbit-pathfinder>*running? nil},
  nil {nil nil},
  :flows-sys
  {:flow_id "hey-rabbit-pathfinder",
   :file_path "./flows/hey-rabbit-pathfinder.edn",
   :last_modified "2024-01-28 16:00:19"}},
 :selected-flow "hey-rabbit-pathfinder"}