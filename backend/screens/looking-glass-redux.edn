{:orders
 {:fields-sys [:field_name :field_type :data_type],
  :tmp-1459870191-hist-sys
  [:client_name :data :diff :diff_kp :key :kp :panel_key :pre_data :type :updated],
  :tables-sys
  [:db_schema :db_catalog :connection_id :schema_cat :table_name :fields],
  :gen-viz-797 [:rows :date_posted],
  :flows-sys [:flow_id :file_path :last_modified],
  :gen-viz-94 [:diff],
  :tmp-726567637-hist-sys
  [:client_name :data :diff :diff_kp :key :kp :panel_key :pre_data :type :updated],
  :kits
  [:id
   :item_hash
   :item_name
   :kit_name
   :item_type
   :item_key
   :item_idx
   :item_options
   :item_data
   :client_name
   :flow_id
   :updated],
  :tmp--632206769-hist-sys
  [:client_name :data :diff :diff_kp :key :kp :panel_key :pre_data :type :updated],
  :tmp-517156166-hist-sys
  [:client_name :data :diff :diff_kp :key :kp :panel_key :pre_data :type :updated],
  :offenses-drag-24
  [:DAY_OF_WEEK
   :DISTRICT
   :HOUR
   :INCIDENT_NUMBER
   :Lat
   :Location
   :Long
   :MONTH
   :OCCURRED_ON_DATE
   :OFFENSE_CODE
   :OFFENSE_CODE_GROUP
   :OFFENSE_DESCRIPTION
   :REPORTING_AREA
   :SHOOTING
   :STREET
   :UCR_PART
   :YEAR],
  :tmp--13861783-hist-sys
  [:client_name :data :diff :diff_kp :key :kp :panel_key :pre_data :type :updated],
  :rowcnt-drag-2 [:rowcnt_sum],
  :gen-viz-828 [:agg :date_posted],
  :ufo_sightings (:query_error),
  :offenses (:query_error),
  :gen-viz-84 [:rows :country],
  :connections-sys [:database_name :connection_id :styler_highlight_8717ss],
  :ufo-sightings-drag-9
  [:city
   :country
   :date_posted
   :datetime
   :duration_hours
   :duration_seconds
   :duration_seconds_int
   :shape
   :state],
  :tmp--1440587341-hist-sys
  [:client_name :data :diff :diff_kp :key :kp :panel_key :pre_data :type :updated],
  :tmp-1865039921-hist-sys
  [:client_name :data :diff :diff_kp :key :kp :panel_key :pre_data :type :updated],
  :kits-drag-26
  [:client_name
   :flow_id
   :id
   :item_data
   :item_hash
   :item_idx
   :item_key
   :item_name
   :item_options
   :item_type
   :kit_name
   :updated],
  :duration-hours-drag-43 [:duration_hours :rowcnt],
  :city-drag-26 [:city :rowcnt],
  :state-drag-3 [:state :rowcnt],
  :tmp-994178670-hist-sys
  [:client_name :data :diff :diff_kp :key :kp :panel_key :pre_data :type :updated],
  :shape-drag-7 [:shape :rowcnt],
  :kit-results-sys
  [:id
   :item_hash
   :item_name
   :kit_name
   :item_type
   :item_key
   :item_idx
   :item_options
   :item_data
   :client_name
   :flow_id
   :updated]},
 :reco-preview nil,
 :sql-source
 {:gen-viz-797
  {:select [[[:count 1] :rows] :date_posted],
   :from
   [{:select
     [:city
      :country
      :date_posted
      :datetime
      :duration_hours
      :duration_seconds
      :duration_seconds_int
      :shape
      :state],
     :from [[:ufo_sightings :jj584]],
     :order-by [[:city :asc]]}],
   :group-by [:date_posted]},
  :gen-viz-94
  {:select
   [[[:max [:round [:raw ["(100 * ((" nil ".0 - " nil ".0) / " nil ".0))"]] 2]]
     :diff]],
   :from
   [{:select
     [:city
      :country
      :date_posted
      :datetime
      :duration_hours
      :duration_seconds
      :duration_seconds_int
      :shape
      :state],
     :from [[:ufo_sightings :jj584]],
     :order-by [[:city :asc]]}]},
  :kits {:select [:*], :connection-id "system-db", :from [:kits], :limit 111},
  :offenses-drag-24
  {:select
   [:DAY_OF_WEEK
    :DISTRICT
    :HOUR
    :INCIDENT_NUMBER
    :Lat
    :Location
    :Long
    :MONTH
    :OCCURRED_ON_DATE
    :OFFENSE_CODE
    :OFFENSE_CODE_GROUP
    :OFFENSE_DESCRIPTION
    :REPORTING_AREA
    :SHOOTING
    :STREET
    :UCR_PART
    :YEAR],
   :from [[:offenses :dd484]]},
  :rowcnt-drag-2
  {:select [[[:sum :rowcnt] :rowcnt_sum]],
   :from
   [[{:select [:city [[:count 1] :rowcnt]],
      :from
      [[{:select
         [:city
          :country
          :date_posted
          :datetime
          :duration_hours
          :duration_seconds
          :duration_seconds_int
          :shape
          :state],
         :from [[:ufo_sightings :jj584]],
         :order-by [[:city :asc]]}
        :ff571]],
      :group-by [:city],
      :order-by [[:rowcnt :desc]]}
     :yy403]]},
  :gen-viz-828
  {:select [[[[:count 1]] :agg] :date_posted],
   :from
   [{:select
     [:city
      :country
      :date_posted
      :datetime
      :duration_hours
      :duration_seconds
      :duration_seconds_int
      :shape
      :state],
     :from [[:ufo_sightings :jj584]],
     :order-by [[:city :asc]]}],
   :order-by [[:date_posted :desc]],
   :group-by [:date_posted]},
  :ufo_sightings
  {:select [:*], :connection-id "system-db", :from [:ufo_sightings], :limit 111},
  :offenses
  {:select [:*], :connection-id "system-db", :from [:offenses], :limit 111},
  :gen-viz-84
  {:select [[[:count 1] :rows] :country],
   :from
   [{:select
     [:city
      :country
      :date_posted
      :datetime
      :duration_hours
      :duration_seconds
      :duration_seconds_int
      :shape
      :state],
     :from [[:ufo_sightings :jj584]],
     :order-by [[:city :asc]]}],
   :group-by [:country]},
  :ufo-sightings-drag-9
  {:select
   [:city
    :country
    :date_posted
    :datetime
    :duration_hours
    :duration_seconds
    :duration_seconds_int
    :shape
    :state],
   :from [[:ufo_sightings :jj584]],
   :order-by [[:city :asc]]},
  :kits-drag-26
  {:select
   [:client_name
    :flow_id
    :id
    :item_data
    :item_hash
    :item_idx
    :item_key
    :item_name
    :item_options
    :item_type
    :kit_name
    :updated],
   :from [[:kits :dd919]]},
  :duration-hours-drag-43
  {:select [:duration_hours [[:count 1] :rowcnt]],
   :from
   [[{:select
      [:city
       :country
       :date_posted
       :datetime
       :duration_hours
       :duration_seconds
       :duration_seconds_int
       :shape
       :state],
      :from [[:ufo_sightings :jj584]],
      :order-by [[:city :asc]]}
     :cc350]],
   :group-by [:duration_hours],
   :order-by [[:rowcnt :desc]]},
  :city-drag-26
  {:select [:city [[:count 1] :rowcnt]],
   :from
   [[{:select
      [:city
       :country
       :date_posted
       :datetime
       :duration_hours
       :duration_seconds
       :duration_seconds_int
       :shape
       :state],
      :from [[:ufo_sightings :jj584]],
      :order-by [[:city :asc]]}
     :ff571]],
   :group-by [:city],
   :order-by [[:rowcnt :desc]]},
  :state-drag-3
  {:select [:state [[:count 1] :rowcnt]],
   :from
   [[{:select
      [:city
       :country
       :date_posted
       :datetime
       :duration_hours
       :duration_seconds
       :duration_seconds_int
       :shape
       :state],
      :from [[:ufo_sightings :jj584]],
      :order-by [[:city :asc]]}
     :uu58]],
   :group-by [:state],
   :order-by [[:rowcnt :desc]]},
  :shape-drag-7
  {:select [:shape [[:count 1] :rowcnt]],
   :from
   [[{:select
      [:city
       :country
       :date_posted
       :datetime
       :duration_hours
       :duration_seconds
       :duration_seconds_int
       :shape
       :state],
      :from [[:ufo_sightings :jj584]],
      :order-by [[:city :asc]]}
     :hh354]],
   :group-by [:shape],
   :order-by [[:rowcnt :desc]]}},
 :meta
 {nil
  {:fields
   {:vec-val
    {:data-type "string",
     :distinct 35,
     :group-by? true,
     :commons {},
     :cardinality 92}},
   :rowcount 38},
  :fields-sys
  {:fields
   {:field_name
    {:data-type "string",
     :distinct 12,
     :group-by? true,
     :commons {"item_options" 1, "item_name" 1, "flow_id" 1},
     :cardinality 100},
    :field_type
    {:data-type "string",
     :distinct 3,
     :group-by? true,
     :commons {"TEXT" 9, "INTEGER" 2, "TIMESTAMP" 1},
     :cardinality 25},
    :data_type
    {:data-type "string",
     :distinct 3,
     :group-by? true,
     :commons {"string" 9, "integer" 2, "datetime" 1},
     :cardinality 25}},
   :rowcount 12},
  :tmp-1459870191-hist-sys {:fields {}, :rowcount 0},
  :fabric-hop
  {:fields
   {:vec-val
    {:data-type "string",
     :distinct 13,
     :group-by? true,
     :commons {},
     :cardinality 92}},
   :rowcount 14},
  :fabric-hop-13
  {:fields
   {:vec-val
    {:data-type "string",
     :distinct 21,
     :group-by? true,
     :commons {},
     :cardinality 95}},
   :rowcount 22},
  :tables-sys
  {:fields
   {:db_schema
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {"none" 23},
     :cardinality 4},
    :db_catalog
    {:data-type "unknown",
     :distinct 1,
     :group-by? true,
     :commons {nil 23},
     :cardinality 4},
    :connection_id
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {"system-db" 23},
     :cardinality 4},
    :schema_cat
    {:data-type "unknown",
     :distinct 1,
     :group-by? false,
     :commons {nil 23},
     :cardinality 4},
    :table_name
    {:data-type "string",
     :distinct 23,
     :group-by? true,
     :commons {"connections" 1, "board_history" 1, "rule_maps_tests" 1},
     :cardinality 100},
    :fields
    {:data-type "integer",
     :distinct 14,
     :group-by? false,
     :commons {6 4, 5 3, 15 3},
     :cardinality 60}},
   :rowcount 23},
  :gen-viz-797
  {:fields
   {:rows
    {:data-type "integer",
     :distinct 230,
     :group-by? false,
     :commons {76 5, 146 4, 116 4},
     :cardinality 72},
    :date_posted
    {:data-type "string",
     :distinct 317,
     :group-by? true,
     :commons {"2000-12-09" 1, "2010-08-30" 1, "2003-11-08" 1},
     :cardinality 100}},
   :rowcount 317},
  :location-drag-25
  {:fields
   {:location
    {:data-type "string",
     :distinct 500,
     :group-by? true,
     :commons
     {"Geneva, Switzerland" 1, "Saint-Denis, France" 1, "Halifax, NS, Canada" 1},
     :cardinality 100},
    :rowcnt
    {:data-type "integer",
     :distinct 26,
     :group-by? false,
     :commons {1 189, 2 82, 3 59},
     :cardinality 5}},
   :rowcount 500},
  :fabric-hop-4
  {:fields
   {:vec-val
    {:data-type "string",
     :distinct 11,
     :group-by? true,
     :commons {},
     :cardinality 91}},
   :rowcount 12},
  :flows-sys
  {:fields
   {:flow_id
    {:data-type "string",
     :distinct 96,
     :group-by? true,
     :commons
     {"clam-flow-851" 3, "openai-image-gen-ladder" 2, "python3-runner-v1" 1},
     :cardinality 96},
    :file_path
    {:data-type "string",
     :distinct 99,
     :group-by? true,
     :commons
     {"./flows/generated-flow-map.edn" 1,
      "./flows/stitches-math.edn" 1,
      "./flows/openai-image-gen-ladder3.edn" 1},
     :cardinality 100},
    :last_modified
    {:data-type "string",
     :distinct 34,
     :group-by? true,
     :commons
     {"2024-03-12 02:37:43" 66, "2024-06-22 18:16:16" 1, "2024-03-14 07:50:09" 1},
     :cardinality 34}},
   :rowcount 99},
  :gen-viz-94
  {:fields
   {:diff
    {:data-type "unknown",
     :distinct 1,
     :group-by? false,
     :commons {nil 1},
     :cardinality 100}},
   :rowcount 1},
  :tmp-726567637-hist-sys {:fields {}, :rowcount 0},
  :fabric-hop-2
  {:fields
   {:vec-val
    {:data-type "string",
     :distinct 8,
     :group-by? true,
     :commons {},
     :cardinality 88}},
   :rowcount 9},
  :kits
  {:fields
   {:item_idx
    {:data-type "integer",
     :distinct 1,
     :group-by? true,
     :commons {0 111},
     :cardinality 0},
    :item_options
    {:data-type "string",
     :distinct 9,
     :group-by? true,
     :commons
     {"{:options {:actions? false, :pages? false, :search? false}, :parameters {}, :mutates {}, :description \"query-log :new-query\"}"
      55,
      "{:options {:actions? false, :pages? false, :search? false}, :parameters {}, :mutates {}, :description \"query-log :client-stats-drag-33\"}"
      15,
      "{:options {:actions? false, :pages? false, :search? false}, :parameters {}, :mutates {}, :description \"query-log :new-query-1\"}"
      7},
     :cardinality 8},
    :updated
    {:data-type "string",
     :distinct 37,
     :group-by? true,
     :commons
     {"2024-07-31 04:03:36" 11, "2024-07-31 04:03:35" 9, "2024-07-31 04:04:25" 8},
     :cardinality 33},
    :item_hash
    {:data-type "string",
     :distinct 103,
     :group-by? true,
     :commons {"-1325446351" 2, "-36148409" 2, "-59367635" 2},
     :cardinality 92},
    :item_type
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {"kick-test!" 111},
     :cardinality 0},
    :item_name
    {:data-type "string",
     :distinct 9,
     :group-by? true,
     :commons {":new-query" 55, ":client-stats-drag-33" 15, ":new-query-1" 7},
     :cardinality 8},
    :flow_id
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {"flow-id-here!" 111},
     :cardinality 0},
    :id
    {:data-type "integer",
     :distinct 111,
     :group-by? true,
     :commons {84 1, 49 1, 8 1},
     :cardinality 100},
    :client_name
    {:data-type "string",
     :distinct 4,
     :group-by? true,
     :commons
     {":courageous-long-turkey-28" 38,
      ":easy-indigo-prairie-dog-8" 36,
      ":harmonious-pear-hippopotamus-34" 35},
     :cardinality 3},
    :item_data
    {:data-type "string",
     :distinct 103,
     :group-by? true,
     :commons
     {"{:content [\"2024-07-31 04:03:35 - query ran in 0 ms. \" [:text \"\\nSELECT *\\nFROM (SELECT (AVG(mem_used)) AS mem_used, SUBSTRING(ts, 1, 15) AS ts_hour FROM (SELECT client_name, recent_messages_per_second, messages_per_second, mem_used, batches, packets, ts FROM client_memory AS ee183 WHERE client_name = ':easy-indigo-prairie-dog-8' ORDER BY mem_time DESC) WHERE client_name = ':easy-indigo-prairie-dog-8' GROUP BY 2 ORDER BY ts DESC LIMIT 26)\\nLIMIT 500\\n\"] [:edn {:diff {:data-type \"string\", :distinct 1, :group-by? true, :commons {\"277 MB\" 1}, :cardinality 100}, :mem_used {:data-type \"float\", :distinct 1, :group-by? true, :commons {2.90176804E8 1}, :cardinality 100}, :ts_hour {:data-type \"string\", :distinct 1, :group-by? true, :commons {\"2024-07-31 04:0\" 1}, :cardinality 100}}]], :name \"query-log :new-query\", :order 1722413015, :parameters {}, :forced-mutates {}, :step-mutates {}}"
      2,
      "{:content [\"2024-07-31 04:03:36 - query ran in 0 ms. \" [:text \"\\nSELECT *\\nFROM (SELECT (AVG(mem_used)) AS mem_used, SUBSTRING(ts, 1, 15) AS ts_hour FROM (SELECT client_name, recent_messages_per_second, messages_per_second, mem_used, batches, packets, ts FROM client_memory AS ee183 WHERE client_name = ':harmonious-pear-hippopotamus-34' ORDER BY mem_time DESC) WHERE client_name = ':harmonious-pear-hippopotamus-34' GROUP BY 2 ORDER BY ts DESC LIMIT 26)\\nLIMIT 500\\n\"] [:edn {}]], :name \"query-log :new-query\", :order 1722413016, :parameters {}, :forced-mutates {}, :step-mutates {}}"
      2,
      "{:content [\"2024-07-31 04:04:54 - query ran in 0 ms. \" [:text \"\\nSELECT *\\nFROM (SELECT (AVG(mem_used)) AS mem_used, SUBSTRING(ts, 1, 15) AS ts_hour FROM (SELECT client_name, recent_messages_per_second, messages_per_second, mem_used, batches, packets, ts FROM client_memory AS ee183 WHERE client_name = ':harmonious-pear-hippopotamus-34' ORDER BY mem_time DESC) WHERE client_name = ':harmonious-pear-hippopotamus-34' GROUP BY 2 ORDER BY ts DESC LIMIT 26)\\nLIMIT 500\\n\"] [:edn {:diff {:data-type \"string\", :distinct 1, :group-by? true, :commons {\"722 MB\" 1}, :cardinality 100}, :mem_used {:data-type \"float\", :distinct 1, :group-by? true, :commons {7.566750796666666E8 1}, :cardinality 100}, :ts_hour {:data-type \"string\", :distinct 1, :group-by? true, :commons {\"2024-07-31 04:0\" 1}, :cardinality 100}}]], :name \"query-log :new-query\", :order 1722413094, :parameters {}, :forced-mutates {}, :step-mutates {}}"
      2},
     :cardinality 92},
    :item_key
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {":query-log" 111},
     :cardinality 0},
    :kit_name
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {":kick" 111},
     :cardinality 0}},
   :rowcount 111},
  :tmp--632206769-hist-sys {:fields {}, :rowcount 0},
  :time-freq-345d
  {:fields
   {:freq
    {:data-type "integer",
     :distinct 10,
     :group-by? true,
     :commons {30 1, 120 1, 45 1},
     :cardinality 100}},
   :rowcount 10},
  :tmp-517156166-hist-sys {:fields {}, :rowcount 0},
  :stats-types-34
  {:fields
   {:type
    {:data-type "string",
     :distinct 44,
     :group-by? true,
     :commons {"flows" 1, "workers" 1, "queue-tasks" 1},
     :cardinality 100}},
   :rowcount 44},
  :clojure-hop-8
  {:fields
   {:vec-val
    {:data-type "integer",
     :distinct 20,
     :group-by? true,
     :commons {},
     :cardinality 100}},
   :rowcount 20},
  :offenses-drag-24
  {:fields
   {:SHOOTING
    {:data-type "unknown",
     :distinct 1,
     :group-by? true,
     :commons {nil 500},
     :cardinality 0},
    :DISTRICT
    {:data-type "string",
     :distinct 13,
     :group-by? true,
     :commons {"C11" 82, "B2" 75, "B3" 49},
     :cardinality 2},
    :INCIDENT_NUMBER
    {:data-type "string",
     :distinct 454,
     :group-by? true,
     :commons {"I182070397" 5, "I182070779" 4, "I182070889" 3},
     :cardinality 90},
    :OFFENSE_DESCRIPTION
    {:data-type "string",
     :distinct 89,
     :group-by? true,
     :commons
     {"SICK/INJURED/MEDICAL - PERSON" 43,
      "VERBAL DISPUTE" 34,
      "INVESTIGATE PERSON" 33},
     :cardinality 17},
    :DAY_OF_WEEK
    {:data-type "string",
     :distinct 7,
     :group-by? true,
     :commons {"0001-01-07" 228, "0001-01-08" 178, "0001-01-06" 75},
     :cardinality 1},
    :MONTH
    {:data-type "integer",
     :distinct 4,
     :group-by? true,
     :commons {9 477, 8 21, 7 1},
     :cardinality 0},
    :YEAR
    {:data-type "integer",
     :distinct 1,
     :group-by? true,
     :commons {2018 500},
     :cardinality 0},
    :HOUR
    {:data-type "integer",
     :distinct 24,
     :group-by? true,
     :commons {18 45, 14 33, 20 32},
     :cardinality 4},
    :STREET
    {:data-type "string",
     :distinct 275,
     :group-by? true,
     :commons {nil 41, "WASHINGTON ST" 20, "HUNTINGTON AVE" 12},
     :cardinality 55},
    :OFFENSE_CODE_GROUP
    {:data-type "string",
     :distinct 41,
     :group-by? true,
     :commons
     {"Motor Vehicle Accident Response" 69, "Medical Assistance" 50, "Larceny" 41},
     :cardinality 8},
    :UCR_PART
    {:data-type "string",
     :distinct 4,
     :group-by? true,
     :commons {"Part Three" 265, "Part Two" 140, "Part One" 93},
     :cardinality 0},
    :Long
    {:data-type "float",
     :distinct 413,
     :group-by? true,
     :commons {-1 6, -71.1136693 5, nil 5},
     :cardinality 82},
    :REPORTING_AREA
    {:data-type "integer",
     :distinct 282,
     :group-by? true,
     :commons {nil 42, 519 6, 177 5},
     :cardinality 56},
    :Location
    {:data-type "string",
     :distinct 413,
     :group-by? true,
     :commons
     {"(-1.00000000, -1.00000000)" 6,
      "(0.00000000, 0.00000000)" 5,
      "(42.24635332, -71.11366930)" 5},
     :cardinality 82},
    :OFFENSE_CODE
    {:data-type "integer",
     :distinct 89,
     :group-by? true,
     :commons {3006 43, 3301 34, 3115 33},
     :cardinality 17},
    :Lat
    {:data-type "float",
     :distinct 413,
     :group-by? true,
     :commons {-1 6, 42.24635332 5, nil 5},
     :cardinality 82},
    :OCCURRED_ON_DATE
    {:data-type "string",
     :distinct 404,
     :group-by? true,
     :commons
     {"2018-09-02 00:00:00.000000" 5,
      "2018-09-03 10:00:00.000000" 5,
      "2018-09-01 17:03:00.000000" 5},
     :cardinality 80}},
   :rowcount 500},
  :fabric-hop-10
  {:fields
   {:vec-val
    {:data-type "string",
     :distinct 14,
     :group-by? true,
     :commons {},
     :cardinality 93}},
   :rowcount 15},
  :clojure-hop-10
  {:fields
   {:vec-val
    {:data-type "integer",
     :distinct 9,
     :group-by? true,
     :commons {},
     :cardinality 90}},
   :rowcount 10},
  :fabric-hop-5
  {:fields
   {:vec-val
    {:data-type "string",
     :distinct 11,
     :group-by? true,
     :commons {},
     :cardinality 91}},
   :rowcount 12},
  :fabric-hop-11
  {:fields
   {:vec-val
    {:data-type "string",
     :distinct 21,
     :group-by? true,
     :commons {},
     :cardinality 95}},
   :rowcount 22},
  :virtual-view
  {:fields
   {:vec-val
    {:data-type "integer",
     :distinct 19,
     :group-by? true,
     :commons {},
     :cardinality 95}},
   :rowcount 20},
  :tmp--13861783-hist-sys
  {:fields
   {:kp
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {"[:block-6979 :clojure :new-clojure-8]" 5},
     :cardinality 20},
    :key
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {":new-clojure-8" 5},
     :cardinality 20},
    :updated
    {:data-type "string",
     :distinct 5,
     :group-by? true,
     :commons
     {"2024-07-31 19:29:14" 1, "2024-07-31 19:29:48" 1, "2024-07-31 19:29:50" 1},
     :cardinality 100},
    :type
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {":clojure" 5},
     :cardinality 20},
    :panel_key
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {":block-6979" 5},
     :cardinality 20},
    :diff_kp
    {:data-type "string",
     :distinct 4,
     :group-by? true,
     :commons
     {"([:new] [:new] [:old 1 2 6] [:old 1 2 6] [:old 1 2 5] [:old 1 2 5] [:old 1 2 4] [:old 1 2 4] [:old 1 2 3] [:old 1 2 3] [:old 1 2 2] [:old 1 2 2] [:old 1 2 1] [:old 1 2 1] [:old 1 2 0] [:old 1 2 0] [:old 1 2] [:old 1 1 3 1] [:old 1 1 3 1] [:old 1 1 3 0] [:old 1 1 3 0] [:old 1 1 3] [:old 1 1 2] [:old 1 1 2] [:old 1 1 1 0] [:old 1 1 1 0] [:old 1 1 1] [:old 1 1 0] [:old 1 1 0] [:old 1 1] [:old 1 0] [:old 1 0] [:old 1] [:old 0] [:old 0] [:old])"
      2,
      "([:list-diff 2 :new :fibonacci-sequence 1] [:list-diff 2 :new :fibonacci-sequence 1] [:list-diff 2 :new :fibonacci-sequence 0] [:list-diff 2 :new :fibonacci-sequence 0] [:list-diff 2 :new :fibonacci-sequence] [:list-diff 2 :new] [:list-diff 2 :old] [:list-diff 2 :old] [:list-diff 2] [:list-diff 1 :list-diff 3 :new 2 3 3 2] [:list-diff 1 :list-diff 3 :new 2 3 3 2] [:list-diff 1 :list-diff 3 :new 2 3 3 1] [:list-diff 1 :list-diff 3 :new 2 3 3 1] [:list-diff 1 :list-diff 3 :new 2 3 3 0] [:list-diff 1 :list-diff 3 :new 2 3 3 0] [:list-diff 1 :list-diff 3 :new 2 3 3] [:list-diff 1 :list-diff 3 :new 2 3 2 2] [:list-diff 1 :list-diff 3 :new 2 3 2 2] [:list-diff 1 :list-diff 3 :new 2 3 2 1] [:list-diff 1 :list-diff 3 :new 2 3 2 1] [:list-diff 1 :list-diff 3 :new 2 3 2 0] [:list-diff 1 :list-diff 3 :new 2 3 2 0] [:list-diff 1 :list-diff 3 :new 2 3 2] [:list-diff 1 :list-diff 3 :new 2 3 1] [:list-diff 1 :list-diff 3 :new 2 3 1] [:list-diff 1 :list-diff 3 :new 2 3 0] [:list-diff 1 :list-diff 3 :new 2 3 0] [:list-diff 1 :list-diff 3 :new 2 3] [:list-diff 1 :list-diff 3 :new 2 2] [:list-diff 1 :list-diff 3 :new 2 2] [:list-diff 1 :list-diff 3 :new 2 1 2] [:list-diff 1 :list-diff 3 :new 2 1 2] [:list-diff 1 :list-diff 3 :new 2 1 1 1] [:list-diff 1 :list-diff 3 :new 2 1 1 1] [:list-diff 1 :list-diff 3 :new 2 1 1 0] [:list-diff 1 :list-diff 3 :new 2 1 1 0] [:list-diff 1 :list-diff 3 :new 2 1 1] [:list-diff 1 :list-diff 3 :new 2 1 0] [:list-diff 1 :list-diff 3 :new 2 1 0] [:list-diff 1 :list-diff 3 :new 2 1] [:list-diff 1 :list-diff 3 :new 2 0] [:list-diff 1 :list-diff 3 :new 2 0] [:list-diff 1 :list-diff 3 :new 2] [:list-diff 1 :list-diff 3 :new 1 5] [:list-diff 1 :list-diff 3 :new 1 4] [:list-diff 1 :list-diff 3 :new 1 4] [:list-diff 1 :list-diff 3 :new 1 3] [:list-diff 1 :list-diff 3 :new 1 3] [:list-diff 1 :list-diff 3 :new 1 2] [:list-diff 1 :list-diff 3 :new 1 2] [:list-diff 1 :list-diff 3 :new 1 1] [:list-diff 1 :list-diff 3 :new 1 1] [:list-diff 1 :list-diff 3 :new 1 0] [:list-diff 1 :list-diff 3 :new 1 0] [:list-diff 1 :list-diff 3 :new 1] [:list-diff 1 :list-diff 3 :new 0] [:list-diff 1 :list-diff 3 :new 0] [:list-diff 1 :list-diff 3 :new] [:list-diff 1 :list-diff 3 :old] [:list-diff 1 :list-diff 3 :old] [:list-diff 1 :list-diff 3] [:list-diff 1 :list-diff 2 :new 0] [:list-diff 1 :list-diff 2 :new 0] [:list-diff 1 :list-diff 2 :new] [:list-diff 1 :list-diff 2 :old 6] [:list-diff 1 :list-diff 2 :old 6] [:list-diff 1 :list-diff 2 :old 5] [:list-diff 1 :list-diff 2 :old 5] [:list-diff 1 :list-diff 2 :old 4] [:list-diff 1 :list-diff 2 :old 4] [:list-diff 1 :list-diff 2 :old 3] [:list-diff 1 :list-diff 2 :old 3] [:list-diff 1 :list-diff 2 :old 2] [:list-diff 1 :list-diff 2 :old 2] [:list-diff 1 :list-diff 2 :old 1] [:list-diff 1 :list-diff 2 :old 1] [:list-diff 1 :list-diff 2 :old 0] [:list-diff 1 :list-diff 2 :old 0] [:list-diff 1 :list-diff 2 :old] [:list-diff 1 :list-diff 2] [:list-diff 1 :list-diff 1 :new] [:list-diff 1 :list-diff 1 :new] [:list-diff 1 :list-diff 1 :old 3 1] [:list-diff 1 :list-diff 1 :old 3 1] [:list-diff 1 :list-diff 1 :old 3 0] [:list-diff 1 :list-diff 1 :old 3 0] [:list-diff 1 :list-diff 1 :old 3] [:list-diff 1 :list-diff 1 :old 2] [:list-diff 1 :list-diff 1 :old 2] [:list-diff 1 :list-diff 1 :old 1 0] [:list-diff 1 :list-diff 1 :old 1 0] [:list-diff 1 :list-diff 1 :old 1] [:list-diff 1 :list-diff 1 :old 0] [:list-diff 1 :list-diff 1 :old 0] [:list-diff 1 :list-diff 1 :old] [:list-diff 1 :list-diff 1] [:list-diff 1 :list-diff 0 :new] [:list-diff 1 :list-diff 0 :new] [:list-diff 1 :list-diff 0 :old] [:list-diff 1 :list-diff 0 :old] [:list-diff 1 :list-diff 0] [:list-diff 1 :list-diff] [:list-diff 1] [:list-diff])"
      1,
      "([:list-diff 2 :new] [:list-diff 2 :new] [:list-diff 2 :old :fibonacci-sequence 1] [:list-diff 2 :old :fibonacci-sequence 1] [:list-diff 2 :old :fibonacci-sequence 0] [:list-diff 2 :old :fibonacci-sequence 0] [:list-diff 2 :old :fibonacci-sequence] [:list-diff 2 :old] [:list-diff 2] [:list-diff 1 :list-diff 3 :new] [:list-diff 1 :list-diff 3 :new] [:list-diff 1 :list-diff 3 :old 2 3 3 2] [:list-diff 1 :list-diff 3 :old 2 3 3 2] [:list-diff 1 :list-diff 3 :old 2 3 3 1] [:list-diff 1 :list-diff 3 :old 2 3 3 1] [:list-diff 1 :list-diff 3 :old 2 3 3 0] [:list-diff 1 :list-diff 3 :old 2 3 3 0] [:list-diff 1 :list-diff 3 :old 2 3 3] [:list-diff 1 :list-diff 3 :old 2 3 2 2] [:list-diff 1 :list-diff 3 :old 2 3 2 2] [:list-diff 1 :list-diff 3 :old 2 3 2 1] [:list-diff 1 :list-diff 3 :old 2 3 2 1] [:list-diff 1 :list-diff 3 :old 2 3 2 0] [:list-diff 1 :list-diff 3 :old 2 3 2 0] [:list-diff 1 :list-diff 3 :old 2 3 2] [:list-diff 1 :list-diff 3 :old 2 3 1] [:list-diff 1 :list-diff 3 :old 2 3 1] [:list-diff 1 :list-diff 3 :old 2 3 0] [:list-diff 1 :list-diff 3 :old 2 3 0] [:list-diff 1 :list-diff 3 :old 2 3] [:list-diff 1 :list-diff 3 :old 2 2] [:list-diff 1 :list-diff 3 :old 2 2] [:list-diff 1 :list-diff 3 :old 2 1 2] [:list-diff 1 :list-diff 3 :old 2 1 2] [:list-diff 1 :list-diff 3 :old 2 1 1 1] [:list-diff 1 :list-diff 3 :old 2 1 1 1] [:list-diff 1 :list-diff 3 :old 2 1 1 0] [:list-diff 1 :list-diff 3 :old 2 1 1 0] [:list-diff 1 :list-diff 3 :old 2 1 1] [:list-diff 1 :list-diff 3 :old 2 1 0] [:list-diff 1 :list-diff 3 :old 2 1 0] [:list-diff 1 :list-diff 3 :old 2 1] [:list-diff 1 :list-diff 3 :old 2 0] [:list-diff 1 :list-diff 3 :old 2 0] [:list-diff 1 :list-diff 3 :old 2] [:list-diff 1 :list-diff 3 :old 1 5] [:list-diff 1 :list-diff 3 :old 1 4] [:list-diff 1 :list-diff 3 :old 1 4] [:list-diff 1 :list-diff 3 :old 1 3] [:list-diff 1 :list-diff 3 :old 1 3] [:list-diff 1 :list-diff 3 :old 1 2] [:list-diff 1 :list-diff 3 :old 1 2] [:list-diff 1 :list-diff 3 :old 1 1] [:list-diff 1 :list-diff 3 :old 1 1] [:list-diff 1 :list-diff 3 :old 1 0] [:list-diff 1 :list-diff 3 :old 1 0] [:list-diff 1 :list-diff 3 :old 1] [:list-diff 1 :list-diff 3 :old 0] [:list-diff 1 :list-diff 3 :old 0] [:list-diff 1 :list-diff 3 :old] [:list-diff 1 :list-diff 3] [:list-diff 1 :list-diff 2 :new 6] [:list-diff 1 :list-diff 2 :new 6] [:list-diff 1 :list-diff 2 :new 5] [:list-diff 1 :list-diff 2 :new 5] [:list-diff 1 :list-diff 2 :new 4] [:list-diff 1 :list-diff 2 :new 4] [:list-diff 1 :list-diff 2 :new 3] [:list-diff 1 :list-diff 2 :new 3] [:list-diff 1 :list-diff 2 :new 2] [:list-diff 1 :list-diff 2 :new 2] [:list-diff 1 :list-diff 2 :new 1] [:list-diff 1 :list-diff 2 :new 1] [:list-diff 1 :list-diff 2 :new 0] [:list-diff 1 :list-diff 2 :new 0] [:list-diff 1 :list-diff 2 :new] [:list-diff 1 :list-diff 2 :old 0] [:list-diff 1 :list-diff 2 :old 0] [:list-diff 1 :list-diff 2 :old] [:list-diff 1 :list-diff 2] [:list-diff 1 :list-diff 1 :new 3 1] [:list-diff 1 :list-diff 1 :new 3 1] [:list-diff 1 :list-diff 1 :new 3 0] [:list-diff 1 :list-diff 1 :new 3 0] [:list-diff 1 :list-diff 1 :new 3] [:list-diff 1 :list-diff 1 :new 2] [:list-diff 1 :list-diff 1 :new 2] [:list-diff 1 :list-diff 1 :new 1 0] [:list-diff 1 :list-diff 1 :new 1 0] [:list-diff 1 :list-diff 1 :new 1] [:list-diff 1 :list-diff 1 :new 0] [:list-diff 1 :list-diff 1 :new 0] [:list-diff 1 :list-diff 1 :new] [:list-diff 1 :list-diff 1 :old] [:list-diff 1 :list-diff 1 :old] [:list-diff 1 :list-diff 1] [:list-diff 1 :list-diff 0 :new] [:list-diff 1 :list-diff 0 :new] [:list-diff 1 :list-diff 0 :old] [:list-diff 1 :list-diff 0 :old] [:list-diff 1 :list-diff 0] [:list-diff 1 :list-diff] [:list-diff 1] [:list-diff])"
      1},
     :cardinality 80},
    :client_name
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {":efficient-fat-mallard-1" 5},
     :cardinality 20},
    :pre_data
    {:data-type "string",
     :distinct 3,
     :group-by? true,
     :commons
     {"(do (let [clojure-version (clojure-version) jvm-version (System/getProperty \"java.version\")] (str \"🐇🥕 Yo. Internal RVBBIT nREPL. Clojure \" clojure-version \" on \" jvm-version \" JVM tech\" \" 🥕🐇\")))"
      3,
      "(do (defn fibonacci [n] (loop [a 0 b 1 result []] (if (= (count result) n) result (recur b (+ a b) (conj result a))))) {:fibonacci-sequence (fibonacci 30)})"
      1,
      "\"(do\\n    (defn fibonacci [n]\\n      (loop [a 0 b 1 result []]\\n        (if (= (count result) n)\\n          result\\n          (recur b (+ a b) (conj result a)))))\\n    {:fibonacci-sequence (fibonacci 30)})\""
      1},
     :cardinality 60},
    :diff
    {:data-type "string",
     :distinct 4,
     :group-by? true,
     :commons
     {"{:old (do (let [clojure-version (clojure-version) jvm-version (System/getProperty \"java.version\")] (str \"🐇🥕 Yo. Internal RVBBIT nREPL. Clojure \" clojure-version \" on \" jvm-version \" JVM tech\" \" 🥕🐇\"))), :new \"(do\\n    (defn fibonacci [n]\\n      (loop [a 0 b 1 result []]\\n        (if (= (count result) n)\\n          result\\n          (recur b (+ a b) (conj result a)))))\\n    {:fibonacci-sequence (fibonacci 30)})\"}"
      2,
      "{:list-diff {1 {:list-diff {0 {:old let, :new defn}, 1 {:old [clojure-version (clojure-version) jvm-version (System/getProperty \"java.version\")], :new fibonacci}, 2 {:old (str \"🐇🥕 Yo. Internal RVBBIT nREPL. Clojure \" clojure-version \" on \" jvm-version \" JVM tech\" \" 🥕🐇\"), :new [n]}, 3 {:old nil, :new (loop [a 0 b 1 result []] (if (= (count result) n) result (recur b (+ a b) (conj result a))))}}}, 2 {:old nil, :new {:fibonacci-sequence (fibonacci 30)}}}}"
      1,
      "{:list-diff {1 {:list-diff {0 {:old defn, :new let}, 1 {:old fibonacci, :new [clojure-version (clojure-version) jvm-version (System/getProperty \"java.version\")]}, 2 {:old [n], :new (str \"🐇🥕 Yo. Internal RVBBIT nREPL. Clojure \" clojure-version \" on \" jvm-version \" JVM tech\" \" 🥕🐇\")}, 3 {:old (loop [a 0 b 1 result []] (if (= (count result) n) result (recur b (+ a b) (conj result a)))), :new nil}}}, 2 {:old {:fibonacci-sequence (fibonacci 30)}, :new nil}}}"
      1},
     :cardinality 80},
    :data
    {:data-type "string",
     :distinct 3,
     :group-by? true,
     :commons
     {"(do (let [clojure-version (clojure-version) jvm-version (System/getProperty \"java.version\")] (str \"🐇🥕 Yo. Internal RVBBIT nREPL. Clojure \" clojure-version \" on \" jvm-version \" JVM tech\" \" 🥕🐇\")))"
      2,
      "\"(do\\n    (defn fibonacci [n]\\n      (loop [a 0 b 1 result []]\\n        (if (= (count result) n)\\n          result\\n          (recur b (+ a b) (conj result a)))))\\n    {:fibonacci-sequence (fibonacci 30)})\""
      2,
      "(do (defn fibonacci [n] (loop [a 0 b 1 result []] (if (= (count result) n) result (recur b (+ a b) (conj result a))))) {:fibonacci-sequence (fibonacci 30)})"
      1},
     :cardinality 60}},
   :rowcount 5},
  :rowcnt-drag-2
  {:fields
   {:rowcnt_sum
    {:data-type "integer",
     :distinct 1,
     :group-by? false,
     :commons {80332 1},
     :cardinality 100}},
   :rowcount 1},
  :shows-drag-29
  {:fields
   {:location
    {:data-type "string",
     :distinct 274,
     :group-by? true,
     :commons {"San Francisco, CA" 15, "Seattle, WA" 7, "Dallas, TX" 7},
     :cardinality 54},
    :show_date
    {:data-type "string",
     :distinct 500,
     :group-by? true,
     :commons {"1983-08-24" 1, "1998-04-07" 1, "1992-06-25" 1},
     :cardinality 100},
    :show_id
    {:data-type "string",
     :distinct 500,
     :group-by? true,
     :commons
     {"https://www.metallica.com/tour/1983-08-24-austin-texas.html" 1,
      "https://www.metallica.com/tour/1989-06-18-grand-forks-north-dakota.html" 1,
      "https://www.metallica.com/tour/2022-07-03-bilbao-spain.html" 1},
     :cardinality 100},
    :show_name
    {:data-type "string",
     :distinct 406,
     :group-by? true,
     :commons {"Sonisphere" 7, "Lollapalooza" 6, "Monsters of Rock" 6},
     :cardinality 81},
    :title
    {:data-type "string",
     :distinct 500,
     :group-by? true,
     :commons
     {"2010-09-22 Christchurch, New Zealand" 1,
      "1991-10-30 Madison, WI" 1,
      "2012-06-09 Castle Donington, England" 1},
     :cardinality 100},
    :tour_name
    {:data-type "string",
     :distinct 31,
     :group-by? true,
     :commons {nil 103, "Damaged Justice" 55, "Wherever We May Roam" 54},
     :cardinality 6},
    :ts
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {"2023-09-24 19:19:11" 500},
     :cardinality 0}},
   :rowcount 500},
  :fabric-hop-3
  {:fields
   {:vec-val
    {:data-type "string",
     :distinct 9,
     :group-by? true,
     :commons {},
     :cardinality 90}},
   :rowcount 10},
  :fabric-hop-6
  {:fields
   {:vec-val
    {:data-type "string",
     :distinct 17,
     :group-by? true,
     :commons {},
     :cardinality 89}},
   :rowcount 19},
  :gen-viz-828
  {:fields
   {:agg
    {:data-type "integer",
     :distinct 230,
     :group-by? false,
     :commons {76 5, 146 4, 116 4},
     :cardinality 72},
    :date_posted
    {:data-type "string",
     :distinct 317,
     :group-by? true,
     :commons {"2000-12-09" 1, "2010-08-30" 1, "2003-11-08" 1},
     :cardinality 100}},
   :rowcount 317},
  :ufo_sightings
  {:fields
   {:query_error
    {:data-type "string",
     :distinct 4,
     :group-by? true,
     :commons
     {nil 1,
      "{:datasource #object[com.zaxxer.hikari.HikariDataS" 1,
      "(from database connection)" 1},
     :cardinality 100}},
   :rowcount 4},
  :offenses
  {:fields
   {:query_error
    {:data-type "string",
     :distinct 4,
     :group-by? true,
     :commons
     {nil 1,
      "{:datasource #object[com.zaxxer.hikari.HikariDataS" 1,
      "(from database connection)" 1},
     :cardinality 100}},
   :rowcount 4},
  :fabric-hop-9
  {:fields
   {:vec-val
    {:data-type "string",
     :distinct 20,
     :group-by? true,
     :commons {},
     :cardinality 95}},
   :rowcount 21},
  :gen-viz-84
  {:fields
   {:rows
    {:data-type "integer",
     :distinct 6,
     :group-by? false,
     :commons {65114 1, 1905 1, 105 1},
     :cardinality 100},
    :country
    {:data-type "string",
     :distinct 6,
     :group-by? true,
     :commons {"us" 1, "gb" 1, "de" 1},
     :cardinality 100}},
   :rowcount 6},
  :connections-sys
  {:fields
   {:database_name
    {:data-type "string",
     :distinct 3,
     :group-by? true,
     :commons {"*cache-db*" 5, "SQLite" 3, "*csv-import-db*" 1},
     :cardinality 33},
    :connection_id
    {:data-type "string",
     :distinct 9,
     :group-by? true,
     :commons {"history-db" 1, "imported" 1, "bigfoot-ufos" 1},
     :cardinality 100},
    :styler_highlight_8717ss
    {:data-type "integer",
     :distinct 1,
     :group-by? true,
     :commons {1 9},
     :cardinality 11}},
   :rowcount 9},
  :clover-hop-2
  {:fields
   {:vec-val
    {:data-type "function",
     :distinct 2,
     :group-by? true,
     :commons {},
     :cardinality 100}},
   :rowcount 2},
  :ufo-sightings-drag-9
  {:fields
   {:duration_seconds_int
    {:data-type "integer",
     :distinct 54,
     :group-by? true,
     :commons {120 53, 180 45, 300 45},
     :cardinality 10},
    :city
    {:data-type "string",
     :distinct 157,
     :group-by? true,
     :commons {"akron" 41, "abilene" 32, "aberdeen" 19},
     :cardinality 31},
    :date_posted
    {:data-type "string",
     :distinct 194,
     :group-by? true,
     :commons {"2001-08-05" 20, "2008-10-31" 12, "2009-12-12" 11},
     :cardinality 38},
    :state
    {:data-type "string",
     :distinct 45,
     :group-by? true,
     :commons {nil 120, "oh" 48, "tx" 39},
     :cardinality 9},
    :duration_seconds
    {:data-type "string",
     :distinct 54,
     :group-by? true,
     :commons {"120" 53, "300" 45, "180" 45},
     :cardinality 10},
    :duration_hours
    {:data-type "string",
     :distinct 225,
     :group-by? true,
     :commons {"2 minutes" 21, "3 minutes" 18, "1 minute" 18},
     :cardinality 44},
    :shape
    {:data-type "string",
     :distinct 22,
     :group-by? true,
     :commons {"light" 103, "triangle" 62, "fireball" 49},
     :cardinality 4},
    :datetime
    {:data-type "string",
     :distinct 492,
     :group-by? true,
     :commons
     {"1989-06-04 22:30:00.000000" 3,
      "2010-05-29 21:50:00.000000" 2,
      "2006-11-30 12:17:00.000000" 2},
     :cardinality 98},
    :country
    {:data-type "string",
     :distinct 6,
     :group-by? true,
     :commons {"us" 288, nil 113, "au" 37},
     :cardinality 1}},
   :rowcount 500},
  :tmp--1440587341-hist-sys
  {:fields
   {:kp
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {"[:block-4810 :views :hare-vw]" 1},
     :cardinality 100},
    :key
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {":hare-vw" 1},
     :cardinality 100},
    :updated
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {"2024-07-31 00:36:48" 1},
     :cardinality 100},
    :type
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {":views" 1},
     :cardinality 100},
    :panel_key
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {":block-4810" 1},
     :cardinality 100},
    :diff_kp
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons
     {"([1 1 :new] [1 1 :new] [1 1 :old] [1 1 :old] [1 1] [1 0] [1 0] [1] [0 1 :margin :new] [0 1 :margin :new] [0 1 :margin :old] [0 1 :margin :old] [0 1 :margin] [0 1 :border-radius :new] [0 1 :border-radius :new] [0 1 :border-radius :old] [0 1 :border-radius :old] [0 1 :border-radius] [0 1 :padding :new] [0 1 :padding :new] [0 1 :padding :old] [0 1 :padding :old] [0 1 :padding] [0 1 :padding-left :new] [0 1 :padding-left :new] [0 1 :padding-left :old] [0 1 :padding-left :old] [0 1 :padding-left] [0 1 :padding-top :new] [0 1 :padding-top :new] [0 1 :padding-top :old] [0 1 :padding-top :old] [0 1 :padding-top] [0 1 :cursor :new] [0 1 :cursor :new] [0 1 :cursor :old] [0 1 :cursor :old] [0 1 :cursor] [0 1 :margin-top :new] [0 1 :margin-top :new] [0 1 :margin-top :old] [0 1 :margin-top :old] [0 1 :margin-top] [0 1 :background-color :new] [0 1 :background-color :new] [0 1 :background-color :old] [0 1 :background-color :old] [0 1 :background-color] [0 1 :transition :new] [0 1 :transition :new] [0 1 :transition :old] [0 1 :transition :old] [0 1 :transition] [0 1 :font-size :new] [0 1 :font-size :new] [0 1 :font-size :old] [0 1 :font-size :old] [0 1 :font-size] [0 1 :box-shadow :new] [0 1 :box-shadow :new] [0 1 :box-shadow :old] [0 1 :box-shadow :old] [0 1 :box-shadow] [0 1] [0 0] [0 0] [0])"
      1},
     :cardinality 100},
    :client_name
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {":efficient-fat-mallard-1" 1},
     :cardinality 100},
    :pre_data
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons
     {"[:box :align :center :justify :center :attr {:id \":block-eee0.:hi\"} :style {:font-size \"21px\", :font-weight 700, :padding-top \"6px\", :padding-left \"14px\", :margin-top \"8px\", :color :theme/block-tab-selected-font-color, :font-family :theme/base-font} :child \"FFF day for planting seffffeds & planning adventddddures!\"]"
      1},
     :cardinality 100},
    :diff
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons
     {"[[8 {:box-shadow {:old nil, :new \"0 4px 6px rgba(0, 0, 0, 0.1)\"}, :font-size {:old \"21px\", :new \"24px\"}, :transition {:old nil, :new \"all 0.3s ease\"}, :background-color {:old nil, :new \"rgba(255, 255, 255, 0.1)\"}, :margin-top {:old \"8px\", :new nil}, :cursor {:old nil, :new \"pointer\"}, :padding-top {:old \"6px\", :new nil}, :padding-left {:old \"14px\", :new nil}, :padding {:old nil, :new \"12px 20px\"}, :border-radius {:old nil, :new \"10px\"}, :margin {:old nil, :new \"10px\"}}] [10 {:old \"FFF day for planting seffffeds & planning adventddddures!\", :new \"Fine day for planting seeds & planning adventures!\"}]]"
      1},
     :cardinality 100},
    :data
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons
     {"[:box :align :center :justify :center :attr {:id \":block-eee0.:hi\"} :style {:box-shadow \"0 4px 6px rgba(0, 0, 0, 0.1)\", :color :theme/block-tab-selected-font-color, :font-size \"24px\", :transition \"all 0.3s ease\", :font-weight 700, :background-color \"rgba(255, 255, 255, 0.1)\", :cursor \"pointer\", :padding \"12px 20px\", :border-radius \"10px\", :font-family :theme/base-font, :margin \"10px\"} :child \"Fine day for planting seeds & planning adventures!\"]"
      1},
     :cardinality 100}},
   :rowcount 1},
  :tmp-1865039921-hist-sys
  {:fields
   {:kp
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {"[:block-9339 :clojure :clojure-hop-8]" 3},
     :cardinality 33},
    :key
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {":clojure-hop-8" 3},
     :cardinality 33},
    :updated
    {:data-type "string",
     :distinct 3,
     :group-by? true,
     :commons
     {"2024-07-30 22:52:34" 1, "2024-07-30 22:53:18" 1, "2024-07-30 22:53:29" 1},
     :cardinality 100},
    :type
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {":clojure" 3},
     :cardinality 33},
    :panel_key
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {":block-9339" 3},
     :cardinality 33},
    :diff_kp
    {:data-type "string",
     :distinct 3,
     :group-by? true,
     :commons
     {"([:list-diff 1 :list-diff 5 :new] [:list-diff 1 :list-diff 5 :new] [:list-diff 1 :list-diff 5 :old] [:list-diff 1 :list-diff 5 :old] [:list-diff 1 :list-diff 5] [:list-diff 1 :list-diff 4 :new] [:list-diff 1 :list-diff 4 :new] [:list-diff 1 :list-diff 4 :old] [:list-diff 1 :list-diff 4 :old] [:list-diff 1 :list-diff 4] [:list-diff 1 :list-diff] [:list-diff 1] [:list-diff])"
      1,
      "([:list-diff 1 :list-diff 6 :new] [:list-diff 1 :list-diff 6 :new] [:list-diff 1 :list-diff 6 :old] [:list-diff 1 :list-diff 6 :old] [:list-diff 1 :list-diff 6] [:list-diff 1 :list-diff 5 :new] [:list-diff 1 :list-diff 5 :new] [:list-diff 1 :list-diff 5 :old] [:list-diff 1 :list-diff 5 :old] [:list-diff 1 :list-diff 5] [:list-diff 1 :list-diff 4 :new] [:list-diff 1 :list-diff 4 :new] [:list-diff 1 :list-diff 4 :old] [:list-diff 1 :list-diff 4 :old] [:list-diff 1 :list-diff 4] [:list-diff 1 :list-diff] [:list-diff 1] [:list-diff])"
      1,
      "([:list-diff 1 :list-diff 7 :new] [:list-diff 1 :list-diff 7 :new] [:list-diff 1 :list-diff 7 :old] [:list-diff 1 :list-diff 7 :old] [:list-diff 1 :list-diff 7] [:list-diff 1 :list-diff 6 :new] [:list-diff 1 :list-diff 6 :new] [:list-diff 1 :list-diff 6 :old] [:list-diff 1 :list-diff 6 :old] [:list-diff 1 :list-diff 6] [:list-diff 1 :list-diff 5 :new] [:list-diff 1 :list-diff 5 :new] [:list-diff 1 :list-diff 5 :old] [:list-diff 1 :list-diff 5 :old] [:list-diff 1 :list-diff 5] [:list-diff 1 :list-diff] [:list-diff 1] [:list-diff])"
      1},
     :cardinality 100},
    :client_name
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {":efficient-fat-mallard-1" 3},
     :cardinality 33},
    :pre_data
    {:data-type "string",
     :distinct 3,
     :group-by? true,
     :commons
     {"(do (+ 9 8333 7 222))" 1,
      "(do (+ 9 8333 7 11 222))" 1,
      "(do (+ 9 8333 7 33 11 222))" 1},
     :cardinality 100},
    :diff
    {:data-type "string",
     :distinct 3,
     :group-by? true,
     :commons
     {"{:list-diff {1 {:list-diff {4 {:old 222, :new 11}, 5 {:old nil, :new 222}}}}}"
      1,
      "{:list-diff {1 {:list-diff {4 {:old 11, :new 33}, 5 {:old 222, :new 11}, 6 {:old nil, :new 222}}}}}"
      1,
      "{:list-diff {1 {:list-diff {5 {:old 11, :new 33}, 6 {:old 222, :new 11}, 7 {:old nil, :new 222}}}}}"
      1},
     :cardinality 100},
    :data
    {:data-type "string",
     :distinct 3,
     :group-by? true,
     :commons
     {"(do (+ 9 8333 7 11 222))" 1,
      "(do (+ 9 8333 7 33 11 222))" 1,
      "(do (+ 9 8333 7 33 33 11 222))" 1},
     :cardinality 100}},
   :rowcount 3},
  :fabric-hop-1
  {:fields
   {:vec-val
    {:data-type "string",
     :distinct 17,
     :group-by? true,
     :commons {},
     :cardinality 94}},
   :rowcount 18},
  :new-clojure-7
  {:fields
   {:vec-val
    {:data-type "integer",
     :distinct 19,
     :group-by? true,
     :commons {},
     :cardinality 95}},
   :rowcount 20},
  :kits-drag-26
  {:fields
   {:item_idx
    {:data-type "integer",
     :distinct 1,
     :group-by? true,
     :commons {0 500},
     :cardinality 0},
    :item_options
    {:data-type "string",
     :distinct 9,
     :group-by? true,
     :commons
     {"{:options {:actions? false, :pages? false, :search? false}, :parameters {}, :mutates {}, :description \"query-log :new-query\"}"
      247,
      "{:options {:actions? false, :pages? false, :search? false}, :parameters {}, :mutates {}, :description \"query-log :client-stats-drag-33\"}"
      74,
      "{:options {:actions? false, :pages? false, :search? false}, :parameters {}, :mutates {}, :description \"query-log :new-query-1\"}"
      31},
     :cardinality 1},
    :updated
    {:data-type "string",
     :distinct 156,
     :group-by? true,
     :commons
     {"2024-07-31 04:10:16" 14, "2024-07-31 04:03:36" 11, "2024-07-31 04:06:56" 9},
     :cardinality 31},
    :item_hash
    {:data-type "string",
     :distinct 449,
     :group-by? true,
     :commons {"-1269830999" 3, "692090842" 2, "-145445309" 2},
     :cardinality 89},
    :item_type
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {"kick-test!" 500},
     :cardinality 0},
    :item_name
    {:data-type "string",
     :distinct 9,
     :group-by? true,
     :commons {":new-query" 247, ":client-stats-drag-33" 74, ":new-query-1" 31},
     :cardinality 1},
    :flow_id
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {"flow-id-here!" 500},
     :cardinality 0},
    :id
    {:data-type "integer",
     :distinct 500,
     :group-by? true,
     :commons {84 1, 390 1, 49 1},
     :cardinality 100},
    :client_name
    {:data-type "string",
     :distinct 4,
     :group-by? true,
     :commons
     {":harmonious-pear-hippopotamus-34" 168,
      ":easy-indigo-prairie-dog-8" 167,
      ":courageous-long-turkey-28" 161},
     :cardinality 0},
    :item_data
    {:data-type "string",
     :distinct 449,
     :group-by? true,
     :commons
     {"{:content [\"2024-07-31 04:10:39 - query ran in 0 ms. \" [:text \"\\nSELECT *\\nFROM (SELECT (AVG(mem_used)) AS mem_used, SUBSTRING(ts, 1, 15) AS ts_hour FROM (SELECT client_name, recent_messages_per_second, messages_per_second, mem_used, batches, packets, ts FROM client_memory AS ee183 WHERE client_name = ':harmonious-pear-hippopotamus-34' ORDER BY mem_time DESC) WHERE client_name = ':harmonious-pear-hippopotamus-34' GROUP BY 2 ORDER BY ts DESC LIMIT 26)\\nLIMIT 500\\n\"] [:edn {:diff {:data-type \"string\", :distinct 2, :group-by? true, :commons {\"+24\" 1, \"728 MB\" 1}, :cardinality 100}, :mem_used {:data-type \"float\", :distinct 2, :group-by? true, :commons {7.886559563333334E8 1, 7.634485305E8 1}, :cardinality 100}, :ts_hour {:data-type \"string\", :distinct 2, :group-by? true, :commons {\"2024-07-31 04:1\" 1, \"2024-07-31 04:0\" 1}, :cardinality 100}}]], :name \"query-log :new-query\", :order 1722413439, :parameters {}, :forced-mutates {}, :step-mutates {}}"
      3,
      "{:content [\"2024-07-31 04:05:39 - query ran in 0 ms. \" [:text \"\\nSELECT *\\nFROM (SELECT (AVG(mem_used)) AS mem_used, SUBSTRING(ts, 1, 15) AS ts_hour FROM (SELECT client_name, recent_messages_per_second, messages_per_second, mem_used, batches, packets, ts FROM client_memory AS ee183 WHERE client_name = ':harmonious-pear-hippopotamus-34' ORDER BY mem_time DESC) WHERE client_name = ':harmonious-pear-hippopotamus-34' GROUP BY 2 ORDER BY ts DESC LIMIT 26)\\nLIMIT 500\\n\"] [:edn {:diff {:data-type \"string\", :distinct 1, :group-by? true, :commons {\"709 MB\" 1}, :cardinality 100}, :mem_used {:data-type \"float\", :distinct 1, :group-by? true, :commons {7.438398745555556E8 1}, :cardinality 100}, :ts_hour {:data-type \"string\", :distinct 1, :group-by? true, :commons {\"2024-07-31 04:0\" 1}, :cardinality 100}}]], :name \"query-log :new-query\", :order 1722413139, :parameters {}, :forced-mutates {}, :step-mutates {}}"
      2,
      "{:content [\"2024-07-31 04:09:54 - query ran in 1 ms. \" [:text \"\\nSELECT *\\nFROM (SELECT (AVG(mem_used)) AS mem_used, SUBSTRING(ts, 1, 15) AS ts_hour FROM (SELECT client_name, recent_messages_per_second, messages_per_second, mem_used, batches, packets, ts FROM client_memory AS ee183 WHERE client_name = ':harmonious-pear-hippopotamus-34' ORDER BY mem_time DESC) WHERE client_name = ':harmonious-pear-hippopotamus-34' GROUP BY 2 ORDER BY ts DESC LIMIT 26)\\nLIMIT 500\\n\"] [:edn {:diff {:data-type \"string\", :distinct 1, :group-by? true, :commons {\"728 MB\" 1}, :cardinality 100}, :mem_used {:data-type \"float\", :distinct 1, :group-by? true, :commons {7.634485305E8 1}, :cardinality 100}, :ts_hour {:data-type \"string\", :distinct 1, :group-by? true, :commons {\"2024-07-31 04:0\" 1}, :cardinality 100}}]], :name \"query-log :new-query\", :order 1722413394, :parameters {}, :forced-mutates {}, :step-mutates {}}"
      2},
     :cardinality 89},
    :item_key
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {":query-log" 500},
     :cardinality 0},
    :kit_name
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {":kick" 500},
     :cardinality 0}},
   :rowcount 500},
  :duration-hours-drag-43
  {:fields
   {:duration_hours
    {:data-type "string",
     :distinct 500,
     :group-by? true,
     :commons {"30 min." 1, "3 days" 1, "5-7 min" 1},
     :cardinality 100},
    :rowcnt
    {:data-type "integer",
     :distinct 162,
     :group-by? false,
     :commons {12 29, 13 23, 14 22},
     :cardinality 32}},
   :rowcount 500},
  :city-drag-26
  {:fields
   {:city
    {:data-type "string",
     :distinct 500,
     :group-by? true,
     :commons {"ottawa (canada)" 1, "burlington (canada)" 1, "cary" 1},
     :cardinality 100},
    :rowcnt
    {:data-type "integer",
     :distinct 118,
     :group-by? false,
     :commons {27 35, 26 24, 29 23},
     :cardinality 23}},
   :rowcount 500},
  :reco-counts
  {:fields
   {:table_name
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {"offenses_drag_26" 1},
     :cardinality 100},
    :cnt
    {:data-type "integer",
     :distinct 1,
     :group-by? false,
     :commons {917 1},
     :cardinality 100}},
   :rowcount 1},
  :state-drag-3
  {:fields
   {:state
    {:data-type "string",
     :distinct 68,
     :group-by? true,
     :commons {"nd" 1, "az" 1, "in" 1},
     :cardinality 100},
    :rowcnt
    {:data-type "integer",
     :distinct 68,
     :group-by? false,
     :commons {183 1, 968 1, 633 1},
     :cardinality 100}},
   :rowcount 68},
  :tmp-994178670-hist-sys {:fields {}, :rowcount 0},
  :shape-drag-7
  {:fields
   {:shape
    {:data-type "string",
     :distinct 30,
     :group-by? true,
     :commons {"formation" 1, "cone" 1, "rectangle" 1},
     :cardinality 100},
    :rowcnt
    {:data-type "integer",
     :distinct 25,
     :group-by? false,
     :commons {1 5, 2 2, 1283 1},
     :cardinality 83}},
   :rowcount 30},
  :fabric-hop-12
  {:fields
   {:vec-val
    {:data-type "string",
     :distinct 28,
     :group-by? true,
     :commons {},
     :cardinality 96}},
   :rowcount 29},
  :kit-results-sys
  {:fields
   {:item_idx
    {:data-type "integer",
     :distinct 1,
     :group-by? true,
     :commons {0 2},
     :cardinality 50},
    :item_options
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons
     {"{:options {:actions? false, :pages? false, :search? false}, :parameters {}, :mutates {}, :description \"query-log :kits-drag-26\"}"
      2},
     :cardinality 50},
    :updated
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {"2024-07-31 23:16:53" 2},
     :cardinality 50},
    :item_hash
    {:data-type "string",
     :distinct 2,
     :group-by? true,
     :commons {"1434357106" 1, "-770374444" 1},
     :cardinality 100},
    :item_type
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {"kick-test!" 2},
     :cardinality 50},
    :item_name
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {":kits-drag-26" 2},
     :cardinality 50},
    :flow_id
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {"flow-id-here!" 2},
     :cardinality 50},
    :id
    {:data-type "integer",
     :distinct 2,
     :group-by? true,
     :commons {92477 1, 92476 1},
     :cardinality 100},
    :client_name
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {":efficient-fat-mallard-1" 2},
     :cardinality 50},
    :item_data
    {:data-type "string",
     :distinct 2,
     :group-by? true,
     :commons
     {"{:content [\"2024-07-31 23:16:53 - query ran in 10 ms. \" [:text \"\\nSELECT client_name, flow_id, id, item_data, item_hash, item_idx, item_key, item_name, item_options, item_type, kit_name, updated\\nFROM kits AS dd919\\nLIMIT 500\\n\"] [:edn {:item_idx {:data-type \"integer\", :distinct 1, :group-by? true, :commons {0 500}, :cardinality 0}, :item_options {:data-type \"string\", :distinct 9, :group-by? true, :commons {\"{:options {:actions? false, :pages? false, :search? false}, :parameters {}, :mutates {}, :descriptio...\" 31}, :cardinality 1}, :updated {:data-type \"string\", :distinct 156, :group-by? true, :commons {\"2024-07-31 04:10:16\" 14, \"2024-07-31 04:03:36\" 11, \"2024-07-31 04:06:56\" 9}, :cardinality 31}, :item_hash {:data-type \"string\", :distinct 449, :group-by? true, :commons {\"-1269830999\" 3, \"692090842\" 2, \"-145445309\" 2}, :cardinality 89}, :item_type {:data-type \"string\", :distinct 1, :group-by? true, :commons {\"kick-test!\" 500}, :cardinality 0}, :item_name {:data-type \"string\", :distinct 9, :group-by? true, :commons {\":new-query\" 247, \":client-stats-drag-33\" 74, \":new-query-1\" 31}, :cardinality 1}, :flow_id {:data-type \"string\", :distinct 1, :group-by? true, :commons {\"flow-id-here!\" 500}, :cardinality 0}, :id {:data-type \"integer\", :distinct 500, :group-by? true, :commons {84 1, 390 1, 49 1}, :cardinality 100}, :client_name {:data-type \"string\", :distinct 4, :group-by? true, :commons {\":harmonious-pear-hippopotamus-34\" 168, \":easy-indigo-prairie-dog-8\" 167, \":courageous-long-turkey-28\" 161}, :cardinality 0}, :item_data {:data-type \"string\", :distinct 449, :group-by? true, :commons {\"{:content [\\\"2024-07-31 04:10:39 - query ran in 0 ms. \\\" [:text \\\"\\\\nSELECT *\\\\nFROM (SELECT (AVG(mem_use...\" 3, \"{:content [\\\"2024-07-31 04:05:39 - query ran in 0 ms. \\\" [:text \\\"\\\\nSELECT *\\\\nFROM (SELECT (AVG(mem_use...\" 2, \"{:content [\\\"2024-07-31 04:09:54 - query ran in 1 ms. \\\" [:text \\\"\\\\nSELECT *\\\\nFROM (SELECT (AVG(mem_use...\" 2}, :cardinality 89}, :item_key {:data-type \"string\", :distinct 1, :group-by? true, :commons {\":query-log\" 500}, :cardinality 0}, :kit_name {:data-type \"string\", :distinct 1, :group-by? true, :commons {\":kick\" 500}, :cardinality 0}}]], :name \"query-log :kits-drag-26\", :order 1722482213, :parameters {}, :forced-mutates {}, :step-mutates {}}"
      1,
      "{:content [\"2024-07-31 23:16:53 - query ran in 22 ms. \" [:text \"\\nSELECT client_name, flow_id, id, item_data, item_hash, item_idx, item_key, item_name, item_options, item_type, kit_name, updated\\nFROM kits AS dd919\\nLIMIT 500\\n\"] [:edn {:item_idx {:data-type \"integer\", :distinct 1, :group-by? true, :commons {0 500}, :cardinality 0}, :item_options {:data-type \"string\", :distinct 9, :group-by? true, :commons {\"{:options {:actions? false, :pages? false, :search? false}, :parameters {}, :mutates {}, :descriptio...\" 31}, :cardinality 1}, :updated {:data-type \"string\", :distinct 156, :group-by? true, :commons {\"2024-07-31 04:10:16\" 14, \"2024-07-31 04:03:36\" 11, \"2024-07-31 04:06:56\" 9}, :cardinality 31}, :item_hash {:data-type \"string\", :distinct 449, :group-by? true, :commons {\"-1269830999\" 3, \"692090842\" 2, \"-145445309\" 2}, :cardinality 89}, :item_type {:data-type \"string\", :distinct 1, :group-by? true, :commons {\"kick-test!\" 500}, :cardinality 0}, :item_name {:data-type \"string\", :distinct 9, :group-by? true, :commons {\":new-query\" 247, \":client-stats-drag-33\" 74, \":new-query-1\" 31}, :cardinality 1}, :flow_id {:data-type \"string\", :distinct 1, :group-by? true, :commons {\"flow-id-here!\" 500}, :cardinality 0}, :id {:data-type \"integer\", :distinct 500, :group-by? true, :commons {84 1, 390 1, 49 1}, :cardinality 100}, :client_name {:data-type \"string\", :distinct 4, :group-by? true, :commons {\":harmonious-pear-hippopotamus-34\" 168, \":easy-indigo-prairie-dog-8\" 167, \":courageous-long-turkey-28\" 161}, :cardinality 0}, :item_data {:data-type \"string\", :distinct 449, :group-by? true, :commons {\"{:content [\\\"2024-07-31 04:10:39 - query ran in 0 ms. \\\" [:text \\\"\\\\nSELECT *\\\\nFROM (SELECT (AVG(mem_use...\" 3, \"{:content [\\\"2024-07-31 04:05:39 - query ran in 0 ms. \\\" [:text \\\"\\\\nSELECT *\\\\nFROM (SELECT (AVG(mem_use...\" 2, \"{:content [\\\"2024-07-31 04:09:54 - query ran in 1 ms. \\\" [:text \\\"\\\\nSELECT *\\\\nFROM (SELECT (AVG(mem_use...\" 2}, :cardinality 89}, :item_key {:data-type \"string\", :distinct 1, :group-by? true, :commons {\":query-log\" 500}, :cardinality 0}, :kit_name {:data-type \"string\", :distinct 1, :group-by? true, :commons {\":kick\" 500}, :cardinality 0}}]], :name \"query-log :kits-drag-26\", :order 1722482213, :parameters {}, :forced-mutates {}, :step-mutates {}}"
      1},
     :cardinality 100},
    :item_key
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {":query-log" 2},
     :cardinality 50},
    :kit_name
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {":kick" 2},
     :cardinality 50}},
   :rowcount 2}},
 :default-col-widths
 {:block-414 {:gen-viz-797 255},
  :prando52 {:kick-931189707 461},
  :block-11609 {:city-drag-26 180},
  :block-7416 {:rowcnt-drag-2 161},
  :prando122 {:kick-931189707 461},
  :prando51 {:kick-931189707 461},
  :prando60 {:kick-931189707 461},
  :block-8805 {:duration-hours-drag-43 180},
  :system-connections-list* {:connections-sys 146},
  :system-fields-list* {:fields-sys 193},
  :block-7319 {:shape-drag-7 180},
  :block-3777 {:state-drag-3 180},
  :block-6582 {:kits-drag-26 109},
  :block-1646 {:item-key-drag-3 180},
  :block-1449 {:ufo-sightings-drag-9 173},
  :system-tables-list* {:tables-sys 152},
  :block-4346 {:offenses-drag-24 100}},
 :runstream-drops nil,
 :tabs
 ["through the rabbit hole and out the other side"
  "sapphire ape"
  "fat zebra"
  "star-shaped wallaby"
  "globular koala"
  "salmon lion"
  "coffee llama"
  "victorious hippopotamus"
  "amaranth mouse"
  "motivating falcon"
  "refined dove"
  "black crow"],
 :selected-cols nil,
 :server
 {:settings
  {:harvest-on-boot? true,
   :default "./screens/looking-glass-redux.edn",
   :new-block-rand
   ["Why, sometimes I've believed as many as six impossible things before breakfast."
    "Imagination is the only weapon in the war against reality."
    "It's no use going back to yesterday, because I was a different person then."
    "Who in the world am I? Ah, that's the great puzzle."
    "Curiouser and curiouser!"
    "If you don't know where you are going any road can take you there."
    "We're all mad here."
    "I can't go back to yesterday because I was a different person then."
    "It's always tea-time."
    "Begin at the beginning and go on till you come to the end; then stop."
    "I knew who I was this morning, but I've changed a few times since then."
    "How long is forever? Sometimes, just one second."
    "If everybody minded their own business, the world would go around a great deal faster than it does."
    "I don't think... then you shouldn't talk, said the Hatter."
    "Oh, how I wish I could shut up like a telescope! I think I could, if I only knew how to begin."
    "You're entirely bonkers. But I'll tell you a secret... all the best people are."
    "It was much pleasanter at home, when one wasn't always growing larger and smaller."
    "I wonder if I've been changed in the night. Let me think. Was I the same when I got up this morning?"
    "Have I gone mad? I'm afraid so, but let me tell you something, the best people usually are."
    "Well, I never heard it before, but it sounds uncommon nonsense."
    "Why, sometimes I've believed as many as six impossible things before breakfast."
    "Imagination is the only weapon in the war against reality."
    "Who in the world am I? Ah, that's the great puzzle."
    "We're all mad here."
    "How long is forever? Sometimes, just one second."
    "The world is full of obvious things which nobody by any chance ever observes."
    "Reality is that which, when you stop believing in it, doesn't go away."
    "The sky above the port was the color of television, tuned to a dead channel."
    "Information wants to be free."
    "The future is already here – it's just not evenly distributed."
    "He had a chip in his head, an interface jack that allowed him to plug his brain directly into the console."
    "The 'Net is a waste of time, and that's exactly what's right about it."
    "Cyberspace. A consensual hallucination experienced daily by billions of legitimate operators, in every nation."
    "The street finds its own uses for things."
    "Accelerated world. Accelerated nervous system to go with it."
    "The future has arrived — it's just not evenly distributed yet."
    "It's not enough to be able to pick up a sword. You have to know which end to poke into the enemy."
    "When you want to know how things really work, study them when they're coming apart."
    "The human sensory system is a lot more complex and weird than most people realize."
    "Time moves in one direction, memory in another."
    "The only thing that keeps you sane is to think that it's all a bad dream."
    "We're an information economy. They teach you that in school. What they don't tell you is that it's impossible to move, to live, to operate at any level without leaving traces, bits, seemingly meaningless fragments of personal information."
    "We monitor many frequencies. We listen always. Came a voice, out of the babel of tongues, speaking to us. It played us a mighty dub."
    "Secrets are not the same as surprises."
    "Neuromancer. The lane to the land of the dead."],
   :eleven-labs-api-key nil,
   :modes
   {:terminal [:terminal :*data],
    :markdown [:markdown :*data],
    :rowset [:honeycomb {:select [:*], :from {:data :*data}} 11 9],
    :pre
    [:pre
     {:style
      {:color :theme/editor-outer-rim-color,
       :background-color "#00000000",
       :border "none",
       :text-shadow "4px 4px 4px #00000088",
       :font-size "17px",
       :font-family :theme/monospaced-font}}
     [:str :*data]],
    :edn [:edn :*data],
    :clover [:box :child :*data],
    :pretty [:pretty-box :*data],
    :text [:console :*data],
    :data [:data-viewer :*data]},
   :kits {},
   :clover-templates
   {:color-theft
    {:args [:*input],
     :body
     [:data-viewer [:run-solver [:get-my-colors {:input-image-path :*input}]]]},
    :pretty-box
    {:args [:*input],
     :body
     [:box
      :size
      "auto"
      :align
      :center
      :justify
      :center
      :style
      {:color :theme/editor-outer-rim-color,
       :font-size [:auto-size-px [:str :*input]]}
      :child
      [:str :*input]]},
    :clj
    {:args [:code],
     :body
     [:run-solver
      {:signal false, :cache? false, :type :clojure, :input-map {}, :data :code}]},
    :clj2
    {:args [:code],
     :body
     [:run-solver
      {:signal false, :cache? false, :type :clojure2, :input-map {}, :data :code}]},
    :cheese-burger
    {:args [:x],
     :body
     [:box
      :style
      {:color "yellow", :font-size "23px"}
      :child
      [:str :x "CHEESEBURGER!"]]}},
   :eleven-labs-default-voice-name "Not OG Buffy",
   :debug-level 1,
   :screens
   ["GGGeat-ochre-mole-exiled-from-abyssal-plain"
    "SSSSSSuccessful-oval-sea-urchin-of-mountain-range"
    "SSuccessful-oval-sea-urchin-of-mountain-range"
    "aaa-run-amok"
    "aaaaah-esday-the-day"
    "aaaaah-wednesday-the-day"
    "aaaah-wednesday-the-day"
    "alarm-clock-tv"
    "alarm-clock1"
    "alarm-clock2"
    "alarm-clock22"
    "alarm-clock23"
    "alice-puzzle-1"
    "asdasdasdasd"
    "autumn-theme"
    "battle-mage"
    "bigfoot-snapshots"
    "bigfoot-snapshots2"
    "bigfoot-snapshots3"
    "blackberries"
    "blackberries2"
    "blackberries3"
    "blackberries3-narrow"
    "blackberries3-narrow2"
    "blank-blue"
    "blank-sizzle"
    "blank-sizzle2"
    "blue-pines"
    "boston-test-10-3-23"
    "broken-jacket"
    "bunch of bullshit"
    "bunch of bullshit2"
    "bunch of bullshit4"
    "caliope"
    "calliope"
    "canvas-scrubber-test1"
    "capecod-viking"
    "chaos simple"
    "chaos-views"
    "chompers"
    "claude-testing2"
    "clean-grey-defaults"
    "code-data-literal-stonks-test"
    "conifer-boughs"
    "counting-lord-of-the-woods"
    "crazy-alice"
    "dark-crested-jackelope"
    "data-literals-test-sunday"
    "data-literals-test-sundaydd"
    "demo-dark-pumpkin-bkgrd-sept23"
    "demo-light-bkgrd-sept23"
    "demo-lime-green-slime"
    "desktops-and-broomsticks"
    "duality-of-lepus"
    "duality-of-lepus33"
    "error-monitor"
    "error-monitor-vanessa"
    "error-monitor-vanessa2"
    "error-monitor-vanessa3"
    "error-monitor-vanessa4"
    "error-monitor-vanessa5"
    "evil-main-street"
    "fake-books-1"
    "fake-bricks"
    "fetching-pentagonal-termite-of-tghe-submarine-canyon"
    "final-fantasy-dorchester"
    "fox-hills"
    "game-of-life"
    "glass-fish-board-test"
    "green-storm-city"
    "hue-board-1"
    "late-winter-theme"
    "lavender-side-eye"
    "layout-test-1"
    "layout-test-12"
    "light-theme"
    "literal-data-test"
    "looking-glass-conway"
    "looking-glass-redux-conway2"
    "looking-glass-redux-mix5"
    "looking-glass-redux-test"
    "looking-glass-redux-viking"
    "looking-glass-redux-viking2"
    "looking-glass-redux2"
    "looking-glass-redux23a"
    "looking-glass-redux23abb"
    "looking-glass-redux23b"
    "looking-glass-redux2a"
    "looking-glass-redux2aa"
    "looking-glass-redux45"
    "looking-glass-redux79"
    "looking-glass-sine-wave"
    "luck-of-the-irish"
    "mapbox-test"
    "may-20"
    "my-goodness"
    "my-goodness-the-sequel"
    "neverwinter-amy"
    "night-city-never-sleeps"
    "nightcity-cape-cod"
    "nivo-getting-better!"
    "nivo-hacking-2023"
    "nivo-hacking-2023333"
    "nivo-hacking-october-2nd"
    "nostromo-console"
    "old-defaults"
    "old-fashioned-christmas"
    "old-town-snow-stars"
    "pensive-look"
    "pensive-look2"
    "pine-wood-dawn"
    "pink-and-green-elk"
    "pink-dusk-falls"
    "pinup-rabbit-fields"
    "pomp-girl1"
    "pomp-girl2"
    "poor-touring-me"
    "pres-sql-test-1"
    "purple-dusk-old-town"
    "purple-nightshades"
    "purple-techno-sunset"
    "recharts-test-blocks"
    "refresh-test"
    "repl-demo-july23"
    "repl-tests-3"
    "retro-machines"
    "riffle-test"
    "server-stats"
    "server-stats2"
    "server-stats2a"
    "sick-of-your-shit"
    "sizzle-board-1"
    "sneaky-swamp-creatures1"
    "solver-test"
    "stop-drawing-dead-dashboards"
    "swamp-nightgown"
    "swamp-reacher"
    "system-monitor"
    "system-monitor2"
    "tallica-param-test2"
    "tangerine-dreams"
    "technicolor-shanny"
    "test-blog-screen"
    "the-future-soon"
    "the-generated-lass"
    "the-generated-lass-glow"
    "the-generated-lass-ne"
    "the-generated-lass-sgt"
    "the-generated-lassff"
    "the-memo"
    "the-memo2"
    "the-outer-blues"
    "trad-hybrid"
    "tweet-bigfoot-is-blurry"
    "tweet-demo-thing-bigfoot-is-blurry"
    "unnamed-screen!"
    "viking-pastels"
    "weave-test"
    "weave-test1"
    "weave-test122"
    "who ya gonna call?"
    "who ya gonna call? again"
    "winter-theme"
    "winter-theme-choom"
    "winter-theme2"
    "winter-theme33"
    "winter-theme45"
    "winter-theme47"
    "winter-twin-peaks"
    "witchy425"
    "wonderland-horror-interface"
    "wow-board"]}},
 :runstreams {"flow-forever" {:open? false, :open-outputs? true}},
 :editor? false,
 :buffy? false,
 :valid-kits
 {[:outliers :get-outliers]
  [[:block-414 :queries :gen-viz-797]
   [:block-1123 :queries :location-drag-25]
   [:block-3393 :queries :shows-drag-29]
   [:block-135 :queries :stats-types-34]
   [:block-11609 :queries :city-drag-26]
   [:block-7416 :queries :rowcnt-drag-2]
   [:block-10810 :queries :time-freq-345d]
   [:block-204 :queries :gen-viz-828]
   [:block-204 :queries :gen-viz-94]
   [:block-8805 :queries :duration-hours-drag-43]
   [:block-94 :queries :gen-viz-84]
   [:block-7319 :queries :shape-drag-7]
   [:block-3777 :queries :state-drag-3]
   [:block-6582 :queries :kits-drag-26]
   [:block-1449 :queries :ufo-sightings-drag-9]
   [:block-4346 :queries :offenses-drag-24]],
  [:outliers :get-outliers-maps] [[:block-6979 :clojure :new-clojure-8]]},
 :memory [1553303075 1516537295 4294705152],
 :client-name :efficient-fat-mallard-1,
 :runstreams-lookups
 {"flow-forever"
  {:open-inputs
   {:dialog-width {:user-input 10, :defaults {}, :type {:out :integer}},
    :duration-to-show {:user-input 600, :defaults {}, :type :integer},
    :some-input-int {:user-input 333, :defaults {}, :type {:out :integer}},
    :another-input-int {:user-input 234.5, :defaults {}, :type {:out :float}},
    :dialog-height {:user-input 3, :defaults {}, :type :integer}},
   :blocks
   {:dialog-ui-box
    {:type {:out :any},
     :ttype :open-fn,
     :meta nil,
     :last? false,
     :defaults {},
     :sample "no sample data"},
    :dialog-width
    {:type {:out {:out :integer}},
     :ttype :open-block,
     :meta nil,
     :last? false,
     :defaults {},
     :sample "no sample data"},
    :final-math
    {:type {:out :any},
     :ttype :open-fn,
     :meta nil,
     :last? false,
     :defaults {},
     :sample "no sample data"},
    :render-the-answer
    {:type {:out :any},
     :ttype :open-fn,
     :meta nil,
     :last? true,
     :defaults {},
     :sample "no sample data"},
    :user-value-in
    {:type {:out :any},
     :ttype :open-fn,
     :meta nil,
     :last? false,
     :defaults {},
     :sample "no sample data"},
    :dialog-pushed
    {:type {:out :any},
     :ttype :alert!,
     :meta nil,
     :last? false,
     :defaults {},
     :sample "no sample data"},
    :render-the-choice
    {:type {:out :any},
     :ttype :open-fn,
     :meta nil,
     :last? false,
     :defaults {},
     :sample "no sample data"},
    :more-math
    {:type {:out :any},
     :ttype :open-fn,
     :meta nil,
     :last? false,
     :defaults {},
     :sample "no sample data"},
    :duration-to-show
    {:type {:out :integer},
     :ttype :open-block,
     :meta nil,
     :last? false,
     :defaults {},
     :sample "no sample data"},
    :some-math
    {:type {:out :any},
     :ttype :open-fn,
     :meta nil,
     :last? false,
     :defaults {},
     :sample "no sample data"},
    :some-input-int
    {:type {:out {:out :integer}},
     :ttype :open-block,
     :meta nil,
     :last? false,
     :defaults {},
     :sample "no sample data"},
    :another-input-int
    {:type {:out {:out :float}},
     :ttype :open-block,
     :meta nil,
     :last? false,
     :defaults {},
     :sample "no sample data"},
    :dialog-height
    {:type {:out :integer},
     :ttype :open-block,
     :meta nil,
     :last? false,
     :defaults {},
     :sample "no sample data"}}}},
 :flow-editor? true,
 :openai-api-key "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",
 :window {:w 2930, :h 1212},
 :quake-console? false,
 :implicit-rowsets
 {:solver
  [:fabric-hop
   :fabric-hop-1
   nil
   :fabric-hop-2
   :fabric-hop-3
   :clojure-hop-10
   :fabric-hop-4
   :new-clojure-7
   :virtual-view
   :fabric-hop-5
   :fabric-hop-6
   :clojure-hop-8
   :fabric-hop-9
   :fabric-hop-10
   :fabric-hop-11
   :fabric-hop-12
   :fabric-hop-13],
  :clover [:clover-hop-2]},
 :post-meta
 {:fields-sys {:* {:rowcount 12}},
  :tmp-1459870191-hist-sys {:* {:rowcount 0}},
  :tables-sys {:* {:rowcount 23}},
  :flows-sys {:* {:rowcount 99}},
  :gen-viz-94 {:* {:rowcount 1}},
  :tmp-726567637-hist-sys {:* {:rowcount 0}},
  :tmp--632206769-hist-sys {:* {:rowcount 0}},
  :tmp-517156166-hist-sys {:* {:rowcount 0}},
  :offenses-drag-24 {:* {:rowcount 319073}},
  :tmp--13861783-hist-sys {:* {:rowcount 1}},
  :rowcnt-drag-2 {:* {:rowcount 1}},
  :tmp--1440587341-hist-sys {:* {:rowcount 1}},
  :tmp-1865039921-hist-sys {:* {:rowcount 3}},
  :kits-drag-26 {:* {:rowcount 92474}},
  :tmp-994178670-hist-sys {:* {:rowcount 0}},
  :kit-results-sys {:* {:rowcount 2}}},
 :flow-estimates
 {:raw-custom-override1741745686
  {:times 1.596, :run-id :raw-custom-override1741745686},
  :raw-custom-override292053292
  {:times 10.174, :run-id :raw-custom-override292053292},
  :raw-custom-override-539536411
  {:times 0.271, :run-id :raw-custom-override-539536411},
  :raw-custom-override1679638427
  {:times 10.174, :run-id :raw-custom-override1679638427},
  :raw-custom-override-1367061024
  {:times 10.174, :run-id :raw-custom-override-1367061024},
  :raw-custom-override-192244232
  {:times 10.174, :run-id :raw-custom-override-192244232},
  :raw-custom-override-1814949673
  {:times 0.032, :run-id :raw-custom-override-1814949673},
  :raw-custom-override-2052853698
  {:times 10.174, :run-id :raw-custom-override-2052853698},
  :raw-custom-override898831895
  {:times 4.328, :run-id :raw-custom-override898831895},
  :raw-custom-override-419580842
  {:times 10.174, :run-id :raw-custom-override-419580842},
  :raw-custom-override-1504390522
  {:times 10.174, :run-id :raw-custom-override-1504390522},
  :raw-custom-override-767072736
  {:times 1.389, :run-id :raw-custom-override-767072736},
  :raw-custom-override-362670283
  {:times 10.174, :run-id :raw-custom-override-362670283},
  :raw-custom-override359848577
  {:times 10.174, :run-id :raw-custom-override359848577},
  :raw-custom-override-500761935
  {:times 10.174, :run-id :raw-custom-override-500761935},
  :raw-custom-override928529714
  {:times 10.174, :run-id :raw-custom-override928529714},
  :raw-custom-override257937760
  {:times 9.007, :run-id :raw-custom-override257937760},
  :raw-custom-override242756787
  {:times 10.174, :run-id :raw-custom-override242756787},
  :raw-custom-override-1815915228
  {:times 10.174, :run-id :raw-custom-override-1815915228},
  :raw-custom-override28281997
  {:times 10.174, :run-id :raw-custom-override28281997},
  :raw-custom-override1059203497
  {:times 10.174, :run-id :raw-custom-override1059203497},
  :raw-custom-override1076122033
  {:times 10.174, :run-id :raw-custom-override1076122033},
  :raw-custom-override552946358
  {:times 10.174, :run-id :raw-custom-override552946358},
  :raw-custom-override896478263
  {:times 10.174, :run-id :raw-custom-override896478263}},
 :status
 {"kick-test!" {:kick :item-key-drag-3},
  :heartbeat
  {:kick
   [:solver/raw-custom-override-1346418485
    :solver-status/efficient-fat-mallard-1>raw-custom-override-1268388451>running?
    :solver/raw-custom-override999490069
    :solver/raw-custom-override770767720
    :solver-status/efficient-fat-mallard-1>get-my-colors-1924445472>running?
    :flow-status/flow-forever>*running?
    :solver-status/efficient-fat-mallard-1>raw-custom-override-924386039>running?
    :solver/raw-custom-override-834238199
    :solver-status/efficient-fat-mallard-1>raw-custom-override1102182644>running?
    :solver/raw-custom-override-1883544515
    :solver-status/efficient-fat-mallard-1>raw-custom-override-1346418485>running?
    :solver-status/efficient-fat-mallard-1>raw-custom-override-381384891>running?
    :solver/get-my-colors-1924445472
    :solver-status/efficient-fat-mallard-1>raw-custom-override770767720>running?
    :solver/raw-custom-override1741745686
    :solver-status/efficient-fat-mallard-1>raw-custom-override-2114295132>running?
    :solver/raw-custom-override-2114295132
    :solver/raw-custom-override455569893
    :solver-status/efficient-fat-mallard-1>raw-custom-override-1883544515>running?
    :solver-status/efficient-fat-mallard-1>raw-custom-override2027600861>running?
    :solver-status/efficient-fat-mallard-1>raw-custom-override-834238199>running?
    :solver/raw-custom-override2027600861
    :time/minute
    :solver-status/efficient-fat-mallard-1>raw-custom-override1741745686>running?
    :solver/raw-custom-override1102182644
    :solver/raw-custom-override257937760
    :solver/raw-custom-override-348255305
    :solver/raw-custom-override-1304833791
    :solver/raw-custom-override1906003790
    :solver/raw-custom-override2022429909
    :solver-status/efficient-fat-mallard-1>raw-custom-override-1304833791>running?
    :solver/raw-custom-override-1268388451
    :solver-status/efficient-fat-mallard-1>raw-custom-override999490069>running?
    :solver/raw-custom-override-576047082
    :solver-status/efficient-fat-mallard-1>raw-custom-override1741745686
    :solver-status/efficient-fat-mallard-1>raw-custom-override-576047082>running?
    :solver-status/efficient-fat-mallard-1>raw-custom-override-348255305>running?
    :solver/raw-custom-override-924386039
    :flow-status/live-scratch-flow>*running?
    :solver-status/efficient-fat-mallard-1>raw-custom-override455569893>running?
    :time/second
    :solver-meta/raw-custom-override1741745686>output>evald-result>out
    :solver-status/efficient-fat-mallard-1>raw-custom-override257937760>running?
    :solver-status/efficient-fat-mallard-1>get-my-colors872602644>running?
    :solver-status/efficient-fat-mallard-1>raw-custom-override1906003790>running?
    :solver-meta/raw-custom-override1741745686
    :solver/raw-custom-override-381384891
    :solver-status/efficient-fat-mallard-1>raw-custom-override2022429909>running?
    :solver/get-my-colors872602644]},
  :alert1 {:alerts :alert2},
  :alert2 {:alerts :alert2},
  :alert3 {:alerts :alert2},
  nil {nil nil}},
 :screen-name "looking-glass-redux",
 :recos-page2 0,
 :selected-tab "black crow",
 :col-names nil,
 :snapshots nil,
 :openai-org-id "org-YLngjih2M4oju0tnnZtKCAYg",
 :alerts
 [[[:box
    :child
    "sent screen save request to server... Please wait."
    :style
    {:font-size "12px", :opacity 0.66}]
   11
   0.5
   183620
   -1247625457]],
 :recos-page 0,
 :rs-overrides-hashmap {"flow-forever" nil},
 :base-sniff-queries
 {:ufo_sightings 484893751, :offenses -505802446, :kits 1883252379},
 :panels-hash 1403454417,
 :elevenlabs-api-key "f74e20dec69741c2d51663cbd8cd4cf6",
 :user-params-hash 779480391,
 :grid-recos? true,
 :preview-keys2 [],
 :session-hash -224112163,
 :resolved-queries
 {:gen-viz-797
  {:select [[[:count 1] :rows] :date_posted],
   :from
   [{:select
     [:city
      :country
      :date_posted
      :datetime
      :duration_hours
      :duration_seconds
      :duration_seconds_int
      :shape
      :state],
     :from [[:ufo_sightings :jj584]],
     :order-by [[:city :asc]]}],
   :group-by [:date_posted]},
  :location-drag-25
  {:select [:location [[:count 1] :rowcnt]],
   :from
   [[{:select [:location :show_date :show_id :show_name :title :tour_name :ts],
      :from [[:shows :mm382]]}
     :hh549]],
   :group-by [:location],
   :order-by [[:rowcnt :desc]]},
  :gen-viz-94
  {:select
   [[[:max [:round [:raw ["(100 * ((" nil ".0 - " nil ".0) / " nil ".0))"]] 2]]
     :diff]],
   :from
   [{:select
     [:city
      :country
      :date_posted
      :datetime
      :duration_hours
      :duration_seconds
      :duration_seconds_int
      :shape
      :state],
     :from [[:ufo_sightings :jj584]],
     :order-by [[:city :asc]]}]},
  :time-freq-345d
  {:select [:*],
   :order-by [[1 :asc]],
   :from [{:data (vec (for [e [1 5 30 45 60 90 120 240 600 3600]] {:freq e}))}],
   :_last-run "14:13:28"},
  :stats-types-34
  {:select [:*],
   :order-by [1],
   :from
   [{:data
     (vec
       (for
         [t
          (mapv
            (fn [x] (cstr/replace (str x) ":" ""))
            (keys (rvbbit-backend.websockets/stats-keywords)))]
         {:type t}))}]},
  :offenses-drag-24
  {:select
   [:DAY_OF_WEEK
    :DISTRICT
    :HOUR
    :INCIDENT_NUMBER
    :Lat
    :Location
    :Long
    :MONTH
    :OCCURRED_ON_DATE
    :OFFENSE_CODE
    :OFFENSE_CODE_GROUP
    :OFFENSE_DESCRIPTION
    :REPORTING_AREA
    :SHOOTING
    :STREET
    :UCR_PART
    :YEAR],
   :from [[:offenses :dd484]]},
  :rowcnt-drag-2
  {:select [[[:sum :rowcnt] :rowcnt_sum]],
   :from
   [[{:select [:city [[:count 1] :rowcnt]],
      :from
      [[{:select
         [:city
          :country
          :date_posted
          :datetime
          :duration_hours
          :duration_seconds
          :duration_seconds_int
          :shape
          :state],
         :from [[:ufo_sightings :jj584]],
         :order-by [[:city :asc]]}
        :ff571]],
      :group-by [:city],
      :order-by [[:rowcnt :desc]]}
     :yy403]]},
  :shows-drag-29
  {:select [:location :show_date :show_id :show_name :title :tour_name :ts],
   :from [[:shows :mm382]],
   :_last-run "17:14:09"},
  :gen-viz-828
  {:select [[[[:count 1]] :agg] :date_posted],
   :from
   [{:select
     [:city
      :country
      :date_posted
      :datetime
      :duration_hours
      :duration_seconds
      :duration_seconds_int
      :shape
      :state],
     :from [[:ufo_sightings :jj584]],
     :order-by [[:city :asc]]}],
   :order-by [[:date_posted :desc]],
   :group-by [:date_posted]},
  :gen-viz-84
  {:select [[[:count 1] :rows] :country],
   :from
   [{:select
     [:city
      :country
      :date_posted
      :datetime
      :duration_hours
      :duration_seconds
      :duration_seconds_int
      :shape
      :state],
     :from [[:ufo_sightings :jj584]],
     :order-by [[:city :asc]]}],
   :group-by [:country]},
  :ufo-sightings-drag-9
  {:select
   [:city
    :country
    :date_posted
    :datetime
    :duration_hours
    :duration_seconds
    :duration_seconds_int
    :shape
    :state],
   :from [[:ufo_sightings :jj584]],
   :order-by [[:city :asc]]},
  :kits-drag-26
  {:select
   [:client_name
    :flow_id
    :id
    :item_data
    :item_hash
    :item_idx
    :item_key
    :item_name
    :item_options
    :item_type
    :kit_name
    :updated],
   :from [[:kits :dd919]]},
  :duration-hours-drag-43
  {:select [:duration_hours [[:count 1] :rowcnt]],
   :from
   [[{:select
      [:city
       :country
       :date_posted
       :datetime
       :duration_hours
       :duration_seconds
       :duration_seconds_int
       :shape
       :state],
      :from [[:ufo_sightings :jj584]],
      :order-by [[:city :asc]]}
     :cc350]],
   :group-by [:duration_hours],
   :order-by [[:rowcnt :desc]]},
  :city-drag-26
  {:select [:city [[:count 1] :rowcnt]],
   :from
   [[{:select
      [:city
       :country
       :date_posted
       :datetime
       :duration_hours
       :duration_seconds
       :duration_seconds_int
       :shape
       :state],
      :from [[:ufo_sightings :jj584]],
      :order-by [[:city :asc]]}
     :ff571]],
   :group-by [:city],
   :order-by [[:rowcnt :desc]]},
  :state-drag-3
  {:select [:state [[:count 1] :rowcnt]],
   :from
   [[{:select
      [:city
       :country
       :date_posted
       :datetime
       :duration_hours
       :duration_seconds
       :duration_seconds_int
       :shape
       :state],
      :from [[:ufo_sightings :jj584]],
      :order-by [[:city :asc]]}
     :uu58]],
   :group-by [:state],
   :order-by [[:rowcnt :desc]]},
  :shape-drag-7
  {:select [:shape [[:count 1] :rowcnt]],
   :from
   [[{:select
      [:city
       :country
       :date_posted
       :datetime
       :duration_hours
       :duration_seconds
       :duration_seconds_int
       :shape
       :state],
      :from [[:ufo_sightings :jj584]],
      :order-by [[:city :asc]]}
     :hh354]],
   :group-by [:shape],
   :order-by [[:rowcnt :desc]]}},
 :panels
 {:block-414
  {:mad-libs-combo-hash ["572062609" "ufo_sightings_drag_9"],
   :name "basic_timeseries - \"date_posted, rows\" - 769",
   :w 9,
   :root [8 13],
   :h 5,
   :connection-id "bigfoot-ufos",
   :queries
   {:gen-viz-797
    {:select [[[:count 1] :rows] :date_posted],
     :from [:query/ufo-sightings-drag-9],
     :group-by [:date_posted]}},
   :tab "sapphire ape",
   :conditionals nil,
   :views
   {:oz
    [:vega-lite
     {:layer
      [{:encoding
        {:x {:field :date_posted, :type "temporal", :sort "x"},
         :y {:aggregate "sum", :field :rows, :type "quantitative"},
         :row {:field nil, :legend nil},
         :size {:legend nil},
         :shape {:legend nil},
         :column {:field nil, :legend nil},
         :color
         {:scale :theme/vega-default-color-scheme,
          :legend nil,
          :field nil,
          :type "ordinal"}},
        :mark
        {:type "area",
         :interpolate "monotone",
         :point "transparent",
         :tooltip {:content "encoding"}}}],
      :data {:values :gen-viz-797},
      :config :theme/vega-defaults,
      :width "container",
      :height :panel-height,
      :padding 4,
      :background "transparent"}
     {:actions false}]}},
  :block-658
  {:h 12,
   :w 8,
   :root [2 2],
   :tab "victorious hippopotamus",
   :selected-view :hare-vw,
   :name "block-658",
   :views {:hare-vw [:vv-box 33]},
   :queries {}},
  :block-1123
  {:h 5,
   :w 8,
   :connection-id "met-on-tour",
   :name "drag-from-select-all-shows",
   :queries
   {:location-drag-25
    {:select [:location [[:count 1] :rowcnt]],
     :from [[:query/shows-drag-29 :hh549]],
     :group-by [:location],
     :order-by [[:rowcnt :desc]]}},
   :root [28 1],
   :tab "coffee llama"},
  :block-10866
  {:h 4,
   :w 12,
   :root [3 2],
   :tab "coffee llama",
   :selected-view :clojure-hop-6,
   :name "block-10866",
   :clojure
   {:clojure-hop-6
    (do
      [:box
       :child
       (str "Clojure " (clojure-version))
       :style
       {:font-family "Homemade Apple", :font-size "65px", :color "orange"}
       :padding
       "22px"])},
   :selected-mode {:clojure-hop-6 :clover}},
  :block-11251
  {:name "block-11251",
   :w 6,
   :selected-view :hi,
   :root [5 7],
   :h 2,
   :queries {},
   :tab "through the rabbit hole and out the other side",
   :minimized? true,
   :views
   {:hi
    [:box
     :align
     :center
     :justify
     :center
     :attr
     {:id ":block-11251.:hi"}
     :style
     {:font-size "14px",
      :font-weight 700,
      :padding-top "6px",
      :padding-left "14px",
      :margin-top "-8px",
      :color :theme/editor-outer-rim-color,
      :font-family :theme/base-font}
     :child
     [:push ["flow-forever" ":open-input" 21555]]],
    :stack [:layout {:panels {:hello-there {:h 0.99, :w 0.99, :root [0 0]}}}]}},
  :block-3393
  {:h 7,
   :w 16,
   :connection-id "met-on-tour",
   :name "select-all-shows",
   :queries
   {:shows-drag-29
    {:select [:location :show_date :show_id :show_name :title :tour_name :ts],
     :from [[:shows :mm382]],
     :_last-run "17:14:09"}},
   :root [1 17],
   :tab "coffee llama"},
  :block-8981
  {:h 6,
   :w 10,
   :root [25 17],
   :tab "star-shaped wallaby",
   :selected-view :create-image-hop,
   :name "block-8981",
   :create-image
   {:create-image-hop
    ["A beautiful buxom irish woman in her late 20s prepares for battle, as the sun sets behind her in the 1800s burlesque club."]}},
  :block-135
  {:h 14,
   :w 3,
   :root [72 10],
   :tab "star-shaped wallaby",
   :selected-view :hare-vw,
   :name "block-135",
   :views {},
   :queries
   {:stats-types-34
    {:select [:*],
     :order-by [1],
     :from
     [{:data
       (vec
         (for
           [t
            (mapv
              (fn [x] (cstr/replace (str x) ":" ""))
              (keys (rvbbit-backend.websockets/stats-keywords)))]
           {:type t}))}]}}},
  :block-11609
  {:h 5,
   :w 8,
   :connection-id "bigfoot-ufos",
   :name "drag-from-select-all-ufo_sightings",
   :queries
   {:city-drag-26
    {:select [:city [[:count 1] :rowcnt]],
     :from [[:query/ufo-sightings-drag-9 :ff571]],
     :group-by [:city],
     :order-by [[:rowcnt :desc]]}},
   :root [4 8],
   :tab "sapphire ape"},
  :block-7416
  {:h 5,
   :w 4,
   :connection-id "bigfoot-ufos",
   :name "drag-from-drag-from-select-all-ufo_sightings",
   :queries
   {:rowcnt-drag-2
    {:select [[[:sum :rowcnt] :rowcnt_sum]], :from [[:query/city-drag-26 :yy403]]}},
   :root [4 13],
   :tab "sapphire ape"},
  :block-11530
  {:h 2,
   :w 9,
   :views
   {:flow-play-runstreamed
    [:box
     :align
     :center
     :justify
     :center
     :style
     {:font-size "25px",
      :font-weight 700,
      :padding-top "6px",
      :padding-left "14px",
      :margin-top "-8px",
      :color :theme/editor-outer-rim-color,
      :font-family :theme/base-font}
     :child
     [:run-flow ["flow-forever" "run flow 'flow-forever'" :runstream-overrides]]]},
   :name "flow-play-from-runstreams",
   :root [5 18],
   :tab "through the rabbit hole and out the other side"},
  :block-3562
  {:clojure
   {:clojure-hop-3
    (do
      (ns rvbbit-backend.websockets
        (:require [rvbbit-backend.util :as ut]))
      (let [tt :time/minute color-key :pink]
        (println (get ansi-colors color-key) "rvbbit threads (avg, last 60s)")
        (fig-render
          (str (ut/nf (ut/rnd (get-stats :threads false 60) 0)) "")
          color-key)
        tt))},
   :name "block-3562",
   :w 12,
   :selected-mode {:clojure-hop-3 :terminal},
   :selected-view :clojure-hop-3,
   :root [55 8],
   :h 4,
   :display {:clojure-hop-3 :output},
   :tab "star-shaped wallaby"},
  :block-10271
  {:h 20,
   :w 22,
   :root [13 2],
   :tab "victorious hippopotamus",
   :selected-view :clover-hop,
   :name "block-10271",
   :views {:clover-hop [:data-viewer [:app-db [:panels]]]}},
  :block-10810
  {:h 8,
   :w 3,
   :root [75 10],
   :tab "star-shaped wallaby",
   :selected-view :hare-vw,
   :name "block-10810",
   :views {},
   :queries
   {:time-freq-345d
    {:select [:*],
     :order-by [[1 :asc]],
     :from [{:data (vec (for [e [1 5 30 45 60 90 120 240 600 3600]] {:freq e}))}],
     :_last-run "14:13:28"}}},
  :block-6134
  {:clojure
   {:new-clojure-1 (do {:tester 23423, :tseter [4 5 6 7], :key {:mapper 234}})},
   :name "block-6134",
   :w 12,
   :selected-mode {:new-clojure-1 :data},
   :selected-view :new-clojure-1,
   :root [15 5],
   :h 7,
   :queries {},
   :tab "amaranth mouse",
   :views
   {:hare-vw
    [:box
     :align
     :center
     :justify
     :center
     :attr
     {:id ":block-6134.:hi"}
     :style
     {:font-size "21px",
      :font-weight 700,
      :padding-top "6px",
      :padding-left "14px",
      :margin-top "-8px",
      :color :theme/editor-outer-rim-color,
      :font-family :theme/base-font}
     :child
     "It's a perfect day for planting seeds and planning adventures!"]}},
  :block-9240
  {:h 8,
   :w 8,
   :views
   {"console-out"
    [:console :solver-meta/raw-custom-override-311672213>output>evald-result>out]},
   :name "console :solver/raw-custom-override-311672213",
   :root [16 11],
   :tab "motivating falcon"},
  :block-10729
  {:h 7,
   :w 32,
   :root [9 3],
   :tab "refined dove",
   :selected-view :clojure-hop-9,
   :name "block-10729",
   :clojure
   {:clojure-hop-9
    (do
      (ns random-viz-data-generator)
      (let [generate-random-data (fn []
                                   (let [rr (Math/floor (/ :col-width 10))
                                         now (System/currentTimeMillis)
                                         hour-in-ms (* 60 60 1000)
                                         ten-min-in-ms (* 10 60 1000)]
                                     (vec
                                       (for
                                         [i (range rr)]
                                         {:ts i,
                                          :rando1 (+ 50 (rand-int 100)),
                                          :rando2 (+ 10 (rand-int 40))}))))]
        [:>
         :ResponsiveContainer
         {:width "100%", :height :panel-height+50}
         [:>
          :ComposedChart
          {:data (generate-random-data),
           :style {:font-family :theme/base-font},
           :margin {:top 5, :bottom 20, :right 30, :left 20}}
          [:> :CartesianGrid {:strokeDasharray "0 0", :opacity 0}]
          [:>
           :Tooltip
           {:content-style
            {:background-color "#00000099",
             :font-weight 700,
             :border "1px solid transparent",
             :border-radius "4px"}}]
          [:>
           :XAxis
           {:dataKey :ts,
            :label
            {:value "random data gen",
             :style {:font-size "15px", :font-weight 700},
             :position "middle",
             :dy 25},
            :style {:font-size "11px"}}]
          [:>
           :YAxis
           {:yAxisId "left",
            :label
            {:value "rando1",
             :angle -90,
             :style {:font-size "15px", :font-weight 700},
             :position "middle",
             :dx -25},
            :domain ["auto" "auto"]}]
          [:>
           :YAxis
           {:yAxisId "right",
            :label
            {:value "rando2",
             :angle 90,
             :style {:font-weight 700, :font-size "15px"},
             :position "middle",
             :dx 20},
            :domain ["auto" "auto"],
            :orientation "right"}]
          [:>
           :Bar
           {:isAnimationActive false,
            :dataKey :rando2,
            :yAxisId "right",
            :stroke "cyan",
            :fill "darkcyan",
            :stroke-width 2}]
          [:>
           :Line
           {:isAnimationActive false,
            :dataKey :rando1,
            :type "monotone",
            :yAxisId "left",
            :stroke "pink",
            :stroke-width 4,
            :activeDot {:r 8}}]]]))},
   :selected-mode {:clojure-hop-9 :clover}},
  :block-204
  {:mad-libs-combo-hash ["-1610972762" "ufo_sightings_drag_9"],
   :name "compound_trend_1 - \"date_posted, rows\" - 1141",
   :w 10,
   :root [26 13],
   :h 5,
   :connection-id "bigfoot-ufos",
   :queries
   {:gen-viz-828
    {:select [[[[:count 1]] :agg] :date_posted],
     :from [:query/ufo-sightings-drag-9],
     :order-by [[:date_posted :desc]],
     :group-by [:date_posted]},
    :gen-viz-94
    {:select
     [[[:max
        [:round
         [:raw
          ["(100 * (("
           :query-preview/agg.0
           ".0 - "
           :query-preview/agg.1
           ".0) / "
           :query-preview/agg.0
           ".0))"]]
         2]]
       :diff]],
     :from [:query/ufo-sightings-drag-9]}},
   :tab "sapphire ape",
   :conditionals {:c345-up-or-down? [:> :query-preview/agg.0 :query-preview/agg.1]},
   :views
   {:oz
    [:v-box
     :size
     "auto"
     :height
     :half-panel-height-px
     :style
     {:padding-left "8px", :padding-right "8px"}
     :children
     [[:h-box
       :justify
       :between
       :children
       [[:box
         :padding
         "16px"
         :child
         [:number :query-preview/agg.0]
         :style
         {:font-size "39px", :color "#ffffff"}]
        [:h-box
         :padding
         "13px"
         :size
         "auto"
         :children
         [[:icon
           :md-icon-name
           [:if :condi/c345-up-or-down? "zmdi-chevron-up" "zmdi-chevron-down"]
           :style
           {:font-size "55px",
            :color [:if :condi/c345-up-or-down? "#20f323" "#f36464"],
            :opacity 0.5,
            :margin-top "8px"}]
          [:box
           :child
           [:percent :query-preview-2/diff.0]
           :style
           {:font-size "25px", :padding "15px"}]]]]]
      [:box
       :style
       {:margin-top "-10px"}
       :size
       "auto"
       :child
       [:vega-lite
        {:layer
         [{:encoding
           {:x {:field :date_posted, :type "temporal", :title nil, :sort "x"},
            :y
            {:aggregate "sum",
             :field :agg,
             :title nil,
             :scale {:zero false},
             :type "quantitative"},
            :row {:field nil, :legend nil},
            :size {:legend nil},
            :shape {:legend nil},
            :column {:field nil, :legend nil},
            :color
            {:scale {:scheme "purples"}, :legend nil, :field 1, :type "ordinal"}},
           :mark
           {:type "line",
            :interpolate "monotone",
            :line true,
            :point true,
            :tooltip {:content "encoding"}}}],
         :data {:values :gen-viz-828},
         :config
         {:view {:stroke "transparent"},
          :line {:strokeWidth 3},
          :axis
          {:domainColor "#ffffff22",
           :grid true,
           :font "Lato",
           :labelColor "#afafaf",
           :titleFont "Lato",
           :titleColor "#282828",
           :labelFont "Lato",
           :domain false,
           :gridColor "#ffffff22",
           :tickColor "#ffffff22",
           :axisFont "Lato"},
          :legend
          {:labelFont "Lato",
           :legendFont "Lato",
           :labelColor "#ffffff99",
           :titleColor "#ffffff99",
           :stroke "#ffffff99",
           :titleFont "Lato"},
          :header {:labelFont "Lato", :titleFont "Lato", :titleColor "#ffffff99"},
          :mark {:font "Lato"},
          :title
          {:font "Lato",
           :subtitleFont "Lato",
           :labelFont "Lato",
           :titleFont "Lato",
           :titleColor "#ffffff99"}},
         :width :panel-width,
         :height :half-panel-height,
         :padding 4,
         :background "transparent"}
        {:actions false}]]
      [:box
       :align
       :center
       :justify
       :center
       :style
       {:padding-top "133px", :font-size "20px"}
       :child
       [:string [:date_posted " vs " :rows]]]]]}},
  :block-6979
  {:clojure
   {:new-clojure-8
    (do
      (defn fibonacci [n]
        (loop [a 0 b 1 result []]
          (if (= (count result) n) result (recur b (+ a b) (conj result a)))))
      {:fibonacci-sequence (fibonacci 45)})},
   :name "block-6979",
   :w 10,
   :selected-mode {:new-clojure-8 :edn},
   :selected-view :new-clojure-8,
   :root [35 18],
   :h 6,
   :queries {},
   :tab "black crow",
   :views
   {:hare-vw-2
    [:box
     :align
     :center
     :justify
     :center
     :style
     {:font-size "21px",
      :font-weight 700,
      :padding-top "6px",
      :padding-left "14px",
      :margin-top "-8px",
      :color :theme/editor-outer-rim-color,
      :font-family :theme/base-font}
     :child
     "Imagination is the only weapon in the war against reality."]}},
  :block-2488
  {:h 5,
   :w 8,
   :root [21 0],
   :tab "amaranth mouse",
   :selected-view :fabric-hop-11,
   :opts
   {:fabric-hop-11
    {:model "claude-3-5-sonnet-20240620",
     :client-name :efficient-fat-mallard-1,
     :runner :clojure,
     :context
     {[:panels :block-9339 :clojure :clojure-hop-8]
      "\"(do\\n  (defn prime? [n]\\n    (and (> n 1)\\n         (not (some (fn [x] (zero? (mod n x)))\\n                    (range 2 (inc (Math/sqrt n)))))))\\n  (defn prime-seq []\\n    (filter prime? (iterate inc 2)))\\n  (into {} (map-indexed (fn [idx prime] [(keyword (str \\\"prime-\\\" (inc idx))) prime])\\n                        (take 20 (prime-seq)))))\""},
     :pattern "clover"}},
   :name "block-2488",
   :fabric
   {:fabric-hop-11
    ["ok, lets change these results into a map of vectors please?"]}},
  :block-2536
  {:h 2,
   :w 16,
   :root [0 1],
   :tab "through the rabbit hole and out the other side",
   :selected-view :hi,
   :name "block-2536",
   :views
   {:hi
    [:box
     :attr
     {:id ":block-6121.:hi"}
     :style
     {:font-size "15px",
      :padding-top "6px",
      :padding-left "14px",
      :margin-top "-8px",
      :color :theme/editor-outer-rim-color,
      :font-family :theme/base-font}
     :child
     [:speak-click
      "Did you ever need a flow to stop and present an operator with some choices? Static or dynamic we need help to continue processing. How about this ALSO happening headlessly & seamlessly with your data UI?"]],
    :stack [:layout {:panels {:hello-there {:h 0.99, :w 0.99, :root [0 0]}}}]},
   :queries {}},
  :block-8805
  {:h 5,
   :w 8,
   :connection-id "bigfoot-ufos",
   :name "drag-from-select-all-ufo_sightings",
   :queries
   {:duration-hours-drag-43
    {:select [:duration_hours [[:count 1] :rowcnt]],
     :from [[:query/ufo-sightings-drag-9 :cc350]],
     :group-by [:duration_hours],
     :order-by [[:rowcnt :desc]]}},
   :root [28 8],
   :tab "sapphire ape"},
  :block-8502
  {:h 2,
   :w 6,
   :root [48 14],
   :tab "star-shaped wallaby",
   :selected-view :hi,
   :name "block-8502",
   :views
   {:hi
    [:box
     :align
     :center
     :justify
     :center
     :attr
     {:id ":block-8502.:hi"}
     :style
     {:font-size "45px",
      :font-weight 700,
      :padding-top "7px",
      :padding-left "14px",
      :margin-top "-8px",
      :color :theme/universal-pop,
      :font-family :theme/base-font}
     :child
     :theme/universal-pop]},
   :queries {}},
  :block-3477
  {:clojure
   {:new-clojure-3
    (do
      (let [clojure-version (clojure-version)
            jvm-version (System/getProperty "java.version")]
        (def tooo [1 222 2 32 3 3])
        (println tooo)
        (str
          "🐇🥕 RVBBIT nREPL. Clojure "
          clojure-version
          " JVM "
          jvm-version
          " 🥕🐇")))},
   :name "block-3477",
   :w 11,
   :selected-mode {:new-clojure-3 :terminal},
   :selected-view :new-clojure-3,
   :root [57 18],
   :h 2,
   :display {:new-clojure-3 :value},
   :queries {},
   :tab "star-shaped wallaby",
   :views
   {:hare-vw
    [:box
     :align
     :center
     :justify
     :center
     :attr
     {:id ":block-3477.:hi"}
     :style
     {:font-size "21px",
      :font-weight 700,
      :padding-top "6px",
      :padding-left "14px",
      :margin-top "-8px",
      :color :theme/editor-outer-rim-color,
      :font-family :theme/base-font}
     :child
     "It's a perfect day for planting seeds and planning adventures!"]}},
  :block-2377
  {:h 3,
   :w 6,
   :root [26 4],
   :tab "star-shaped wallaby",
   :selected-view :clojure-hop,
   :name "block-2377",
   :clojure {:clojure-hop "(+ 0 9 8 7)"}},
  :block-94
  {:mad-libs-combo-hash ["1561519308" "ufo_sightings_drag_9"],
   :name "basic_v_bar - \"country, rows\" - 559",
   :w 9,
   :root [17 13],
   :h 5,
   :connection-id "bigfoot-ufos",
   :queries
   {:gen-viz-84
    {:select [[[:count 1] :rows] :country],
     :from [:query/ufo-sightings-drag-9],
     :group-by [:country]}},
   :tab "sapphire ape",
   :conditionals nil,
   :views
   {:oz
    [:vega-lite
     {:layer
      [{:encoding
        {:y {:field :country, :type "ordinal"},
         :x {:aggregate "sum", :field :rows, :type "quantitative"},
         :row {:field nil, :legend nil},
         :size {:legend nil},
         :shape {:legend nil},
         :column {:field nil, :legend nil},
         :color
         {:scale :theme/vega-default-color-scheme,
          :legend nil,
          :field 1,
          :type "ordinal"}},
        :mark {:type "bar", :tooltip {:content "encoding"}}}],
      :data {:values :gen-viz-84},
      :config :theme/vega-defaults,
      :width "container",
      :height :panel-height,
      :padding 4,
      :background "transparent"}
     {:actions false}]}},
  :block-1913
  {:h 2,
   :w 16,
   :root [0 15],
   :tab "through the rabbit hole and out the other side",
   :selected-view :hi,
   :name "block-1913",
   :views
   {:hi
    [:box
     :attr
     {:id ":block-4121.:hi"}
     :style
     {:font-size "15px",
      :padding-top "6px",
      :padding-left "14px",
      :margin-top "-8px",
      :color :theme/editor-outer-rim-color,
      :font-family :theme/base-font}
     :child
     [:speak-click
      "Pretty cool, if you ask me. Regular Dashboards are, like, totally lame - reactive flow-powered data boards...  thats where its at."]],
    :stack [:layout {:panels {:hello-there {:h 0.99, :w 0.99, :root [0 0]}}}]},
   :queries {}},
  :block-11395
  {:w 16,
   :selected-view :vv,
   :name "through the rabbit hole and out the other side",
   :h 23,
   :ghosted? false,
   :views {:vv [:grid "through the rabbit hole and out the other side"]},
   :root [8 2],
   :tab "globular koala"},
  :block-9369
  {:h 3,
   :w 16,
   :root [0 11],
   :tab "through the rabbit hole and out the other side",
   :selected-view :hi,
   :name "block-9369",
   :views
   {:hi
    [:box
     :attr
     {:id ":block-9363.:hi"}
     :style
     {:font-size "15px",
      :padding-top "6px",
      :padding-left "14px",
      :margin-top "-8px",
      :color :theme/editor-outer-rim-color,
      :font-family :theme/base-font}
     :child
     [:speak-click
      "Going back to the canvas, the dialog box and channel reactivity works the same way. The server flow waits for the client and reacts to the value. No need to render or load the flow like before, we are merely a 'subscription client' to this flow."]],
    :stack [:layout {:panels {:hello-there {:h 0.99, :w 0.99, :root [0 0]}}}]},
   :queries {}},
  :block-3887
  {:clojure
   {:new-clojure-5
    (do
      (ns buttecheeks.core
        (:require [clojure.string :as cstr]))
      (let [tt :time/second
            clojure-version (clojure-version)
            jvm-version (System/getProperty "java.version")]
        (println "go " tt)
        (str
          "🐇 🥕  Internal RVBBIT nREPL. Clojure "
          clojure-version
          " on "
          jvm-version
          " JVM tech"
          " 🥕 🐇 "
          tt)))},
   :name "block-3887",
   :w 22,
   :selected-mode {:new-clojure-5 :text},
   :selected-view :new-clojure-5,
   :root [2 8],
   :h 3,
   :queries {},
   :tab "motivating falcon",
   :views
   {:hare-vw
    [:box
     :align
     :center
     :justify
     :center
     :attr
     {:id ":block-3887.:hi"}
     :style
     {:font-size "21px",
      :font-weight 700,
      :padding-top "6px",
      :padding-left "14px",
      :margin-top "-8px",
      :color :theme/editor-outer-rim-color,
      :font-family :theme/base-font}
     :child
     "It's a perfect day for planting seeds and planning adventures!"]}},
  :block-6033
  {:clojure
   {:clojure-hop-4
    (do
      (let [graphs-gen :time/minute
            freqs :time-freq-345d.*/freq
            types [:nrepl-calls :pool-tasks+ :sql-exec+]]
        (println "selected items" types "selected chunks" freqs)
        (rvbbit-backend.websockets/draw-stats types freqs true 120)
        graphs-gen))},
   :name "block-6033",
   :w 23,
   :selected-mode {:clojure-hop-4 :terminal},
   :selected-view :clojure-hop-4,
   :root [0 1],
   :h 25,
   :display {:clojure-hop-4 :output},
   :tab "star-shaped wallaby"},
  :block-7159
  {:clojure
   {:new-clojure-9
    (do
      (ns rvbbit-backend.websockets
        (:require [clojure.string :as cstr]))
      (def ansi-colors
       {:green "[32m",
        :yellow "[33m",
        :red "[31m",
        :blue "[34m",
        :magenta "[35m",
        :cyan "[36m",
        :reset "[0m"})
      (def stalactite-chars ["█" "▇" "▆" "▅" "▄" "▃" "▂" "▁"])
      (def drip-chars ["." "•" "°"])
      (def tt :time/minute)
      (defn normalize-values [values]
        (let [max-val (apply max values) min-val (apply min values)]
          (if (= max-val min-val)
            (repeat (count values) 0.5)
            (map (fn [x] (/ (- x min-val) (- max-val min-val))) values))))
      (defn generate-stalactite [height value color]
        (let [stalactite-height (int (* height value))
              stalactite (take stalactite-height (cycle stalactite-chars))
              empty-space (repeat (- height stalactite-height) " ")]
          (str
            (color ansi-colors)
            (cstr/join (concat stalactite empty-space))
            (:reset ansi-colors))))
      (defn generate-drips [height value prev-value]
        (when (> prev-value value)
          (let [drip-height (int (* height (- prev-value value)))
                drips (take drip-height (cycle drip-chars))
                empty-space (repeat (- height drip-height) " ")]
            (cstr/join (concat empty-space drips)))))
      (defn create-visualization [width height cpu-usage mem-usage thread-usage]
        (let [cpu-width (int (* width 0.33))
              mem-width (int (* width 0.33))
              thread-width (- width cpu-width mem-width)
              history-length (min 10 (count cpu-usage))
              recent-cpu (take history-length (reverse cpu-usage))
              recent-mem (take history-length (reverse mem-usage))
              recent-thread (take history-length (reverse thread-usage))
              normalized-cpu (normalize-values recent-cpu)
              normalized-mem (normalize-values recent-mem)
              normalized-thread (normalize-values recent-thread)
              cpu-cols (map-indexed
                         (fn [idx val]
                           (str
                             (generate-stalactite height val :red)
                             (when (> idx 0)
                               (generate-drips
                                 height
                                 val
                                 (nth normalized-cpu (dec idx))))))
                         normalized-cpu)
              mem-cols (map-indexed
                         (fn [idx val]
                           (str
                             (generate-stalactite height val :blue)
                             (when (> idx 0)
                               (generate-drips
                                 height
                                 val
                                 (nth normalized-mem (dec idx))))))
                         normalized-mem)
              thread-cols (map-indexed
                            (fn [idx val]
                              (str
                                (generate-stalactite height val :green)
                                (when (> idx 0)
                                  (generate-drips
                                    height
                                    val
                                    (nth normalized-thread (dec idx))))))
                            normalized-thread)
              cpu-section (take cpu-width (cycle cpu-cols))
              mem-section (take mem-width (cycle mem-cols))
              thread-section (take thread-width (cycle thread-cols))
              all-cols (concat cpu-section mem-section thread-section)
              rows (apply map str all-cols)]
          (cstr/join "\n" rows)))
      (defn generate-visualization [width height cpu-usage mem-usage thread-usage]
        (let [visualization (create-visualization
                              width
                              height
                              cpu-usage
                              mem-usage
                              thread-usage)
              summary ""
              padding (apply str (repeat (- width (count summary)) " "))]
          (str
            visualization
            "\n"
            (:green ansi-colors)
            summary
            padding
            (:reset ansi-colors))))
      (println
        (generate-visualization
          :col-width
          28
          (take-last 100 @cpu-usage)
          (take-last 100 @mem-usage)
          (take-last 100 @thread-usage))))},
   :name "block-7159",
   :w 24,
   :selected-mode {:new-clojure-9 :terminal},
   :selected-view :new-clojure-9,
   :root [34 1],
   :h 17,
   :display {:new-clojure-9 :output},
   :queries {},
   :tab "black crow",
   :minimized? false,
   :views
   {:hare-vw-3
    [:box
     :align
     :center
     :justify
     :center
     :style
     {:font-size "21px",
      :font-weight 700,
      :padding-top "6px",
      :padding-left "14px",
      :margin-top "-8px",
      :color :theme/editor-outer-rim-color,
      :font-family :theme/base-font}
     :child
     "The human sensory system is a lot more complex and weird than most people realize."]}},
  :block-4424
  {:clojure
   {:new-clojure-7
    (let [fib-seq (loop [a 0 b 1 coll {} n 1]
                    (if (> a 40)
                      coll
                      (recur
                        b
                        (+ a b)
                        (assoc coll (keyword (str "fib-" n)) a)
                        (inc n))))]
      {:title "Fibonacci sequence up to 40", :sequence fib-seq})},
   :name "block-4424",
   :w 9,
   :selected-mode {:new-clojure-7 :edn},
   :selected-view :new-clojure-7,
   :root [2 18],
   :h 5,
   :queries {},
   :tab "amaranth mouse",
   :views
   {:hare-vw-1
    [:box
     :align
     :center
     :justify
     :center
     :style
     {:font-size "21px",
      :font-weight 700,
      :padding-top "6px",
      :padding-left "14px",
      :margin-top "-8px",
      :color :theme/editor-outer-rim-color,
      :font-family :theme/base-font}
     :child
     "You're entirely bonkers. But I'll tell you a secret... all the best people are."]}},
  :block-8350
  {:h 10,
   :w 11,
   :views
   {:editor-block-9339-clojure-hop-8
    [:editor
     [:block-9339 :clojure :clojure-hop-8]
     (defn fibonacci-seq [limit]
       (loop [seq [0 1]]
         (if (>= (count seq) limit)
           seq
           (recur (conj seq (+ (peek seq) (peek (pop seq))))))))
     (fibonacci-seq 10)]},
   :name "editor-block-9339-clojure-hop-8",
   :root [2 7],
   :tab "amaranth mouse"},
  :block-8188
  {:h 10,
   :w 11,
   :views
   {:editor-block-6979-new-clojure-8
    [:editor [:block-6979 :clojure :new-clojure-8]]},
   :name "editor-block-6979-new-clojure-8",
   :root [2 9],
   :tab "black crow"},
  :block-6923
  {:h 5,
   :w 8,
   :root [21 17],
   :tab "amaranth mouse",
   :selected-view :fabric-hop-12,
   :opts
   {:fabric-hop-12
    {:model "claude-3-5-sonnet-20240620",
     :client-name :efficient-fat-mallard-1,
     :runner :views,
     :context
     {[:panels :block-4810 :views :hare-vw]
      "[:box :align :center :justify :center :attr {:id \":block-eee0.:hi\"} :style {:font-size \"21px\", :font-weight 700, :padding-top \"6px\", :padding-left \"14px\", :margin-top \"8px\", :color :theme/block-tab-selected-font-color, :font-family :theme/base-font} :child \"FFF day for planting seffffeds & planning adventddddures!\"]"},
     :pattern "clover"}},
   :name "block-6923",
   :fabric {:fabric-hop-12 [" lest jazz this css up a little!"]}},
  :block-9041
  {:h 12,
   :w 12,
   :views {:editor-block-4810-hare-vw [:editor [:block-4810 :views :hare-vw]]},
   :name "editor-block-4810-hare-vw",
   :root [29 3],
   :tab "amaranth mouse"},
  :block-8788
  {:name "block-8788",
   :w 15,
   :selected-mode {:clover-hop-2 :edn},
   :selected-view :clover-hop-2,
   :root [19 8],
   :h 14,
   :opts {:clover-hop-2 {}},
   :tab "black crow",
   :views {:clover-hop-2 [:app-db [:valid-kits]]}},
  :block-9339
  {:h 5,
   :w 8,
   :root [3 1],
   :tab "amaranth mouse",
   :selected-view :clojure-hop-8,
   :name "block-9339",
   :clojure
   {:clojure-hop-8
    "(do\n  (defn prime? [n]\n    (and (> n 1)\n         (not (some (fn [x] (zero? (mod n x)))\n                    (range 2 (inc (Math/sqrt n)))))))\n  (defn prime-seq []\n    (filter prime? (iterate inc 2)))\n  (into {} \n        (map-indexed \n         (fn [idx primes] \n           [(keyword (str \"prime-\" (inc idx))) primes])\n         (partition-all 5 (take 20 (prime-seq))))))"},
   :selected-mode {:clojure-hop-8 :data}},
  :block-1071
  {:clojure
   {:clojure-hop-1
    (do
      (let [graphs-gen :time/minute
            single :stats-types-34/type
            multi :stats-types-34.*/type
            freqs :time-freq-345d.*/freq
            selected (vec (remove nil? (flatten [single multi])))
            types (vec (sort (mapv keyword selected)))]
        (println "selected items" types "selected chunks" freqs)
        (rvbbit-backend.websockets/draw-stats types freqs true 137)
        graphs-gen))},
   :pinned? false,
   :name "block-1071",
   :w 26,
   :selected-mode {:clojure-hop-1 :terminal},
   :selected-view :clojure-hop-1,
   :root [23 1],
   :h 25,
   :display {:clojure-hop-1 :output},
   :tab "star-shaped wallaby"},
  :block-7319
  {:h 5,
   :w 8,
   :connection-id "bigfoot-ufos",
   :name "drag-from-select-all-ufo_sightings",
   :queries
   {:shape-drag-7
    {:select [:shape [[:count 1] :rowcnt]],
     :from [[:query/ufo-sightings-drag-9 :hh354]],
     :group-by [:shape],
     :order-by [[:rowcnt :desc]]}},
   :root [12 8],
   :tab "sapphire ape"},
  :block-4121
  {:h 3,
   :w 16,
   :root [0 7],
   :tab "through the rabbit hole and out the other side",
   :selected-view :hi,
   :name "block-4121",
   :views
   {:hi
    [:box
     :attr
     {:id ":block-4121.:hi"}
     :style
     {:font-size "15px",
      :padding-top "6px",
      :padding-left "14px",
      :margin-top "-8px",
      :color :theme/editor-outer-rim-color,
      :font-family :theme/base-font}
     :child
     [:speak-click
      "We can also debug by forcing various values into any step in the flow in order to observe different reactions... Notice the flow doesn't re-start from scratch, it is actually still running and will react to new values that hit any of it's channels."]],
    :stack [:layout {:panels {:hello-there {:h 0.99, :w 0.99, :root [0 0]}}}]},
   :queries {}},
  :block-9805
  {:clojure
   {:clojure-hop-2
    (do
      (ns rvbbit-backend.websockets
        (:require [rvbbit-backend.util :as ut]))
      (let [tt :time/minute color-key :pink]
        (println (get ansi-colors color-key) "rvbbit mem usage (avg, last 60s)")
        (fig-render
          (str (ut/nf (ut/rnd (get-stats :mem false 60) 0)) "mb")
          color-key)
        tt))},
   :name "block-9805",
   :w 12,
   :selected-mode {:clojure-hop-2 :terminal},
   :selected-view :clojure-hop-2,
   :root [55 4],
   :h 4,
   :display {:clojure-hop-2 :output},
   :tab "star-shaped wallaby"},
  :block-3476
  {:h 2,
   :w 6,
   :root [48 17],
   :tab "star-shaped wallaby",
   :selected-view :hi,
   :name "block-3476",
   :views
   {:hi
    [:box
     :align
     :center
     :justify
     :center
     :attr
     {:id ":block-3476.:hi"}
     :style
     {:font-size "45px",
      :font-weight 700,
      :padding-top "7px",
      :padding-left "14px",
      :margin-top "-8px",
      :color [:invert-hex-color :theme/editor-outer-rim-color],
      :font-family :theme/base-font}
     :child
     :theme/universal-pop-color]},
   :queries {}},
  :block-4810
  {:h 4,
   :w 12,
   :root [15 13],
   :tab "amaranth mouse",
   :selected-view :hare-vw,
   :name "block-4810",
   :views
   {:hare-vw
    "[:box \n :align :center \n :justify :center \n :attr {:id \":block-eee0.:hi\"} \n :style {:font-size \"24px\"\n         :font-weight 700\n         :padding \"12px 20px\"\n         :margin \"10px\"\n         :color :theme/block-tab-selected-font-color\n         :font-family :theme/base-font\n         :background-color \"rgba(255, 255, 255, 0.1)\"\n         :border-radius \"10px\"\n         :box-shadow \"0 4px 6px rgba(0, 0, 0, 0.1)\"\n         :transition \"all 0.3s ease\"\n         :cursor \"pointer\"} \n :child \"Fine day for planting seeds & planning adventures!\"]"},
   :queries {}},
  :block-7215
  {:h 4,
   :w 9,
   :tab "through the rabbit hole and out the other side",
   :root [5 20],
   :name "block-7215",
   :views
   {:param-val
    [:box
     :align
     :center
     :justify
     :center
     :padding
     "13px"
     :style
     {:font-size "88px"}
     :child
     [:string :flow/flow-forever>:final-math]]},
   :queries {}},
  :block-3777
  {:h 5,
   :w 8,
   :connection-id "bigfoot-ufos",
   :name "drag-from-select-all-ufo_sightings",
   :queries
   {:state-drag-3
    {:select [:state [[:count 1] :rowcnt]],
     :from [[:query/ufo-sightings-drag-9 :uu58]],
     :group-by [:state],
     :order-by [[:rowcnt :desc]]}},
   :root [20 8],
   :tab "sapphire ape"},
  :block-10902
  {:h 8,
   :w 14,
   :views
   {:editor-block-3887-new-clojure-5
    [:editor [:block-3887 :clojure :new-clojure-5]]},
   :name "editor-block-3887-new-clojure-5",
   :root [2 11],
   :tab "motivating falcon"},
  :block-12121
  {:h 3,
   :w 6,
   :views
   {"console-out"
    [:console :solver-meta/raw-custom-override-841333514>output>evald-result>out]},
   :name "console :solver/raw-custom-override-841333514",
   :root [72 4],
   :tab "star-shaped wallaby"},
  :block-6582
  {:h 7,
   :w 27,
   :connection-id "system-db",
   :name "select-all-kits",
   :queries
   {:kits-drag-26
    {:select
     [:client_name
      :flow_id
      :id
      :item_data
      :item_hash
      :item_idx
      :item_key
      :item_name
      :item_options
      :item_type
      :kit_name
      :updated],
     :from [[:kits :dd919]]}},
   :root [7 1],
   :tab "black crow"},
  :block-4654
  {:clojure
   {:new-clojure-4
    (do
      (ns rvbbit-backend.websockets
        (:require [rvbbit-backend.util :as ut]))
      (let [tt :time/minute color-key :pink]
        (println (get ansi-colors color-key) "rvbbit cpu usage (avg, last 60s)")
        (fig-render (str (ut/nf (get-stats :cpu false 60)) "%") color-key)
        tt))},
   :pinned? false,
   :name "block-4654",
   :w 12,
   :selected-mode {:new-clojure-4 :terminal},
   :selected-view :new-clojure-4,
   :root [55 0],
   :h 4,
   :display {:new-clojure-4 :output},
   :queries {},
   :tab "star-shaped wallaby",
   :views {}},
  :block-1219
  {:clojure
   {:new-clojure-6
    (let [clojure-version (clojure-version)
          jvm-version (System/getProperty "java.version")]
      (str
        "🐇🥕 Sup! Internal RVBBIT nREPL. Clojure "
        clojure-version
        " on "
        jvm-version
        " JVM tech"
        " 🥕🐇"))},
   :name "block-1219",
   :w 10,
   :selected-view :new-clojure-6,
   :root [28 12],
   :h 6,
   :queries {},
   :tab "motivating falcon",
   :views {:hare-vw (ns buttecheeks.core)}},
  :block-35
  {:h 9,
   :w 9,
   :tab "globular koala",
   :root [1 15],
   :name ":param/image-data",
   :views {:param-val [:data-viewer :param/image-data]},
   :queries {}},
  :block-8262
  {:clojure
   {:new-clojure
    (do
      (let [clojure-version (clojure-version)
            jvm-version (System/getProperty "java.version")]
        (Thread/sleep 4000)
        [:box
         :style
         {:font-size "55px", :color "#ffffff"}
         :child
         (str
           "🐇🥕 Sup! Internal RVBBIT nREPL. Clojure "
           clojure-version
           " on "
           jvm-version
           " JVM tech!"
           " 🥕🐇")]))},
   :name "block-8262",
   :w 7,
   :selected-mode {:new-clojure :clover},
   :selected-view :new-clojure,
   :root [0 2],
   :h 9,
   :queries {},
   :tab "globular koala",
   :views
   {:hi
    [:box
     :align
     :center
     :justify
     :center
     :attr
     {:id ":block-8262.:hi"}
     :style
     {:font-size "130px",
      :font-weight 500,
      :padding-top "6px",
      :padding-left "14px",
      :margin-top "-18px",
      :color :theme/editor-outer-rim-color,
      :font-family :theme/base-font}
     :child
     "hi!"]}},
  :block-9446
  {:h 4,
   :w 9,
   :root [2 15],
   :tab "victorious hippopotamus",
   :selected-view :hare-vw,
   :name "block-9446",
   :views {:hare-vw [:vh-box 244]},
   :queries {}},
  :block-6121
  {:h 2,
   :w 16,
   :root [0 4],
   :tab "through the rabbit hole and out the other side",
   :selected-view :hi,
   :name "block-6121",
   :views
   {:hi
    [:box
     :attr
     {:id ":block-6121.:hi"}
     :style
     {:font-size "15px",
      :padding-top "6px",
      :padding-left "14px",
      :margin-top "-8px",
      :color :theme/editor-outer-rim-color,
      :font-family :theme/base-font}
     :child
     [:speak-click
      "Here you can see that while running the flow interactively, we get the dialog push, as well as the ability to manipulate the options on the flow directly."]],
    :stack [:layout {:panels {:hello-there {:h 0.99, :w 0.99, :root [0 0]}}}]},
   :queries {}},
  :block-1449
  {:h 7,
   :w 32,
   :connection-id "bigfoot-ufos",
   :name "select-all-ufo_sightings",
   :queries
   {:ufo-sightings-drag-9
    {:select
     [:city
      :country
      :date_posted
      :datetime
      :duration_hours
      :duration_seconds
      :duration_seconds_int
      :shape
      :state],
     :from [[:ufo_sightings :jj584]],
     :order-by [[:city :asc]]}},
   :root [4 18],
   :tab "sapphire ape",
   :selected-view :ufo-sightings-drag-9},
  :block-6552
  {:clojure {:clojure-hop-5 "(+ 12312 9 8 7 6)"},
   :name "block-6552",
   :w 3,
   :selected-view :clojure-hop-5,
   :root [16 2],
   :h 2,
   :tab "coffee llama"},
  :block-10142
  {:h 3,
   :w 8,
   :root [16 9],
   :selected-view :clover-hop-1,
   :views
   {:.clover-hop-1.swp b0nano,
    :clover-hop-1
    [:box
     :child
     "HEY HEY HEY!"
     :style
     {:font-family "Homemade Apple", :font-size "88px", :color "orange"}
     :padding
     "20px"]},
   :tab "coffee llama",
   :name "block-10142"},
  :block-2092
  {:h 3,
   :w 6,
   :tab "star-shaped wallaby",
   :root [42 15],
   :name ":stats-types-34/type",
   :views
   {:param-val
    [:box
     :align
     :center
     :justify
     :center
     :padding
     "13px"
     :style
     {:font-size "45px"}
     :child
     [:string :stats-types-34/type]]},
   :queries {}},
  :block-284
  {:w 32,
   :selected-view :vv,
   :name "sapphire ape",
   :h 17,
   :ghosted? false,
   :views {:vv [:grid "sapphire ape"]},
   :root [25 2],
   :tab "globular koala"},
  :block-4346
  {:h 7,
   :w 30,
   :connection-id "boston-crime",
   :name "select-all-offenses",
   :queries
   {:offenses-drag-24
    {:select
     [:DAY_OF_WEEK
      :DISTRICT
      :HOUR
      :INCIDENT_NUMBER
      :Lat
      :Location
      :Long
      :MONTH
      :OCCURRED_ON_DATE
      :OFFENSE_CODE
      :OFFENSE_CODE_GROUP
      :OFFENSE_DESCRIPTION
      :REPORTING_AREA
      :SHOOTING
      :STREET
      :UCR_PART
      :YEAR],
     :from [[:offenses :dd484]]}},
   :root [25 20],
   :tab "globular koala"},
  :block-9989
  {:clojure
   {:new-clojure-2
    (do
      (let [clojure-version (clojure-version)
            jvm-version (System/getProperty "java.version")]
        (str
          "🐇🥕 Sup! Internal RVBBIT nREPL. Clojure "
          clojure-version
          " on "
          jvm-version
          " JVM tech"
          " 🥕 🐇 ")))},
   :name "block-9989",
   :w 13,
   :selected-view :new-clojure-2,
   :root [28 6],
   :h 4,
   :queries {},
   :tab "motivating falcon",
   :views
   {:hare-vw
    [:box
     :align
     :center
     :justify
     :center
     :attr
     {:id ":block-9989.:hi"}
     :style
     {:font-size "21px",
      :font-weight 700,
      :padding-top "6px",
      :padding-left "14px",
      :margin-top "-8px",
      :color :theme/editor-outer-rim-color,
      :font-family :theme/base-font}
     :child
     "It's a perfect day for planting seeds and planning adventures!"]}},
  :block-5042
  {:clojure
   {:clojure-hop-7
    (do
      (ns rvbbit-backend.websockets)
      (let [rr :signal/every-30-seconds?]
        (draw-stats [:cpu :threads :nrepl-calls] [5 15 90 600] true 99)))},
   :name "block-5042",
   :w 20,
   :selected-mode {:clojure-hop-7 :terminal},
   :selected-view :clojure-hop-7,
   :root [17 12],
   :h 14,
   :display {:clojure-hop-7 :output},
   :tab "coffee llama"},
  :block-11887
  {:h 8,
   :w 14,
   :root [1 8],
   :tab "coffee llama",
   :selected-view :shell-hop,
   :name "block-11887",
   :shell {:shell-hop [" whoami ; ls  -l --color"]},
   :selected-mode {:shell-hop :terminal}}},
 :selected-block "none!",
 :theme-colors-hashmap
 {"float" "#ff2050",
  "boolean" "#8EA2A8",
  "map" "#379fb5",
  "list" "#36fb04",
  "string" "#CEEFD1",
  "any" "#eeeeee",
  "vector" "#2C4761",
  "keyword" "#006666",
  "rabbit-code" "#9F93AE",
  "datetime" "#A7B2B4",
  "integer" "#723c5f",
  "unknown" "#77919B",
  "date" "#6A6391",
  "nil" "#68beff"},
 :click-param
 {:tables-sys
  {:db_schema "none",
   :db_catalog nil,
   :connection_id "system-db",
   :schema_cat nil,
   :table_name "kits",
   :fields 13},
  :flow
  {:crow-flow-201a>*running? false,
   :counting-loop>*running? false,
   :flow-forever>final-math nil,
   :live-scratch-flow>*running? false,
   :flow-forever>*running? false},
  :time
  {:now-seconds "Wednesday, April 24 1:43:57PM", :month 4, :minute 39, :second 55},
  :viz-tables-sys2 {:table_name :offenses-drag-26},
  :time-freq-345d.* {:freq [1 30 60]},
  :stats-types-34.* {:type ["sql-exec" "cpu" "mem" "load" "flows+"]},
  :param
  {:background-image-path [:str :param/path-dir :param/rel-image-path],
   :path-dir "/home/ryanr/rvbbit/frontend/resources/public/",
   :selected-view-data
   (do
     (ns rvbbit-backend.websockets
       (:require [clojure.string :as cstr]))
     (def ansi-colors
      {:green "[32m",
       :yellow "[33m",
       :red "[31m",
       :blue "[34m",
       :magenta "[35m",
       :cyan "[36m",
       :reset "[0m"})
     (def stalactite-chars ["█" "▇" "▆" "▅" "▄" "▃" "▂" "▁"])
     (def drip-chars ["." "•" "°"])
     (def tt :time/second)
     (defn normalize-values [values]
       (let [max-val (apply max values) min-val (apply min values)]
         (if (= max-val min-val)
           (repeat (count values) 0.5)
           (map (fn [x] (/ (- x min-val) (- max-val min-val))) values))))
     (defn generate-stalactite [height value color]
       (let [stalactite-height (int (* height value))
             stalactite (take stalactite-height (cycle stalactite-chars))
             empty-space (repeat (- height stalactite-height) " ")]
         (str
           (color ansi-colors)
           (cstr/join (concat stalactite empty-space))
           (:reset ansi-colors))))
     (defn generate-drips [height value prev-value]
       (when (> prev-value value)
         (let [drip-height (int (* height (- prev-value value)))
               drips (take drip-height (cycle drip-chars))
               empty-space (repeat (- height drip-height) " ")]
           (cstr/join (concat empty-space drips)))))
     (defn create-visualization [width height cpu-usage mem-usage thread-usage]
       (let [cpu-width (int (* width 0.33))
             mem-width (int (* width 0.33))
             thread-width (- width cpu-width mem-width)
             history-length (min 10 (count cpu-usage))
             recent-cpu (take history-length (reverse cpu-usage))
             recent-mem (take history-length (reverse mem-usage))
             recent-thread (take history-length (reverse thread-usage))
             normalized-cpu (normalize-values recent-cpu)
             normalized-mem (normalize-values recent-mem)
             normalized-thread (normalize-values recent-thread)
             cpu-cols (map-indexed
                        (fn [idx val]
                          (str
                            (generate-stalactite height val :red)
                            (when (> idx 0)
                              (generate-drips
                                height
                                val
                                (nth normalized-cpu (dec idx))))))
                        normalized-cpu)
             mem-cols (map-indexed
                        (fn [idx val]
                          (str
                            (generate-stalactite height val :blue)
                            (when (> idx 0)
                              (generate-drips
                                height
                                val
                                (nth normalized-mem (dec idx))))))
                        normalized-mem)
             thread-cols (map-indexed
                           (fn [idx val]
                             (str
                               (generate-stalactite height val :green)
                               (when (> idx 0)
                                 (generate-drips
                                   height
                                   val
                                   (nth normalized-thread (dec idx))))))
                           normalized-thread)
             cpu-section (take cpu-width (cycle cpu-cols))
             mem-section (take mem-width (cycle mem-cols))
             thread-section (take thread-width (cycle thread-cols))
             all-cols (concat cpu-section mem-section thread-section)
             rows (apply map str all-cols)]
         (cstr/join "\n" rows)))
     (defn generate-visualization [width height cpu-usage mem-usage thread-usage]
       (let [visualization (create-visualization
                             width
                             height
                             cpu-usage
                             mem-usage
                             thread-usage)
             summary ""
             padding (apply str (repeat (- width (count summary)) " "))]
         (str
           visualization
           "\n"
           (:green ansi-colors)
           summary
           padding
           (:reset ansi-colors))))
     (println
       (generate-visualization
         :col-width
         28
         (take-last 100 @cpu-usage)
         (take-last 100 @mem-usage)
         (take-last 100 @thread-usage)))),
   :selected-view [:clojure :new-clojure-9],
   :generated-colors
   [:run-solver [:get-my-colors {:input-image-path :param/background-image-path}]],
   :well-cerise-kangaroo
   "Create a hyperrealistic image of a beautiful full-figured woman in her late 20s, of Irish descent, standing amidst the haunting scenery of a dystopian cyberpunk northeastern America, consumed by the gnarled overgrowth of a New England forest. The scene is steeped in a moody, melancholic atmosphere dominated by neon hues of pink, purple, and light blue, nestling in a stormy, rainy ambiance. The woman gazes directly into the camera, her long hair cascading down and her high-quality, intricate neck tattoos displayed prominently.   The atmosphere is gritty, breathing life into the combined aesthetic of cyberpunk and vaporwave. An air of defiance clings to her, an invitation or a challenge for you to join her world. A rabbit necklace graces her neck while matching intricate rabbit tattoos adorn her skin. Her lips are full and pouty, adding to her voluptuous charm and subtle pinup style. Her makeup runs down her face from the rain and humidity. ",
   :rel-image-path "images/large/b64-image3-48163-50841-4k.webp",
   :selected-block :block-7159,
   :glass-fish-style
   {:background-color "#00000000",
    :border-radius "16px",
    :box-shadow "10px 5px 5px #00000034",
    :backdrop-filter "blur(4px) brightness(60%)",
    :filter nil}},
  :theme
  {:codemirror-theme "rvbbit-dynamic",
   :editor-param-background-color "#000000",
   :base-block-style {:backdrop-filter "blur(2px) brightness(30%) "},
   :vega-defaults
   {:view {:stroke "transparent"},
    :axis
    {:domainColor "#ffffff22",
     :grid true,
     :font "Lato",
     :labelColor "#ffffff88",
     :titleFont "Lato",
     :titleColor "#ffffff99",
     :labelFont "Lato",
     :domain false,
     :gridColor "#ffffff22",
     :tickColor "#ffffff22",
     :axisFont "Lato"},
    :legend
    {:labelFont "Lato",
     :legendFont "Lato",
     :labelColor "#ffffff99",
     :titleColor "#ffffff99",
     :stroke "#ffffff99",
     :titleFont "Lato"},
    :header {:labelFont "Lato", :titleFont "Lato", :titleColor "#ffffff99"},
    :mark {:font "Lato"},
    :title
    {:font "Lato",
     :subtitleFont "Lato",
     :labelFont "Lato",
     :titleFont "Lato",
     :titleColor "#ffffff99"}},
   :grid-selected-column-css
   {:background-color "#00000088", :filter "brightness(200%)"},
   :base-block-color-selected "#00030a",
   :block-title-font-color "#ffffff",
   :universal-pop-color [:invert-hex-color :theme/editor-outer-rim-color],
   :base-block-color "#04041e82",
   :editor-rim-color "#379fb5",
   :base-block-filter-selected
   "drop-shadow(0.35rem 0.35rem 0.4rem #8dceff) drop-shadow(-0.35rem -0.35rem 0.4rem #8dceff)",
   :vega-default-color-scheme {:scheme "pastel2"},
   :data-colors
   {"float" "#ff2050",
    "boolean" "#8EA2A8",
    "map" "#379fb5",
    "list" "#36fb04",
    "string" "#CEEFD1",
    "any" "#eeeeee",
    "vector" "#2C4761",
    "keyword" "#006666",
    "rabbit-code" "#9F93AE",
    "datetime" "#A7B2B4",
    "integer" "#723c5f",
    "unknown" "#77919B",
    "date" "#6A6391",
    "nil" "#68beff"},
   :editor-grid-selected-font-color "#000000",
   :monospaced-font "Source Code Pro",
   :editor-grid-selected-background-color "#dc9cb0",
   :nivo-defaults
   {:font-family "Instagram Sans",
    :labels
    {:text
     {:fill "#ffffff",
      :font-size "16px",
      :font-family "Instagram Sans",
      :font-weight 700}},
    :tooltip
    {:container
     {:background "#000",
      :color "#ffffff",
      :text {:fill "#eeeeee"},
      :fontSize "18px",
      :borderRadius "4px",
      :boxShadow "0 1px 2px rgba(0, 0, 0, 0.55)",
      :padding "5px 9px"},
     :basic {:whiteSpace "pre", :display "flex", :alignItems "center"},
     :tableCell {:padding "3px 5px"}},
    :axis
    {:legend
     {:text
      {:fill "#ffffff",
       :font-size "14px",
       :font-family "Instagram Sans",
       :font-weight 700}},
     :ticks
     {:line {:stroke "#ffffff60"}, :text {:fill "#ffffff60", :font-weight 700}}},
    :grid {:line {:stroke "#ffffff", :strokeWidth 0, :strokeDasharray "0 0"}}},
   :editor-outer-rim-color "#379fb5",
   :grid-selected-font-color "#000000",
   :block-title-selected-font-color "#ffffff",
   :grid-selected-background-color "#a3d3ff",
   :grid-font-color "#ffffff",
   :universal-pop [:invert-hex-color :theme/editor-outer-rim-color],
   :canvas-background-css
   {:background-image [:str "url(images/large/b64-image3-42412-78214-4k.webp)"],
    :transition "all 0.8s ease-in-out",
    :background-blend-mode "multiply",
    :background-size "cover",
    :background-color "#424f57"},
   :editor-font-color "#ffffff",
   :base-font "Nova Square",
   :block-tab-selected-font-color "#c9d1ff",
   :editor-background-color "#000006",
   :editor-grid-font-color "#ffffff"},
  :connections-sys
  {:database_name "*cache-db*",
   :connection_id "system-db",
   :styler_highlight_8717ss 1},
  :ufo-sightings-drag-9
  {:duration_seconds_int 20,
   :comments
   "My older brother and twin sister were leaving the only Edna theater at about 9 PM&#44...we had our bikes and I took a different route home",
   :city "edna",
   :date_posted "2004-01-17",
   :longitude -96.6458333,
   :state "tx",
   :duration_seconds "20",
   :duration_hours "1/2 hour",
   :id 4,
   :shape "circle",
   :datetime "1956-10-10 21:00:00.000000",
   :latitude "28.9783333",
   :country "us"},
  :sys {:selected-tab "black crow", :selected-tab-idx 11}},
 :selected-flow "live-scratch-flow"}