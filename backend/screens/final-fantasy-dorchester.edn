{:orders
 {:flow-fn-sys
  [:name
   :full_map
   :description
   :inputs
   :icon
   :input_types
   :output_types
   :category],
  :fields-sys [:field_name :field_type :data_type],
  :tables-sys
  [:db_schema
   :db_catalog
   :connection_id
   :schema_cat
   :table_name
   :fields],
  :flows-drag-13
  [:body
   :components
   :connections
   :file_path
   :flow_id
   :last_modified
   :ts],
  :fflows-sys
  [:category :description :name :file_path :full_map :icon],
  :flows-sys [:flow_id :file_path :last_modified],
  :flow_functions
  [:connection_id
   :run_id
   :category
   :name
   :full_map
   :description
   :file_path
   :inputs
   :icon
   :input_types
   :output_types
   :updated],
  :flows
  [:file_path
   :flow_id
   :components
   :connections
   :last_modified
   :body
   :ts],
  :flow-functions-drag-1
  [:category
   :connection_id
   :description
   :file_path
   :full_map
   :icon
   :input_types
   :inputs
   :name
   :output_types
   :run_id
   :updated],
  :fflowparts-sys
  [:category :description :name :file_path :full_map :icon],
  :flow-fn-categories-sys [:category],
  :connections-sys [:database_name :connection_id],
  :reco-counts [:table_name :cnt],
  :kit-results-sys
  [:id
   :item_hash
   :item_name
   :kit_name
   :item_type
   :item_key
   :item_idx
   :item_options
   :item_data
   :client_name
   :flow_id
   :updated],
  :flow-fn-all-sys [:name],
  :flow-parts-sys [:flow_id :file_path :last_modified]},
 :reco-preview nil,
 :flow? false,
 :sql-source
 {:flows {:select [:*], :from [:flows], :limit 111},
  :flow_functions {:select [:*], :from [:flow_functions], :limit 111},
  :flows-drag-13
  {:select
   [:body
    :components
    :connections
    :file_path
    :flow_id
    :last_modified
    :ts],
   :from [[:flows :pp201]]},
  :flow-functions-drag-1
  {:select
   [:category
    :connection_id
    :description
    :file_path
    :full_map
    :icon
    :input_types
    :inputs
    :name
    :output_types
    :run_id
    :updated],
   :from [[:flow_functions :gg619]]}},
 :selected-flow-block :open-fn-1,
 :audio-playing? false,
 :meta
 {:flow-fn-sys
  {:fields
   {:name
    {:data-type "string",
     :distinct 12,
     :group-by? true,
     :commons {":write-file" 1, ":json-to-edn" 1, ":get-colors" 1},
     :cardinality 100},
    :full_map
    {:data-type "string",
     :distinct 12,
     :group-by? true,
     :commons
     {"{:file-path \"./flows/node-color-thief-js.edn\", :icon \"zmdi-gradient\", :description \"Take an image local path and generate a color palette map from it.\"}"
      1,
      "{:description \"Write file content to the server. Useful in chaining together operations.\", :fn (fn [full-path file-data] (rvbbit-backend.websockets/write-local-file full-path file-data)), :inputs [:full-path :file-data], :icon \"zmdi-file-text\", :types {:full-path :string, :file-data :string, :out :string}}"
      1,
      "{:description \"Push items to the client UI.\", :fn (fn [destination ref item-key thread-id message-name thread-desc & args] (rvbbit-backend.websockets/kick destination ref item-key thread-id message-name thread-desc args)), :type :kick, :icon \"images/pink-rabbit-head.png\", :defaults {:destination :client-name, :item-key \":base\", :thread-id :flow-id, :message-name \"Unnamed Message\", :thread-desc :flow-id, :ref :flow-id}, :types {:destination [:keyword :vector :list :set], :ref :string, :item-key :keyword, :thread-id :string, :message-name :string, :thread-desc :string, :out :any}, :pill-name \"content\", :style {:color \"#fc0fc0\"}, :selected-style {:color \"#fc0fc0\"}, :inputs [:destination :ref :item-key :thread-id :message-name :thread-desc], :expandable? true, :required [:destination :ref :item-key :thread-id :message-name :thread-desc]}"
      1},
     :cardinality 100},
    :description
    {:data-type "string",
     :distinct 12,
     :group-by? true,
     :commons
     {"Get top 50 color frequencies from an image in hex form." 1,
      "Write file content to the server. Useful in chaining together operations."
      1,
      "Execute shell command. WARNING: only use if you know what you're doing / have controlled inputs"
      1},
     :cardinality 100},
    :inputs
    {:data-type "string",
     :distinct 12,
     :group-by? true,
     :commons
     {"[:full-path :file-data]" 1,
      "[:destination :ref :item-key :thread-id :message-name :thread-desc]"
      1,
      "[:query]" 1},
     :cardinality 100},
    :icon
    {:data-type "string",
     :distinct 8,
     :group-by? true,
     :commons {"zmdi-file-text" 3, "zmdi-dns" 2, "zmdi-gradient" 2},
     :cardinality 66},
    :input_types
    {:data-type "string",
     :distinct 9,
     :group-by? true,
     :commons {"[:string]" 4, "[:any]" 1, "[:rowset]" 1},
     :cardinality 75},
    :output_types
    {:data-type "string",
     :distinct 5,
     :group-by? true,
     :commons {":any" 6, ":string" 3, ":keyword" 1},
     :cardinality 41},
    :category
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {":rabbit-base" 12},
     :cardinality 8}},
   :rowcount 12},
  :fields-sys
  {:fields
   {:field_name
    {:data-type "string",
     :distinct 12,
     :group-by? true,
     :commons {"icon" 1, "description" 1, "category" 1},
     :cardinality 100},
    :field_type
    {:data-type "string",
     :distinct 3,
     :group-by? true,
     :commons {"TEXT" 10, "TIMESTAMP" 1, "INTEGER" 1},
     :cardinality 25},
    :data_type
    {:data-type "string",
     :distinct 3,
     :group-by? true,
     :commons {"string" 10, "datetime" 1, "integer" 1},
     :cardinality 25}},
   :rowcount 12},
  :tables-sys
  {:fields
   {:db_schema
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {"none" 24},
     :cardinality 4},
    :db_catalog
    {:data-type "unknown",
     :distinct 1,
     :group-by? true,
     :commons {nil 24},
     :cardinality 4},
    :connection_id
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {"system-db" 24},
     :cardinality 4},
    :schema_cat
    {:data-type "unknown",
     :distinct 1,
     :group-by? false,
     :commons {nil 24},
     :cardinality 4},
    :table_name
    {:data-type "string",
     :distinct 24,
     :group-by? true,
     :commons
     {"connections" 1, "board_history" 1, "rule_maps_tests" 1},
     :cardinality 100},
    :fields
    {:data-type "integer",
     :distinct 15,
     :group-by? false,
     :commons {6 4, 5 3, 11 2},
     :cardinality 62}},
   :rowcount 24},
  :flows-drag-13
  {:fields
   {:body
    {:data-type "string",
     :distinct 54,
     :group-by? true,
     :commons
     {"{:flowmaps {:open-input {:w 200, :h 60, :data {:drag-meta {:type :open-block}, :user-input \"feed me, seymour!!\"}, :z 0, :ports {:out {:out :string}}, :x 1169.1345454545453, :y 1210.6763636363637}}, :flow-id \"clam-flow-851\", :flowmaps-connections [[:open-input :done]]}"
      2,
      "{:flowmaps {:kick-1 {:w 200, :h 100, :x 3449.707608604431, :y 1367.7343490600585, :z 0, :data {:flow-item {:description \"Push items to the client UI.\", :category \":rabbit-base\", :fn (fn [destination name sub-task & args] (rvbbit-backend.websockets/kick destination name sub-task args)), :name \":kick\", :type :kick, :icon \"images/pink-rabbit-head.png\", :defaults {:destination :client-name, :sub-task :flow-id, :name :flow-id}, :types {:destination [:keyword :vector :list :set], :name :string, :sub-task [:string :keyword], :out :any}, :input_types \"[[:keyword :vector :list :set] :string [:string :keyword]]\", :style {:color \"#fc0fc0\"}, :selected-style {:color \"#fc0fc0\"}, :inputs [:destination :name :sub-task :value-3 :value-4], :output_types \":any\", :expandable? true, :full_map \"{:description \\\"Push items to the client UI.\\\", :fn (fn [destination name sub-task & args] (rvbbit-backend.websockets/kick destination name sub-task args)), :type :kick, :icon \\\"images/pink-rabbit-head.png\\\", :defaults {:destination :client-name, :sub-task :flow-id, :name :flow-id}, :types {:destination [:keyword :vector :list :set], :name :string, :sub-task [:string :keyword], :out :any}, :style {:color \\\"#fc0fc0\\\"}, :selected-style {:color \\\"#fc0fc0\\\"}, :inputs [:destination :name :sub-task], :expandable? true, :required [:destination :name :sub-task]}\", :required [:destination :name :sub-task]}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :root [357.3567810058594 157.34896850585938], :h 6, :connection-id nil, :queries {:name-drag-40 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :nn284]], :where [:= :name \":kick\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":kick\", :param-field :name, :source-panel-key :flow-fn-list*, :type :kick, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 6}}, :icon \"images/pink-rabbit-head.png\", :ports {:in {:destination [:keyword :vector :list :set], :name :string, :sub-task [:string :keyword], :value-3 :any, :value-4 :any}, :out {:error :string, :* {:error \"java.lang.IllegalArgumentException: Don't know how to create ISeq from: java.lang.Long\"}}}}, :open-input-1 {:w 200, :h 60, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input \"feed me, seymour!\"}, :z 0, :ports {:in {}, :out {:out :string}}, :x 2736.8722753576326, :y 1370.837915698902}, :open-input-3 {:w 200, :h 60, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input :base}, :z 0, :ports {:out {:out :keyword}}, :x 2764.800122707993, :y 1561.5292232684237}, :kick-2 {:w 200, :h 100, :x 3412.0444202088465, :y 1642.0587967722038, :z 0, :data {:flow-item {:description \"Push items to the client UI.\", :category \":rabbit-base\", :fn (fn [destination name sub-task & args] (rvbbit-backend.websockets/kick destination name sub-task args)), :name \":kick\", :type :kick, :icon \"images/pink-rabbit-head.png\", :defaults {:destination :client-name, :sub-task :flow-id, :name :flow-id}, :types {:destination [:keyword :vector :list :set], :name :string, :sub-task [:string :keyword], :out :any}, :input_types \"[[:keyword :vector :list :set] :string [:string :keyword]]\", :style {:color \"#fc0fc0\"}, :selected-style {:color \"#fc0fc0\"}, :inputs [:destination :name :sub-task :value-3 :value-4 :value-5 :value-6], :output_types \":any\", :expandable? true, :full_map \"{:description \\\"Push items to the client UI.\\\", :fn (fn [destination name sub-task & args] (rvbbit-backend.websockets/kick destination name sub-task args)), :type :kick, :icon \\\"images/pink-rabbit-head.png\\\", :defaults {:destination :client-name, :sub-task :flow-id, :name :flow-id}, :types {:destination [:keyword :vector :list :set], :name :string, :sub-task [:string :keyword], :out :any}, :style {:color \\\"#fc0fc0\\\"}, :selected-style {:color \\\"#fc0fc0\\\"}, :inputs [:destination :name :sub-task], :expandable? true, :required [:destination :name :sub-task]}\", :required [:destination :name :sub-task]}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :root [1096.4557304382324 275.4192810058594], :h 6, :connection-id nil, :queries {:name-drag-19 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :tt488]], :where [:= :name \":kick\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":kick\", :param-field :name, :source-panel-key :flow-fn-list*, :type :kick, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 6}}, :icon \"images/pink-rabbit-head.png\", :ports {:in {:destination [:keyword :vector :list :set], :name :string, :sub-task [:string :keyword], :value-3 :any, :value-4 :any, :value-5 :any, :value-6 :any}, :out {:error :string, :* {:error \"java.lang.IllegalArgumentException: Don't know how to create ISeq from: java.lang.Long\"}}}}, :open-input-5 {:w 200, :h 60, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input \"nope!\"}, :z 0, :ports {:out {:out :string}}, :x 2720.677470934069, :y 1741.4885174725507}, :open-input {:w 200, :h 60, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input \"kick-test\"}, :z 0, :ports {:out {:out :string}}, :x 3004.6165799724517, :y 1592.9840098822297}, :open-input-4 {:w 200, :h 60, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input [:v-box :size \"auto\" :width \"490px\" :style {:font-size \"13px\", :opacity 0.33} :children [[:h-box :size \"auto\" :justify :between :children [[:box :child \":mean\"] [:box :child \"3853.75\" :style {:font-weight 400}]]] [:h-box :size \"auto\" :justify :between :children [[:box :child \":standard-deviation\"] [:box :child \"1099.883942741233\" :style {:font-weight 400}]]] [:h-box :size \"auto\" :justify :between :children [[:box :child \":sample-size\"] [:box :child \"4\" :style {:font-weight 400}]]] [:h-box :size \"auto\" :justify :between :children [[:box :child \":fields\"] [:box :child \"[:YEAR]\" :style {:font-weight 400}]]] [:h-box :size \"auto\" :justify :between :children [[:box :child \":calc-used\"] [:box :child \"[:percentiles [0.01 0.99]]\" :style {:font-weight 400}]]]]], :view-output? false, :width 350}, :z 0, :ports {:out {:idx7 :keyword, :idx5 :keyword, :* [:v-box :size \"auto\" :width \"490px\" :style {:font-size \"13px\", :opacity 0.33} :children [[:h-box :size \"auto\" :justify :between :children [[:box :child \":mean\"] [:box :child \"3853.75\" :style {:font-weight 400}]]] [:h-box :size \"auto\" :justify :between :children [[:box :child \":standard-deviation\"] [:box :child \"1099.883942741233\" :style {:font-weight 400}]]] [:h-box :size \"auto\" :justify :between :children [[:box :child \":sample-size\"] [:box :child \"4\" :style {:font-weight 400}]]] [:h-box :size \"auto\" :justify :between :children [[:box :child \":fields\"] [:box :child \"[:YEAR]\" :style {:font-weight 400}]]] [:h-box :size \"auto\" :justify :between :children [[:box :child \":calc-used\"] [:box :child \"[:percentiles [0.01 0.99]]\" :style {:font-weight 400}]]]]], :idx2 :string, :idx4 :string, :idx1 :keyword, :idx6 :map, :idx3 :keyword, :idx8 :vector, :idx0 :keyword}}, :x 3020.2006378998626, :y 1715.8480772276178}, :open-input-2 {:w 200, :h 60, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input :ufo-sightings-drag-44}, :z 0, :ports {:out {:out :keyword}}, :x 2759.2156427639634, :y 1475.5767468808303}}, :flow-id \"kick-test-1-3-24\", :flowmaps-connections [[:open-input-1 :kick-1/value-3] [:open-input :kick-1/name] [:kick-1 :done] [:open-input-3 :kick-1/sub-task] [:open-input-2 :kick-2/sub-task] [:open-input-4 :kick-2/value-3] [:open-input-5 :kick-2/value-4] [:open-input-1 :kick-2/value-5]]}"
      1,
      "{:flowmaps {:image-path {:w 200, :h 100, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input \" /home/ryanr/viz-yard/resources/public/images/shannon45.png\"}, :z 0, :ports {:out {:out :string}}, :x 948.9116738809121, :y 1074.148015202703}, :shell-command-1 {:w 200, :h 100, :x 1758.4411167689732, :y 1117.7292503720237, :z 0, :data {:flow-item {:description \"Execute shell command. WARNING: only use if you know what you're doing / have controlled inputs\", :category \":rabbit-base\", :fn (fn [command] (rvbbit-backend.websockets/run-shell-command command)), :name \":shell-command\", :icon \"zmdi-washing-machine\", :defaults {:command \"ls -la\"}, :types {:command :string, :out :any}, :input_types \"[:string]\", :style {:color \"#ffdd3c\"}, :selected-style {:color \"#ffdd3c\"}, :inputs \"[:command]\", :output_types \":any\", :full_map \"{:description \\\"Execute shell command. WARNING: only use if you know what you're doing / have controlled inputs\\\", :fn (fn [command] (rvbbit-backend.websockets/run-shell-command command)), :icon \\\"zmdi-washing-machine\\\", :defaults {:command \\\"ls -la\\\"}, :types {:command :string, :out :any}, :style {:color \\\"#ffdd3c\\\"}, :selected-style {:color \\\"#ffdd3c\\\"}, :inputs [:command], :required [:command]}\", :required [:command]}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :root [539.1770935058594 176.171875], :h 6, :connection-id nil, :queries {:name-drag-42 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :cc59]], :where [:= :name \":shell-command\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":shell-command\", :param-field :name, :source-panel-key :flow-fn-list*, :type :where, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 6}}, :icon \"zmdi-washing-machine\", :ports {:in {:command :string}, :out {:output :vector, :exception :vector, :seconds :vector, :command :string, :* :map}}}, :clojure-string-join-1 {:w 200, :h 100, :x 1348.4940418061756, :y 1136.4640299479165, :z 0, :data {:flow-item {:description \"Clojure.string's join function.\", :category \":clojure-base\", :fn (fn [delimiter & args] (clojure.string/join delimiter args)), :name \":clojure-string-join\", :icon \"zmdi-group\", :defaults {:delimiter \" \"}, :types {:delimiter :string, :out :string}, :input_types \"[:string]\", :inputs \"[:delimiter]\", :output_types \":string\", :expandable? true, :full_map \"{:description \\\"Clojure.string's join function.\\\", :fn (fn [delimiter & args] (clojure.string/join delimiter args)), :inputs [:delimiter], :required [:delimiter], :defaults {:delimiter \\\" \\\"}, :expandable? true, :icon \\\"zmdi-group\\\", :types {:delimiter :string, :out :string}}\", :required [:delimiter]}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :root [540.1770935058594 279.171875], :h 6, :connection-id nil, :queries {:name-drag-12 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :ww526]], :where [:= :name \":clojure-string-join\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":clojure-string-join\", :param-field :name, :source-panel-key :flow-fn-list*, :type :where, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 15}}, :icon \"zmdi-group\", :ports {:in {:delimiter :string, :value-1 :any, :value-2 :any}, :out {:out :string}}}, :shell-command-in {:w 200, :h 100, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input \"cd /home/ryanr/color-thief-project ; node ./colorThief.js\"}, :z 0, :ports {:out {:out :string}}, :x 960.0851863779922, :y 1224.4579849567817}, :join-output-as-string {:y 1158.848120777027, :fn (fn [x] x), :w 200, :raw-fn (fn [x] (clojure.string/join \" \" x)), :right-click? true, :icon \"zmdi-functions\", :z 0, :ports {:in {:value :any}, :out {:out :any}}, :h 100, :x 2212.3248878272807, :data {:flow-item {:description \"Write you own Clojure function! Godspeed!\", :category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :input_types \"[:any]\", :inputs \"[:value]\", :output_types \":any\", :expandable? true, :full_map \"{:description \\\"Write you own Clojure function! Godspeed!\\\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \\\"zmdi-functions\\\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}\"}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :h 6, :connection-id nil, :queries {:name-drag-25 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :ii11]], :where [:= :name \":open-fn\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":open-fn\", :param-field :name, :source-panel-key :flow-fn-list*, :type :open-fn, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 5}}}, :json-to-edn {:w 200, :h 100, :x 2685.7088668823244, :y 1151.33984375, :z 0, :data {:flow-item {:description \"Convert a JSON string to Clojure EDN\", :category \":rabbit-base\", :fn (fn [json-string] (rvbbit-backend.util/json-to-edn json-string)), :name \":json-to-edn\", :icon \"zmdi-file-text\", :types {:json-string :string, :out :any}, :input_types \"[:string]\", :inputs \"[:json-string]\", :output_types \":any\", :full_map \"{:description \\\"Convert a JSON string to Clojure EDN\\\", :fn (fn [json-string] (rvbbit-backend.util/json-to-edn json-string)), :inputs [:json-string], :icon \\\"zmdi-file-text\\\", :types {:json-string :string, :out :any}}\"}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :root [1297.1770935058594 207.171875], :h 6, :connection-id nil, :queries {:name-drag-41 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :uu284]], :where [:= :name \":json-to-edn\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":json-to-edn\", :param-field :name, :source-panel-key :flow-fn-list*, :type :where, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 7}}, :icon \"zmdi-file-text\", :ports {:in {:json-string :string}, :out {:dominantColor :string, :colorPalette :vector, :* :map}}}}, :flow-id \"node-color-thief-js\", :flowmaps-connections [[:shell-command-in :clojure-string-join-1/value-1] [:image-path :clojure-string-join-1/value-2] [:clojure-string-join-1 :shell-command-1/command] [:shell-command-1/output :join-output-as-string/value] [:join-output-as-string :json-to-edn/json-string] [:json-to-edn :done]]}"
      1},
     :cardinality 98},
    :components
    {:data-type "integer",
     :distinct 1,
     :group-by? true,
     :commons {0 55},
     :cardinality 1},
    :connections
    {:data-type "integer",
     :distinct 1,
     :group-by? true,
     :commons {0 55},
     :cardinality 1},
    :file_path
    {:data-type "string",
     :distinct 55,
     :group-by? true,
     :commons
     {"./flows/hey-rabbit-pathfinder.edn" 1,
      "./flows/dalle3-create-image-newengland-old.edn" 1,
      "./flows/hue-change-group-color.edn" 1},
     :cardinality 100},
    :flow_id
    {:data-type "string",
     :distinct 53,
     :group-by? true,
     :commons {"clam-flow-851" 3, "map-pull-test2" 1, "callie-3" 1},
     :cardinality 96},
    :last_modified
    {:data-type "string",
     :distinct 55,
     :group-by? true,
     :commons
     {"2023-12-31 20:10:21" 1,
      "2024-01-24 13:20:30" 1,
      "2024-01-06 18:53:33" 1},
     :cardinality 100},
    :ts
    {:data-type "string",
     :distinct 2,
     :group-by? true,
     :commons {"2024-01-28 21:44:13" 28, "2024-01-28 21:44:14" 27},
     :cardinality 3}},
   :rowcount 55},
  :fflows-sys
  {:fields
   {:category
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {":flow" 55},
     :cardinality 1},
    :description
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {"" 55},
     :cardinality 1},
    :name
    {:data-type "string",
     :distinct 53,
     :group-by? true,
     :commons {"clam-flow-851" 3, "map-pull-test2" 1, "callie-3" 1},
     :cardinality 96},
    :file_path
    {:data-type "string",
     :distinct 55,
     :group-by? true,
     :commons
     {"./flows/hey-rabbit-pathfinder.edn" 1,
      "./flows/dalle3-create-image-newengland-old.edn" 1,
      "./flows/hue-change-group-color.edn" 1},
     :cardinality 100},
    :full_map
    {:data-type "string",
     :distinct 54,
     :group-by? true,
     :commons
     {"{:flowmaps {:open-input {:w 200, :h 60, :data {:drag-meta {:type :open-block}, :user-input \"feed me, seymour!!\"}, :z 0, :ports {:out {:out :string}}, :x 1169.1345454545453, :y 1210.6763636363637}}, :flow-id \"clam-flow-851\", :flowmaps-connections [[:open-input :done]]}"
      2,
      "{:flowmaps {:kick-1 {:w 200, :h 100, :x 3449.707608604431, :y 1367.7343490600585, :z 0, :data {:flow-item {:description \"Push items to the client UI.\", :category \":rabbit-base\", :fn (fn [destination name sub-task & args] (rvbbit-backend.websockets/kick destination name sub-task args)), :name \":kick\", :type :kick, :icon \"images/pink-rabbit-head.png\", :defaults {:destination :client-name, :sub-task :flow-id, :name :flow-id}, :types {:destination [:keyword :vector :list :set], :name :string, :sub-task [:string :keyword], :out :any}, :input_types \"[[:keyword :vector :list :set] :string [:string :keyword]]\", :style {:color \"#fc0fc0\"}, :selected-style {:color \"#fc0fc0\"}, :inputs [:destination :name :sub-task :value-3 :value-4], :output_types \":any\", :expandable? true, :full_map \"{:description \\\"Push items to the client UI.\\\", :fn (fn [destination name sub-task & args] (rvbbit-backend.websockets/kick destination name sub-task args)), :type :kick, :icon \\\"images/pink-rabbit-head.png\\\", :defaults {:destination :client-name, :sub-task :flow-id, :name :flow-id}, :types {:destination [:keyword :vector :list :set], :name :string, :sub-task [:string :keyword], :out :any}, :style {:color \\\"#fc0fc0\\\"}, :selected-style {:color \\\"#fc0fc0\\\"}, :inputs [:destination :name :sub-task], :expandable? true, :required [:destination :name :sub-task]}\", :required [:destination :name :sub-task]}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :root [357.3567810058594 157.34896850585938], :h 6, :connection-id nil, :queries {:name-drag-40 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :nn284]], :where [:= :name \":kick\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":kick\", :param-field :name, :source-panel-key :flow-fn-list*, :type :kick, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 6}}, :icon \"images/pink-rabbit-head.png\", :ports {:in {:destination [:keyword :vector :list :set], :name :string, :sub-task [:string :keyword], :value-3 :any, :value-4 :any}, :out {:error :string, :* {:error \"java.lang.IllegalArgumentException: Don't know how to create ISeq from: java.lang.Long\"}}}}, :open-input-1 {:w 200, :h 60, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input \"feed me, seymour!\"}, :z 0, :ports {:in {}, :out {:out :string}}, :x 2736.8722753576326, :y 1370.837915698902}, :open-input-3 {:w 200, :h 60, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input :base}, :z 0, :ports {:out {:out :keyword}}, :x 2764.800122707993, :y 1561.5292232684237}, :kick-2 {:w 200, :h 100, :x 3412.0444202088465, :y 1642.0587967722038, :z 0, :data {:flow-item {:description \"Push items to the client UI.\", :category \":rabbit-base\", :fn (fn [destination name sub-task & args] (rvbbit-backend.websockets/kick destination name sub-task args)), :name \":kick\", :type :kick, :icon \"images/pink-rabbit-head.png\", :defaults {:destination :client-name, :sub-task :flow-id, :name :flow-id}, :types {:destination [:keyword :vector :list :set], :name :string, :sub-task [:string :keyword], :out :any}, :input_types \"[[:keyword :vector :list :set] :string [:string :keyword]]\", :style {:color \"#fc0fc0\"}, :selected-style {:color \"#fc0fc0\"}, :inputs [:destination :name :sub-task :value-3 :value-4 :value-5 :value-6], :output_types \":any\", :expandable? true, :full_map \"{:description \\\"Push items to the client UI.\\\", :fn (fn [destination name sub-task & args] (rvbbit-backend.websockets/kick destination name sub-task args)), :type :kick, :icon \\\"images/pink-rabbit-head.png\\\", :defaults {:destination :client-name, :sub-task :flow-id, :name :flow-id}, :types {:destination [:keyword :vector :list :set], :name :string, :sub-task [:string :keyword], :out :any}, :style {:color \\\"#fc0fc0\\\"}, :selected-style {:color \\\"#fc0fc0\\\"}, :inputs [:destination :name :sub-task], :expandable? true, :required [:destination :name :sub-task]}\", :required [:destination :name :sub-task]}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :root [1096.4557304382324 275.4192810058594], :h 6, :connection-id nil, :queries {:name-drag-19 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :tt488]], :where [:= :name \":kick\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":kick\", :param-field :name, :source-panel-key :flow-fn-list*, :type :kick, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 6}}, :icon \"images/pink-rabbit-head.png\", :ports {:in {:destination [:keyword :vector :list :set], :name :string, :sub-task [:string :keyword], :value-3 :any, :value-4 :any, :value-5 :any, :value-6 :any}, :out {:error :string, :* {:error \"java.lang.IllegalArgumentException: Don't know how to create ISeq from: java.lang.Long\"}}}}, :open-input-5 {:w 200, :h 60, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input \"nope!\"}, :z 0, :ports {:out {:out :string}}, :x 2720.677470934069, :y 1741.4885174725507}, :open-input {:w 200, :h 60, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input \"kick-test\"}, :z 0, :ports {:out {:out :string}}, :x 3004.6165799724517, :y 1592.9840098822297}, :open-input-4 {:w 200, :h 60, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input [:v-box :size \"auto\" :width \"490px\" :style {:font-size \"13px\", :opacity 0.33} :children [[:h-box :size \"auto\" :justify :between :children [[:box :child \":mean\"] [:box :child \"3853.75\" :style {:font-weight 400}]]] [:h-box :size \"auto\" :justify :between :children [[:box :child \":standard-deviation\"] [:box :child \"1099.883942741233\" :style {:font-weight 400}]]] [:h-box :size \"auto\" :justify :between :children [[:box :child \":sample-size\"] [:box :child \"4\" :style {:font-weight 400}]]] [:h-box :size \"auto\" :justify :between :children [[:box :child \":fields\"] [:box :child \"[:YEAR]\" :style {:font-weight 400}]]] [:h-box :size \"auto\" :justify :between :children [[:box :child \":calc-used\"] [:box :child \"[:percentiles [0.01 0.99]]\" :style {:font-weight 400}]]]]], :view-output? false, :width 350}, :z 0, :ports {:out {:idx7 :keyword, :idx5 :keyword, :* [:v-box :size \"auto\" :width \"490px\" :style {:font-size \"13px\", :opacity 0.33} :children [[:h-box :size \"auto\" :justify :between :children [[:box :child \":mean\"] [:box :child \"3853.75\" :style {:font-weight 400}]]] [:h-box :size \"auto\" :justify :between :children [[:box :child \":standard-deviation\"] [:box :child \"1099.883942741233\" :style {:font-weight 400}]]] [:h-box :size \"auto\" :justify :between :children [[:box :child \":sample-size\"] [:box :child \"4\" :style {:font-weight 400}]]] [:h-box :size \"auto\" :justify :between :children [[:box :child \":fields\"] [:box :child \"[:YEAR]\" :style {:font-weight 400}]]] [:h-box :size \"auto\" :justify :between :children [[:box :child \":calc-used\"] [:box :child \"[:percentiles [0.01 0.99]]\" :style {:font-weight 400}]]]]], :idx2 :string, :idx4 :string, :idx1 :keyword, :idx6 :map, :idx3 :keyword, :idx8 :vector, :idx0 :keyword}}, :x 3020.2006378998626, :y 1715.8480772276178}, :open-input-2 {:w 200, :h 60, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input :ufo-sightings-drag-44}, :z 0, :ports {:out {:out :keyword}}, :x 2759.2156427639634, :y 1475.5767468808303}}, :flow-id \"kick-test-1-3-24\", :flowmaps-connections [[:open-input-1 :kick-1/value-3] [:open-input :kick-1/name] [:kick-1 :done] [:open-input-3 :kick-1/sub-task] [:open-input-2 :kick-2/sub-task] [:open-input-4 :kick-2/value-3] [:open-input-5 :kick-2/value-4] [:open-input-1 :kick-2/value-5]]}"
      1,
      "{:flowmaps {:image-path {:w 200, :h 100, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input \" /home/ryanr/viz-yard/resources/public/images/shannon45.png\"}, :z 0, :ports {:out {:out :string}}, :x 948.9116738809121, :y 1074.148015202703}, :shell-command-1 {:w 200, :h 100, :x 1758.4411167689732, :y 1117.7292503720237, :z 0, :data {:flow-item {:description \"Execute shell command. WARNING: only use if you know what you're doing / have controlled inputs\", :category \":rabbit-base\", :fn (fn [command] (rvbbit-backend.websockets/run-shell-command command)), :name \":shell-command\", :icon \"zmdi-washing-machine\", :defaults {:command \"ls -la\"}, :types {:command :string, :out :any}, :input_types \"[:string]\", :style {:color \"#ffdd3c\"}, :selected-style {:color \"#ffdd3c\"}, :inputs \"[:command]\", :output_types \":any\", :full_map \"{:description \\\"Execute shell command. WARNING: only use if you know what you're doing / have controlled inputs\\\", :fn (fn [command] (rvbbit-backend.websockets/run-shell-command command)), :icon \\\"zmdi-washing-machine\\\", :defaults {:command \\\"ls -la\\\"}, :types {:command :string, :out :any}, :style {:color \\\"#ffdd3c\\\"}, :selected-style {:color \\\"#ffdd3c\\\"}, :inputs [:command], :required [:command]}\", :required [:command]}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :root [539.1770935058594 176.171875], :h 6, :connection-id nil, :queries {:name-drag-42 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :cc59]], :where [:= :name \":shell-command\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":shell-command\", :param-field :name, :source-panel-key :flow-fn-list*, :type :where, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 6}}, :icon \"zmdi-washing-machine\", :ports {:in {:command :string}, :out {:output :vector, :exception :vector, :seconds :vector, :command :string, :* :map}}}, :clojure-string-join-1 {:w 200, :h 100, :x 1348.4940418061756, :y 1136.4640299479165, :z 0, :data {:flow-item {:description \"Clojure.string's join function.\", :category \":clojure-base\", :fn (fn [delimiter & args] (clojure.string/join delimiter args)), :name \":clojure-string-join\", :icon \"zmdi-group\", :defaults {:delimiter \" \"}, :types {:delimiter :string, :out :string}, :input_types \"[:string]\", :inputs \"[:delimiter]\", :output_types \":string\", :expandable? true, :full_map \"{:description \\\"Clojure.string's join function.\\\", :fn (fn [delimiter & args] (clojure.string/join delimiter args)), :inputs [:delimiter], :required [:delimiter], :defaults {:delimiter \\\" \\\"}, :expandable? true, :icon \\\"zmdi-group\\\", :types {:delimiter :string, :out :string}}\", :required [:delimiter]}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :root [540.1770935058594 279.171875], :h 6, :connection-id nil, :queries {:name-drag-12 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :ww526]], :where [:= :name \":clojure-string-join\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":clojure-string-join\", :param-field :name, :source-panel-key :flow-fn-list*, :type :where, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 15}}, :icon \"zmdi-group\", :ports {:in {:delimiter :string, :value-1 :any, :value-2 :any}, :out {:out :string}}}, :shell-command-in {:w 200, :h 100, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input \"cd /home/ryanr/color-thief-project ; node ./colorThief.js\"}, :z 0, :ports {:out {:out :string}}, :x 960.0851863779922, :y 1224.4579849567817}, :join-output-as-string {:y 1158.848120777027, :fn (fn [x] x), :w 200, :raw-fn (fn [x] (clojure.string/join \" \" x)), :right-click? true, :icon \"zmdi-functions\", :z 0, :ports {:in {:value :any}, :out {:out :any}}, :h 100, :x 2212.3248878272807, :data {:flow-item {:description \"Write you own Clojure function! Godspeed!\", :category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :input_types \"[:any]\", :inputs \"[:value]\", :output_types \":any\", :expandable? true, :full_map \"{:description \\\"Write you own Clojure function! Godspeed!\\\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \\\"zmdi-functions\\\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}\"}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :h 6, :connection-id nil, :queries {:name-drag-25 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :ii11]], :where [:= :name \":open-fn\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":open-fn\", :param-field :name, :source-panel-key :flow-fn-list*, :type :open-fn, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 5}}}, :json-to-edn {:w 200, :h 100, :x 2685.7088668823244, :y 1151.33984375, :z 0, :data {:flow-item {:description \"Convert a JSON string to Clojure EDN\", :category \":rabbit-base\", :fn (fn [json-string] (rvbbit-backend.util/json-to-edn json-string)), :name \":json-to-edn\", :icon \"zmdi-file-text\", :types {:json-string :string, :out :any}, :input_types \"[:string]\", :inputs \"[:json-string]\", :output_types \":any\", :full_map \"{:description \\\"Convert a JSON string to Clojure EDN\\\", :fn (fn [json-string] (rvbbit-backend.util/json-to-edn json-string)), :inputs [:json-string], :icon \\\"zmdi-file-text\\\", :types {:json-string :string, :out :any}}\"}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :root [1297.1770935058594 207.171875], :h 6, :connection-id nil, :queries {:name-drag-41 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :uu284]], :where [:= :name \":json-to-edn\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":json-to-edn\", :param-field :name, :source-panel-key :flow-fn-list*, :type :where, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 7}}, :icon \"zmdi-file-text\", :ports {:in {:json-string :string}, :out {:dominantColor :string, :colorPalette :vector, :* :map}}}}, :flow-id \"node-color-thief-js\", :flowmaps-connections [[:shell-command-in :clojure-string-join-1/value-1] [:image-path :clojure-string-join-1/value-2] [:clojure-string-join-1 :shell-command-1/command] [:shell-command-1/output :join-output-as-string/value] [:join-output-as-string :json-to-edn/json-string] [:json-to-edn :done]]}"
      1},
     :cardinality 98},
    :icon
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {"zmdi-developer-board" 55},
     :cardinality 1}},
   :rowcount 55},
  :flows-sys
  {:fields
   {:flow_id
    {:data-type "string",
     :distinct 53,
     :group-by? true,
     :commons {"clam-flow-851" 3, "map-pull-test2" 1, "callie-3" 1},
     :cardinality 96},
    :file_path
    {:data-type "string",
     :distinct 55,
     :group-by? true,
     :commons
     {"./flows/hey-rabbit-pathfinder.edn" 1,
      "./flows/dalle3-create-image-newengland-old.edn" 1,
      "./flows/hue-change-group-color.edn" 1},
     :cardinality 100},
    :last_modified
    {:data-type "string",
     :distinct 55,
     :group-by? true,
     :commons
     {"2023-12-31 20:10:21" 1,
      "2024-01-24 13:20:30" 1,
      "2024-01-06 18:53:33" 1},
     :cardinality 100}},
   :rowcount 55},
  :flow_functions
  {:fields
   {:description
    {:data-type "string",
     :distinct 28,
     :group-by? true,
     :commons
     {"Clojure subtract function." 2,
      "Get top 50 color frequencies from an image in hex form." 1,
      "Clojure.string's join function." 1},
     :cardinality 96},
    :category
    {:data-type "string",
     :distinct 3,
     :group-by? true,
     :commons
     {":clojure-base" 16, ":rabbit-base" 12, ":owen-wilson" 1},
     :cardinality 10},
    :run_id
    {:data-type "integer",
     :distinct 1,
     :group-by? true,
     :commons {0 29},
     :cardinality 3},
    :updated
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {"2024-01-28 21:44:17" 29},
     :cardinality 3},
    :name
    {:data-type "string",
     :distinct 29,
     :group-by? true,
     :commons {":=" 1, ":>=" 1, ":write-file" 1},
     :cardinality 100},
    :icon
    {:data-type "string",
     :distinct 18,
     :group-by? true,
     :commons {"zmdi-pizza" 4, "zmdi-file-text" 3, "zmdi-dns" 2},
     :cardinality 62},
    :input_types
    {:data-type "string",
     :distinct 14,
     :group-by? true,
     :commons
     {"[[:integer :float] [:integer :float]]" 7,
      "[:string]" 5,
      "[:any]" 3},
     :cardinality 48},
    :inputs
    {:data-type "string",
     :distinct 16,
     :group-by? true,
     :commons {"[:value1 :value2]" 8, "[:value]" 6, "" 2},
     :cardinality 55},
    :file_path
    {:data-type "string",
     :distinct 3,
     :group-by? true,
     :commons
     {"" 27,
      "./flows/a-random-wow.edn" 1,
      "./flows/node-color-thief-js.edn" 1},
     :cardinality 10},
    :output_types
    {:data-type "string",
     :distinct 8,
     :group-by? true,
     :commons {":boolean" 11, ":any" 6, ":string" 4},
     :cardinality 27},
    :connection_id
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {"system-db" 29},
     :cardinality 3},
    :full_map
    {:data-type "string",
     :distinct 29,
     :group-by? true,
     :commons
     {"{:file-path \"./flows/a-random-wow.edn\", :icon \"zmdi-pizza\", :description \"A random Owen Wilson quote from the Wedding Crashers movie.\"}"
      1,
      "{:description \"Clojure greater-than-or-equal function.\", :fn >, :inputs [:value1 :value2], :icon \"zmdi-chevron-right\", :types {:value1 [:integer :float], :value2 [:integer :float], :out :boolean}}"
      1,
      "{:description \"Clojure subtract function.\", :fn =, :inputs [:value1 :value2], :icon \"zmdi-swap\", :types {:value1 :any, :value2 :any, :out :boolean}}"
      1},
     :cardinality 100}},
   :rowcount 29},
  :flows
  {:fields
   {:file_path
    {:data-type "string",
     :distinct 55,
     :group-by? true,
     :commons
     {"./flows/hey-rabbit-pathfinder.edn" 1,
      "./flows/dalle3-create-image-newengland-old.edn" 1,
      "./flows/hue-change-group-color.edn" 1},
     :cardinality 100},
    :flow_id
    {:data-type "string",
     :distinct 53,
     :group-by? true,
     :commons {"clam-flow-851" 3, "map-pull-test2" 1, "callie-3" 1},
     :cardinality 96},
    :components
    {:data-type "integer",
     :distinct 1,
     :group-by? true,
     :commons {0 55},
     :cardinality 1},
    :connections
    {:data-type "integer",
     :distinct 1,
     :group-by? true,
     :commons {0 55},
     :cardinality 1},
    :last_modified
    {:data-type "string",
     :distinct 55,
     :group-by? true,
     :commons
     {"2023-12-31 20:10:21" 1,
      "2024-01-24 13:20:30" 1,
      "2024-01-06 18:53:33" 1},
     :cardinality 100},
    :body
    {:data-type "string",
     :distinct 54,
     :group-by? true,
     :commons
     {"{:flowmaps {:open-input {:w 200, :h 60, :data {:drag-meta {:type :open-block}, :user-input \"feed me, seymour!!\"}, :z 0, :ports {:out {:out :string}}, :x 1169.1345454545453, :y 1210.6763636363637}}, :flow-id \"clam-flow-851\", :flowmaps-connections [[:open-input :done]]}"
      2,
      "{:flowmaps {:kick-1 {:w 200, :h 100, :x 3449.707608604431, :y 1367.7343490600585, :z 0, :data {:flow-item {:description \"Push items to the client UI.\", :category \":rabbit-base\", :fn (fn [destination name sub-task & args] (rvbbit-backend.websockets/kick destination name sub-task args)), :name \":kick\", :type :kick, :icon \"images/pink-rabbit-head.png\", :defaults {:destination :client-name, :sub-task :flow-id, :name :flow-id}, :types {:destination [:keyword :vector :list :set], :name :string, :sub-task [:string :keyword], :out :any}, :input_types \"[[:keyword :vector :list :set] :string [:string :keyword]]\", :style {:color \"#fc0fc0\"}, :selected-style {:color \"#fc0fc0\"}, :inputs [:destination :name :sub-task :value-3 :value-4], :output_types \":any\", :expandable? true, :full_map \"{:description \\\"Push items to the client UI.\\\", :fn (fn [destination name sub-task & args] (rvbbit-backend.websockets/kick destination name sub-task args)), :type :kick, :icon \\\"images/pink-rabbit-head.png\\\", :defaults {:destination :client-name, :sub-task :flow-id, :name :flow-id}, :types {:destination [:keyword :vector :list :set], :name :string, :sub-task [:string :keyword], :out :any}, :style {:color \\\"#fc0fc0\\\"}, :selected-style {:color \\\"#fc0fc0\\\"}, :inputs [:destination :name :sub-task], :expandable? true, :required [:destination :name :sub-task]}\", :required [:destination :name :sub-task]}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :root [357.3567810058594 157.34896850585938], :h 6, :connection-id nil, :queries {:name-drag-40 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :nn284]], :where [:= :name \":kick\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":kick\", :param-field :name, :source-panel-key :flow-fn-list*, :type :kick, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 6}}, :icon \"images/pink-rabbit-head.png\", :ports {:in {:destination [:keyword :vector :list :set], :name :string, :sub-task [:string :keyword], :value-3 :any, :value-4 :any}, :out {:error :string, :* {:error \"java.lang.IllegalArgumentException: Don't know how to create ISeq from: java.lang.Long\"}}}}, :open-input-1 {:w 200, :h 60, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input \"feed me, seymour!\"}, :z 0, :ports {:in {}, :out {:out :string}}, :x 2736.8722753576326, :y 1370.837915698902}, :open-input-3 {:w 200, :h 60, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input :base}, :z 0, :ports {:out {:out :keyword}}, :x 2764.800122707993, :y 1561.5292232684237}, :kick-2 {:w 200, :h 100, :x 3412.0444202088465, :y 1642.0587967722038, :z 0, :data {:flow-item {:description \"Push items to the client UI.\", :category \":rabbit-base\", :fn (fn [destination name sub-task & args] (rvbbit-backend.websockets/kick destination name sub-task args)), :name \":kick\", :type :kick, :icon \"images/pink-rabbit-head.png\", :defaults {:destination :client-name, :sub-task :flow-id, :name :flow-id}, :types {:destination [:keyword :vector :list :set], :name :string, :sub-task [:string :keyword], :out :any}, :input_types \"[[:keyword :vector :list :set] :string [:string :keyword]]\", :style {:color \"#fc0fc0\"}, :selected-style {:color \"#fc0fc0\"}, :inputs [:destination :name :sub-task :value-3 :value-4 :value-5 :value-6], :output_types \":any\", :expandable? true, :full_map \"{:description \\\"Push items to the client UI.\\\", :fn (fn [destination name sub-task & args] (rvbbit-backend.websockets/kick destination name sub-task args)), :type :kick, :icon \\\"images/pink-rabbit-head.png\\\", :defaults {:destination :client-name, :sub-task :flow-id, :name :flow-id}, :types {:destination [:keyword :vector :list :set], :name :string, :sub-task [:string :keyword], :out :any}, :style {:color \\\"#fc0fc0\\\"}, :selected-style {:color \\\"#fc0fc0\\\"}, :inputs [:destination :name :sub-task], :expandable? true, :required [:destination :name :sub-task]}\", :required [:destination :name :sub-task]}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :root [1096.4557304382324 275.4192810058594], :h 6, :connection-id nil, :queries {:name-drag-19 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :tt488]], :where [:= :name \":kick\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":kick\", :param-field :name, :source-panel-key :flow-fn-list*, :type :kick, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 6}}, :icon \"images/pink-rabbit-head.png\", :ports {:in {:destination [:keyword :vector :list :set], :name :string, :sub-task [:string :keyword], :value-3 :any, :value-4 :any, :value-5 :any, :value-6 :any}, :out {:error :string, :* {:error \"java.lang.IllegalArgumentException: Don't know how to create ISeq from: java.lang.Long\"}}}}, :open-input-5 {:w 200, :h 60, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input \"nope!\"}, :z 0, :ports {:out {:out :string}}, :x 2720.677470934069, :y 1741.4885174725507}, :open-input {:w 200, :h 60, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input \"kick-test\"}, :z 0, :ports {:out {:out :string}}, :x 3004.6165799724517, :y 1592.9840098822297}, :open-input-4 {:w 200, :h 60, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input [:v-box :size \"auto\" :width \"490px\" :style {:font-size \"13px\", :opacity 0.33} :children [[:h-box :size \"auto\" :justify :between :children [[:box :child \":mean\"] [:box :child \"3853.75\" :style {:font-weight 400}]]] [:h-box :size \"auto\" :justify :between :children [[:box :child \":standard-deviation\"] [:box :child \"1099.883942741233\" :style {:font-weight 400}]]] [:h-box :size \"auto\" :justify :between :children [[:box :child \":sample-size\"] [:box :child \"4\" :style {:font-weight 400}]]] [:h-box :size \"auto\" :justify :between :children [[:box :child \":fields\"] [:box :child \"[:YEAR]\" :style {:font-weight 400}]]] [:h-box :size \"auto\" :justify :between :children [[:box :child \":calc-used\"] [:box :child \"[:percentiles [0.01 0.99]]\" :style {:font-weight 400}]]]]], :view-output? false, :width 350}, :z 0, :ports {:out {:idx7 :keyword, :idx5 :keyword, :* [:v-box :size \"auto\" :width \"490px\" :style {:font-size \"13px\", :opacity 0.33} :children [[:h-box :size \"auto\" :justify :between :children [[:box :child \":mean\"] [:box :child \"3853.75\" :style {:font-weight 400}]]] [:h-box :size \"auto\" :justify :between :children [[:box :child \":standard-deviation\"] [:box :child \"1099.883942741233\" :style {:font-weight 400}]]] [:h-box :size \"auto\" :justify :between :children [[:box :child \":sample-size\"] [:box :child \"4\" :style {:font-weight 400}]]] [:h-box :size \"auto\" :justify :between :children [[:box :child \":fields\"] [:box :child \"[:YEAR]\" :style {:font-weight 400}]]] [:h-box :size \"auto\" :justify :between :children [[:box :child \":calc-used\"] [:box :child \"[:percentiles [0.01 0.99]]\" :style {:font-weight 400}]]]]], :idx2 :string, :idx4 :string, :idx1 :keyword, :idx6 :map, :idx3 :keyword, :idx8 :vector, :idx0 :keyword}}, :x 3020.2006378998626, :y 1715.8480772276178}, :open-input-2 {:w 200, :h 60, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input :ufo-sightings-drag-44}, :z 0, :ports {:out {:out :keyword}}, :x 2759.2156427639634, :y 1475.5767468808303}}, :flow-id \"kick-test-1-3-24\", :flowmaps-connections [[:open-input-1 :kick-1/value-3] [:open-input :kick-1/name] [:kick-1 :done] [:open-input-3 :kick-1/sub-task] [:open-input-2 :kick-2/sub-task] [:open-input-4 :kick-2/value-3] [:open-input-5 :kick-2/value-4] [:open-input-1 :kick-2/value-5]]}"
      1,
      "{:flowmaps {:image-path {:w 200, :h 100, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input \" /home/ryanr/viz-yard/resources/public/images/shannon45.png\"}, :z 0, :ports {:out {:out :string}}, :x 948.9116738809121, :y 1074.148015202703}, :shell-command-1 {:w 200, :h 100, :x 1758.4411167689732, :y 1117.7292503720237, :z 0, :data {:flow-item {:description \"Execute shell command. WARNING: only use if you know what you're doing / have controlled inputs\", :category \":rabbit-base\", :fn (fn [command] (rvbbit-backend.websockets/run-shell-command command)), :name \":shell-command\", :icon \"zmdi-washing-machine\", :defaults {:command \"ls -la\"}, :types {:command :string, :out :any}, :input_types \"[:string]\", :style {:color \"#ffdd3c\"}, :selected-style {:color \"#ffdd3c\"}, :inputs \"[:command]\", :output_types \":any\", :full_map \"{:description \\\"Execute shell command. WARNING: only use if you know what you're doing / have controlled inputs\\\", :fn (fn [command] (rvbbit-backend.websockets/run-shell-command command)), :icon \\\"zmdi-washing-machine\\\", :defaults {:command \\\"ls -la\\\"}, :types {:command :string, :out :any}, :style {:color \\\"#ffdd3c\\\"}, :selected-style {:color \\\"#ffdd3c\\\"}, :inputs [:command], :required [:command]}\", :required [:command]}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :root [539.1770935058594 176.171875], :h 6, :connection-id nil, :queries {:name-drag-42 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :cc59]], :where [:= :name \":shell-command\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":shell-command\", :param-field :name, :source-panel-key :flow-fn-list*, :type :where, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 6}}, :icon \"zmdi-washing-machine\", :ports {:in {:command :string}, :out {:output :vector, :exception :vector, :seconds :vector, :command :string, :* :map}}}, :clojure-string-join-1 {:w 200, :h 100, :x 1348.4940418061756, :y 1136.4640299479165, :z 0, :data {:flow-item {:description \"Clojure.string's join function.\", :category \":clojure-base\", :fn (fn [delimiter & args] (clojure.string/join delimiter args)), :name \":clojure-string-join\", :icon \"zmdi-group\", :defaults {:delimiter \" \"}, :types {:delimiter :string, :out :string}, :input_types \"[:string]\", :inputs \"[:delimiter]\", :output_types \":string\", :expandable? true, :full_map \"{:description \\\"Clojure.string's join function.\\\", :fn (fn [delimiter & args] (clojure.string/join delimiter args)), :inputs [:delimiter], :required [:delimiter], :defaults {:delimiter \\\" \\\"}, :expandable? true, :icon \\\"zmdi-group\\\", :types {:delimiter :string, :out :string}}\", :required [:delimiter]}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :root [540.1770935058594 279.171875], :h 6, :connection-id nil, :queries {:name-drag-12 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :ww526]], :where [:= :name \":clojure-string-join\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":clojure-string-join\", :param-field :name, :source-panel-key :flow-fn-list*, :type :where, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 15}}, :icon \"zmdi-group\", :ports {:in {:delimiter :string, :value-1 :any, :value-2 :any}, :out {:out :string}}}, :shell-command-in {:w 200, :h 100, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input \"cd /home/ryanr/color-thief-project ; node ./colorThief.js\"}, :z 0, :ports {:out {:out :string}}, :x 960.0851863779922, :y 1224.4579849567817}, :join-output-as-string {:y 1158.848120777027, :fn (fn [x] x), :w 200, :raw-fn (fn [x] (clojure.string/join \" \" x)), :right-click? true, :icon \"zmdi-functions\", :z 0, :ports {:in {:value :any}, :out {:out :any}}, :h 100, :x 2212.3248878272807, :data {:flow-item {:description \"Write you own Clojure function! Godspeed!\", :category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :input_types \"[:any]\", :inputs \"[:value]\", :output_types \":any\", :expandable? true, :full_map \"{:description \\\"Write you own Clojure function! Godspeed!\\\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \\\"zmdi-functions\\\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}\"}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :h 6, :connection-id nil, :queries {:name-drag-25 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :ii11]], :where [:= :name \":open-fn\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":open-fn\", :param-field :name, :source-panel-key :flow-fn-list*, :type :open-fn, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 5}}}, :json-to-edn {:w 200, :h 100, :x 2685.7088668823244, :y 1151.33984375, :z 0, :data {:flow-item {:description \"Convert a JSON string to Clojure EDN\", :category \":rabbit-base\", :fn (fn [json-string] (rvbbit-backend.util/json-to-edn json-string)), :name \":json-to-edn\", :icon \"zmdi-file-text\", :types {:json-string :string, :out :any}, :input_types \"[:string]\", :inputs \"[:json-string]\", :output_types \":any\", :full_map \"{:description \\\"Convert a JSON string to Clojure EDN\\\", :fn (fn [json-string] (rvbbit-backend.util/json-to-edn json-string)), :inputs [:json-string], :icon \\\"zmdi-file-text\\\", :types {:json-string :string, :out :any}}\"}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :root [1297.1770935058594 207.171875], :h 6, :connection-id nil, :queries {:name-drag-41 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :uu284]], :where [:= :name \":json-to-edn\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":json-to-edn\", :param-field :name, :source-panel-key :flow-fn-list*, :type :where, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 7}}, :icon \"zmdi-file-text\", :ports {:in {:json-string :string}, :out {:dominantColor :string, :colorPalette :vector, :* :map}}}}, :flow-id \"node-color-thief-js\", :flowmaps-connections [[:shell-command-in :clojure-string-join-1/value-1] [:image-path :clojure-string-join-1/value-2] [:clojure-string-join-1 :shell-command-1/command] [:shell-command-1/output :join-output-as-string/value] [:join-output-as-string :json-to-edn/json-string] [:json-to-edn :done]]}"
      1},
     :cardinality 98},
    :ts
    {:data-type "string",
     :distinct 2,
     :group-by? true,
     :commons {"2024-01-28 21:44:13" 28, "2024-01-28 21:44:14" 27},
     :cardinality 3}},
   :rowcount 55},
  :flow-functions-drag-1
  {:fields
   {:description
    {:data-type "string",
     :distinct 28,
     :group-by? true,
     :commons
     {"Clojure subtract function." 2,
      "Get top 50 color frequencies from an image in hex form." 1,
      "Clojure.string's join function." 1},
     :cardinality 96},
    :category
    {:data-type "string",
     :distinct 3,
     :group-by? true,
     :commons
     {":clojure-base" 16, ":rabbit-base" 12, ":owen-wilson" 1},
     :cardinality 10},
    :run_id
    {:data-type "integer",
     :distinct 1,
     :group-by? true,
     :commons {0 29},
     :cardinality 3},
    :updated
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {"2024-01-28 21:44:17" 29},
     :cardinality 3},
    :name
    {:data-type "string",
     :distinct 29,
     :group-by? true,
     :commons {":=" 1, ":>=" 1, ":write-file" 1},
     :cardinality 100},
    :icon
    {:data-type "string",
     :distinct 18,
     :group-by? true,
     :commons {"zmdi-pizza" 4, "zmdi-file-text" 3, "zmdi-dns" 2},
     :cardinality 62},
    :input_types
    {:data-type "string",
     :distinct 14,
     :group-by? true,
     :commons
     {"[[:integer :float] [:integer :float]]" 7,
      "[:string]" 5,
      "[:any]" 3},
     :cardinality 48},
    :inputs
    {:data-type "string",
     :distinct 16,
     :group-by? true,
     :commons {"[:value1 :value2]" 8, "[:value]" 6, "" 2},
     :cardinality 55},
    :file_path
    {:data-type "string",
     :distinct 3,
     :group-by? true,
     :commons
     {"" 27,
      "./flows/a-random-wow.edn" 1,
      "./flows/node-color-thief-js.edn" 1},
     :cardinality 10},
    :output_types
    {:data-type "string",
     :distinct 8,
     :group-by? true,
     :commons {":boolean" 11, ":any" 6, ":string" 4},
     :cardinality 27},
    :connection_id
    {:data-type "string",
     :distinct 1,
     :group-by? true,
     :commons {"system-db" 29},
     :cardinality 3},
    :full_map
    {:data-type "string",
     :distinct 29,
     :group-by? true,
     :commons
     {"{:file-path \"./flows/a-random-wow.edn\", :icon \"zmdi-pizza\", :description \"A random Owen Wilson quote from the Wedding Crashers movie.\"}"
      1,
      "{:description \"Clojure greater-than-or-equal function.\", :fn >, :inputs [:value1 :value2], :icon \"zmdi-chevron-right\", :types {:value1 [:integer :float], :value2 [:integer :float], :out :boolean}}"
      1,
      "{:description \"Clojure subtract function.\", :fn =, :inputs [:value1 :value2], :icon \"zmdi-swap\", :types {:value1 :any, :value2 :any, :out :boolean}}"
      1},
     :cardinality 100}},
   :rowcount 29},
  :fflowparts-sys
  {:fields
   {:category
    {:data-type "string",
     :distinct 3,
     :group-by? true,
     :commons
     {":clojure-base" 16, ":rabbit-base" 12, ":owen-wilson" 1},
     :cardinality 10},
    :description
    {:data-type "string",
     :distinct 28,
     :group-by? true,
     :commons
     {"Clojure subtract function." 2,
      "Get top 50 color frequencies from an image in hex form." 1,
      "Clojure.string's join function." 1},
     :cardinality 96},
    :name
    {:data-type "string",
     :distinct 29,
     :group-by? true,
     :commons {":=" 1, ":>=" 1, ":write-file" 1},
     :cardinality 100},
    :file_path
    {:data-type "string",
     :distinct 3,
     :group-by? true,
     :commons
     {"" 27,
      "./flows/a-random-wow.edn" 1,
      "./flows/node-color-thief-js.edn" 1},
     :cardinality 10},
    :full_map
    {:data-type "string",
     :distinct 29,
     :group-by? true,
     :commons
     {"{:file-path \"./flows/a-random-wow.edn\", :icon \"zmdi-pizza\", :description \"A random Owen Wilson quote from the Wedding Crashers movie.\"}"
      1,
      "{:description \"Clojure greater-than-or-equal function.\", :fn >, :inputs [:value1 :value2], :icon \"zmdi-chevron-right\", :types {:value1 [:integer :float], :value2 [:integer :float], :out :boolean}}"
      1,
      "{:description \"Clojure subtract function.\", :fn =, :inputs [:value1 :value2], :icon \"zmdi-swap\", :types {:value1 :any, :value2 :any, :out :boolean}}"
      1},
     :cardinality 100},
    :icon
    {:data-type "string",
     :distinct 18,
     :group-by? true,
     :commons {"zmdi-pizza" 4, "zmdi-file-text" 3, "zmdi-dns" 2},
     :cardinality 62}},
   :rowcount 29},
  :flow-fn-categories-sys
  {:fields
   {:category
    {:data-type "string",
     :distinct 3,
     :group-by? true,
     :commons {":rabbit-base" 1, ":owen-wilson" 1, ":clojure-base" 1},
     :cardinality 100}},
   :rowcount 3},
  :connections-sys
  {:fields
   {:database_name
    {:data-type "string",
     :distinct 3,
     :group-by? true,
     :commons {"*cache-db*" 5, "SQLite" 4, "*csv-import-db*" 1},
     :cardinality 30},
    :connection_id
    {:data-type "string",
     :distinct 10,
     :group-by? true,
     :commons {"imported" 1, "bigfoot-ufos" 1, "snifftmp1" 1},
     :cardinality 100}},
   :rowcount 10},
  :reco-counts {:fields {}, :rowcount 0},
  :kit-results-sys {:fields {}, :rowcount 0},
  :flow-fn-all-sys
  {:fields
   {:name
    {:data-type "string",
     :distinct 29,
     :group-by? true,
     :commons {":=" 1, ":>=" 1, ":write-file" 1},
     :cardinality 100}},
   :rowcount 29},
  :flow-parts-sys
  {:fields
   {:flow_id
    {:data-type "string",
     :distinct 53,
     :group-by? true,
     :commons {"clam-flow-851" 3, "map-pull-test2" 1, "callie-3" 1},
     :cardinality 96},
    :file_path
    {:data-type "string",
     :distinct 55,
     :group-by? true,
     :commons
     {"./flows/hey-rabbit-pathfinder.edn" 1,
      "./flows/dalle3-create-image-newengland-old.edn" 1,
      "./flows/hue-change-group-color.edn" 1},
     :cardinality 100},
    :last_modified
    {:data-type "string",
     :distinct 55,
     :group-by? true,
     :commons
     {"2023-12-31 20:10:21" 1,
      "2024-01-24 13:20:30" 1,
      "2024-01-06 18:53:33" 1},
     :cardinality 100}},
   :rowcount 55}},
 :default-col-widths
 {:flow-list* {:flows-sys 187},
  :flow-cat-list* {:flow-fn-categories-sys 111},
  :flow-fn-list* {:flow-fn-sys 100},
  :system-connections-list* {:connections-sys 111},
  :system-tables-list* {:tables-sys 137},
  :system-fields-list* {:fields-sys 170},
  :block-9683 {:flows-drag-13 137},
  :block-4768 {:flow-functions-drag-1 109}},
 :data-hash 1711798662,
 :tabs ["strategic grill locations" "gray beaver"],
 :sub-flow-incoming
 {:flow-id "dalle3-create-image",
  :file-path "./flows/dalle3-create-image.edn",
  :map
  {:open-fn-13
   {:y 1824.6140314275567,
    :fn (fn [x] x),
    :w 200,
    :raw-fn
    (fn [hex-colors]
      (vec
        (let [hex-to-rgb (fn [hex]
                           (map
                             (fn [idx]
                               (Integer/parseInt
                                 (subs hex idx (+ idx 2))
                                 16))
                             [1 3 5]))
              brightness (fn [rgb]
                           (let [[r g b] rgb]
                             (+ (* 0.299 r) (* 0.587 g) (* 0.114 b))))]
          (sort-by (comp brightness hex-to-rgb) hex-colors)))),
    :right-click? true,
    :icon "zmdi-functions",
    :z 0,
    :ports
    {:in {:value :any},
     :out
     {:idx7 :string,
      :idx5 :string,
      :* :vector,
      :idx2 :string,
      :idx4 :string,
      :idx1 :string,
      :idx6 :string,
      :idx3 :string,
      :idx8 :string,
      :idx0 :string}},
    :h 100,
    :x 4508.6715997869305,
    :data
    {:flow-item
     {:description "Write you own Clojure function! Godspeed!",
      :category ":rabbit-base",
      :fn (fn [x] x),
      :name ":open-fn",
      :raw-fn (fn [x] x),
      :type :open-fn,
      :icon "zmdi-functions",
      :types {:value :any, :out :any},
      :input_types "[:any]",
      :inputs "[:value]",
      :output_types ":any",
      :expandable? true,
      :full_map
      "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
     :name "drag-from-",
     :w 5,
     :source-panel :flow-fn-list*,
     :h 6,
     :connection-id nil,
     :view-output? false,
     :queries
     {:name-drag-25
      {:select
       [:name
        :full_map
        :description
        :inputs
        :icon
        :input_types
        :output_types
        :category],
       :from [[:query/flow-fn-sys :ii11]],
       :where [:= :name ":open-fn"]}},
     :drag-meta
     {:data-type "string",
      :source-query :flow-fn-sys,
      :param-full ":open-fn",
      :param-field :name,
      :source-panel-key :flow-fn-list*,
      :type :open-fn,
      :param-table :flow-fn-sys,
      :source-table :query/flow-fn-sys,
      :connection-id nil,
      :target :name,
      :row-num 5}}},
   :second-lightest
   {:y 1972.8225287543403,
    :fn (fn [x] x),
    :w 200,
    :raw-fn (fn [x] (last (drop-last x))),
    :right-click? true,
    :icon "zmdi-functions",
    :z 0,
    :ports {:in {:value :any}, :out {:out :any}},
    :h 100,
    :x 5305.513375289351,
    :data
    {:flow-item
     {:description "Write you own Clojure function! Godspeed!",
      :category ":rabbit-base",
      :fn (fn [x] x),
      :name ":open-fn",
      :raw-fn (fn [x] x),
      :type :open-fn,
      :icon "zmdi-functions",
      :types {:value :any, :out :any},
      :input_types "[:any]",
      :inputs "[:value]",
      :output_types ":any",
      :expandable? true,
      :full_map
      "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
     :name "drag-from-",
     :w 5,
     :source-panel :flow-fn-list*,
     :h 6,
     :connection-id nil,
     :view-output? true,
     :queries
     {:name-drag-25
      {:select
       [:name
        :full_map
        :description
        :inputs
        :icon
        :input_types
        :output_types
        :category],
       :from [[:query/flow-fn-sys :ii11]],
       :where [:= :name ":open-fn"]}},
     :drag-meta
     {:data-type "string",
      :source-query :flow-fn-sys,
      :param-full ":open-fn",
      :param-field :name,
      :source-panel-key :flow-fn-list*,
      :type :open-fn,
      :param-table :flow-fn-sys,
      :source-table :query/flow-fn-sys,
      :connection-id nil,
      :target :name,
      :row-num 5}}},
   :open-fn-8
   {:y 1289.3273225170874,
    :fn (fn [x] x),
    :w 200,
    :raw-fn
    (fn [x y]
      (str
        (clojure.string/replace
          x
          "/home/ryanr/viz-yard/resources/public/"
          "url(")
        ")")),
    :right-click? true,
    :icon "zmdi-functions",
    :z 0,
    :ports {:in {:value :any, :value-1 :any}, :out {:out :any}},
    :h 100,
    :x 4066.4052582891677,
    :data
    {:flow-item
     {:description "Write you own Clojure function! Godspeed!",
      :category ":rabbit-base",
      :fn (fn [x] x),
      :name ":open-fn",
      :raw-fn (fn [x] x),
      :type :open-fn,
      :icon "zmdi-functions",
      :types {:value :any, :out :any},
      :input_types "[:any]",
      :inputs "[:value]",
      :output_types ":any",
      :expandable? true,
      :full_map
      "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
     :name "drag-from-",
     :w 5,
     :source-panel :flow-fn-list*,
     :h 6,
     :connection-id nil,
     :view-output? false,
     :queries
     {:name-drag-25
      {:select
       [:name
        :full_map
        :description
        :inputs
        :icon
        :input_types
        :output_types
        :category],
       :from [[:query/flow-fn-sys :ii11]],
       :where [:= :name ":open-fn"]}},
     :drag-meta
     {:data-type "string",
      :source-query :flow-fn-sys,
      :param-full ":open-fn",
      :param-field :name,
      :source-panel-key :flow-fn-list*,
      :type :open-fn,
      :param-table :flow-fn-sys,
      :source-table :query/flow-fn-sys,
      :connection-id nil,
      :target :name,
      :row-num 5}}},
   :alert!-2
   {:w 200,
    :h 100,
    :x 5313.887965339137,
    :y 1188.6692051877603,
    :z 0,
    :data
    {:flow-item
     {:description
      "Send a pop-up notification to a client (or :all clients)",
      :category ":rabbit-base",
      :fn
      (fn [destination content w h duration]
        (rvbbit-backend.websockets/alert!
          destination
          content
          w
          h
          duration)),
      :name ":alert!",
      :icon "zmdi-alert-polygon",
      :defaults
      {:destination :client-name,
       :content "Alert!",
       :w 10,
       :h 1,
       :duration 6},
      :types
      {:destination :keyword,
       :content :any,
       :out :any,
       :w :integer,
       :h :integer,
       :duration :integer},
      :input_types "[:keyword :any :integer :integer :integer]",
      :style {:color "#FDFD96"},
      :selected-style {:color "#FDFD96"},
      :inputs "[:destination :content :w :h :duration]",
      :output_types ":any",
      :full_map
      "{:description \"Send a pop-up notification to a client (or :all clients)\", :fn (fn [destination content w h duration] (rvbbit-backend.websockets/alert! destination content w h duration)), :inputs [:destination :content :w :h :duration], :icon \"zmdi-alert-polygon\", :style {:color \"#FDFD96\"}, :selected-style {:color \"#FDFD96\"}, :defaults {:destination :client-name, :content \"Alert!\", :w 10, :h 1, :duration 6}, :types {:destination :keyword, :content :any, :out :any, :w :integer, :h :integer, :duration :integer}}"},
     :name "drag-from-",
     :w 5,
     :source-panel :flow-fn-list*,
     :root [1154 188],
     :h 6,
     :connection-id nil,
     :queries
     {:name-drag-34
      {:select
       [:name
        :full_map
        :description
        :inputs
        :icon
        :input_types
        :output_types
        :category],
       :from [[:query/flow-fn-sys :qq253]],
       :where [:= :name ":alert!"]}},
     :drag-meta
     {:data-type "string",
      :source-query :flow-fn-sys,
      :param-full ":alert!",
      :param-field :name,
      :source-panel-key :flow-fn-list*,
      :type :where,
      :param-table :flow-fn-sys,
      :source-table :query/flow-fn-sys,
      :connection-id nil,
      :target :name,
      :row-num 0}},
    :icon "zmdi-alert-polygon",
    :ports
    {:in
     {:destination :keyword,
      :content :any,
      :w :integer,
      :h :integer,
      :duration :integer},
     :out {:out :any}}},
   :open-fn-7
   {:y 1558.8995291537408,
    :fn (fn [x] x),
    :w 200,
    :raw-fn (fn [x y] (str "convert " x " " y)),
    :right-click? true,
    :icon "zmdi-functions",
    :z 0,
    :ports {:in {:value :any, :value-1 :any}, :out {:out :any}},
    :h 100,
    :x 3365.9914373132146,
    :data
    {:flow-item
     {:description "Write you own Clojure function! Godspeed!",
      :category ":rabbit-base",
      :fn (fn [x] x),
      :name ":open-fn",
      :raw-fn (fn [x] x),
      :type :open-fn,
      :icon "zmdi-functions",
      :types {:value :any, :out :any},
      :input_types "[:any]",
      :inputs "[:value]",
      :output_types ":any",
      :expandable? true,
      :full_map
      "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
     :name "drag-from-",
     :w 5,
     :source-panel :flow-fn-list*,
     :h 6,
     :connection-id nil,
     :view-output? true,
     :queries
     {:name-drag-25
      {:select
       [:name
        :full_map
        :description
        :inputs
        :icon
        :input_types
        :output_types
        :category],
       :from [[:query/flow-fn-sys :ii11]],
       :where [:= :name ":open-fn"]}},
     :drag-meta
     {:data-type "string",
      :source-query :flow-fn-sys,
      :param-full ":open-fn",
      :param-field :name,
      :source-panel-key :flow-fn-list*,
      :type :open-fn,
      :param-table :flow-fn-sys,
      :source-table :query/flow-fn-sys,
      :connection-id nil,
      :target :name,
      :row-num 5}}},
   :shell-command-1
   {:w 200,
    :h 100,
    :x 3657.4198481531157,
    :y 1353.6626850116338,
    :z 0,
    :data
    {:flow-item
     {:description
      "Execute shell command. WARNING: only use if you know what you're doing / have controlled inputs",
      :category ":rabbit-base",
      :fn
      (fn [command]
        (rvbbit-backend.websockets/run-shell-command command)),
      :name ":shell-command",
      :icon "zmdi-washing-machine",
      :defaults {:command "ls -la"},
      :types {:command :string, :out :any},
      :input_types "[:string]",
      :style {:color "#ffdd3c"},
      :selected-style {:color "#ffdd3c"},
      :inputs "[:command]",
      :output_types ":any",
      :full_map
      "{:description \"Execute shell command. WARNING: only use if you know what you're doing / have controlled inputs\", :fn (fn [command] (rvbbit-backend.websockets/run-shell-command command)), :icon \"zmdi-washing-machine\", :defaults {:command \"ls -la\"}, :types {:command :string, :out :any}, :style {:color \"#ffdd3c\"}, :selected-style {:color \"#ffdd3c\"}, :inputs [:command], :required [:command]}",
      :required [:command]},
     :name "drag-from-",
     :w 5,
     :source-panel :flow-fn-list*,
     :root [890 244],
     :h 6,
     :connection-id nil,
     :view-output? true,
     :queries
     {:name-drag-37
      {:select
       [:name
        :full_map
        :description
        :inputs
        :icon
        :input_types
        :output_types
        :category],
       :from [[:query/flow-fn-sys :vv683]],
       :where [:= :name ":shell-command"]}},
     :drag-meta
     {:data-type "string",
      :source-query :flow-fn-sys,
      :param-full ":shell-command",
      :param-field :name,
      :source-panel-key :flow-fn-list*,
      :type :where,
      :param-table :flow-fn-sys,
      :source-table :query/flow-fn-sys,
      :connection-id nil,
      :target :name,
      :row-num 7}},
    :icon "zmdi-washing-machine",
    :ports
    {:in {:command :string},
     :out
     {:output :vector,
      :exception :vector,
      :seconds :vector,
      :command :string,
      :* :map}}},
   :lightest1
   {:y 1798.000480143229,
    :fn (fn [x] x),
    :w 200,
    :raw-fn (fn [x] (last x)),
    :right-click? true,
    :icon "zmdi-functions",
    :z 0,
    :ports {:in {:value :any}, :out {:out :any}},
    :h 100,
    :x 5290.254224537037,
    :data
    {:flow-item
     {:description "Write you own Clojure function! Godspeed!",
      :category ":rabbit-base",
      :fn (fn [x] x),
      :name ":open-fn",
      :raw-fn (fn [x] x),
      :type :open-fn,
      :icon "zmdi-functions",
      :types {:value :any, :out :any},
      :input_types "[:any]",
      :inputs "[:value]",
      :output_types ":any",
      :expandable? true,
      :full_map
      "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
     :name "drag-from-",
     :w 5,
     :source-panel :flow-fn-list*,
     :h 6,
     :connection-id nil,
     :view-output? true,
     :queries
     {:name-drag-25
      {:select
       [:name
        :full_map
        :description
        :inputs
        :icon
        :input_types
        :output_types
        :category],
       :from [[:query/flow-fn-sys :ii11]],
       :where [:= :name ":open-fn"]}},
     :drag-meta
     {:data-type "string",
      :source-query :flow-fn-sys,
      :param-full ":open-fn",
      :param-field :name,
      :source-panel-key :flow-fn-list*,
      :type :open-fn,
      :param-table :flow-fn-sys,
      :source-table :query/flow-fn-sys,
      :connection-id nil,
      :target :name,
      :row-num 5}}},
   :gradient1
   {:y 1779.8277822989005,
    :fn (fn [x] x),
    :w 200,
    :raw-fn
    (fn [x y] (vec (rvbbit-backend.util/generate-gradient x y 8))),
    :right-click? true,
    :icon "zmdi-functions",
    :z 0,
    :ports
    {:in {:value :any, :value-1 :any},
     :out
     {:idx7 :string,
      :idx5 :string,
      :* :vector,
      :idx2 :string,
      :idx4 :string,
      :idx1 :string,
      :idx6 :string,
      :idx3 :string,
      :idx0 :string}},
    :h 100,
    :x 5737.372641782406,
    :data
    {:flow-item
     {:description "Write you own Clojure function! Godspeed!",
      :category ":rabbit-base",
      :fn (fn [x] x),
      :name ":open-fn",
      :raw-fn (fn [x] x),
      :type :open-fn,
      :icon "zmdi-functions",
      :types {:value :any, :out :any},
      :input_types "[:any]",
      :inputs "[:value]",
      :output_types ":any",
      :expandable? true,
      :full_map
      "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
     :name "drag-from-",
     :w 5,
     :source-panel :flow-fn-list*,
     :h 6,
     :connection-id nil,
     :view-output? true,
     :queries
     {:name-drag-25
      {:select
       [:name
        :full_map
        :description
        :inputs
        :icon
        :input_types
        :output_types
        :category],
       :from [[:query/flow-fn-sys :ii11]],
       :where [:= :name ":open-fn"]}},
     :drag-meta
     {:data-type "string",
      :source-query :flow-fn-sys,
      :param-full ":open-fn",
      :param-field :name,
      :source-panel-key :flow-fn-list*,
      :type :open-fn,
      :param-table :flow-fn-sys,
      :source-table :query/flow-fn-sys,
      :connection-id nil,
      :target :name,
      :row-num 5}}},
   :open-fn-1
   {:y 1416.240407986111,
    :fn (fn [x] x),
    :w 200,
    :raw-fn (fn [x] x),
    :right-click? true,
    :icon "zmdi-functions",
    :z 0,
    :ports
    {:in {:value :any},
     :out
     {:headers :map,
      :method :keyword,
      :url :string,
      :body :map,
      :* :map}},
    :h 100,
    :x 1314.2310474537035,
    :data
    {:flow-item
     {:description "Write you own Clojure function! Godspeed!",
      :category ":rabbit-base",
      :fn (fn [x] x),
      :name ":open-fn",
      :raw-fn (fn [x] x),
      :type :open-fn,
      :icon "zmdi-functions",
      :types {:value :any, :out :any},
      :input_types "[:any]",
      :inputs "[:value]",
      :output_types ":any",
      :expandable? true,
      :full_map
      "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
     :name "drag-from-",
     :w 5,
     :source-panel :flow-fn-list*,
     :h 6,
     :connection-id nil,
     :view-output? true,
     :queries
     {:name-drag-25
      {:select
       [:name
        :full_map
        :description
        :inputs
        :icon
        :input_types
        :output_types
        :category],
       :from [[:query/flow-fn-sys :ii11]],
       :where [:= :name ":open-fn"]}},
     :drag-meta
     {:data-type "string",
      :source-query :flow-fn-sys,
      :param-full ":open-fn",
      :param-field :name,
      :source-panel-key :flow-fn-list*,
      :type :open-fn,
      :param-table :flow-fn-sys,
      :source-table :query/flow-fn-sys,
      :connection-id nil,
      :target :name,
      :row-num 5}}},
   :open-fn-2
   {:y 1472.904453412224,
    :fn (fn [x] x),
    :w 200,
    :raw-fn (fn [x] x),
    :right-click? true,
    :icon "zmdi-functions",
    :z 0,
    :ports {:in {:value :any}, :out {:idx0 :map, :* :vector}},
    :h 100,
    :x 1850.385489430147,
    :data
    {:flow-item
     {:description "Write you own Clojure function! Godspeed!",
      :category ":rabbit-base",
      :fn (fn [x] x),
      :name ":open-fn",
      :raw-fn (fn [x] x),
      :type :open-fn,
      :icon "zmdi-functions",
      :types {:value :any, :out :any},
      :input_types "[:any]",
      :inputs "[:value]",
      :output_types ":any",
      :expandable? true,
      :full_map
      "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
     :name "drag-from-",
     :w 5,
     :source-panel :flow-fn-list*,
     :h 6,
     :connection-id nil,
     :view-output? true,
     :queries
     {:name-drag-25
      {:select
       [:name
        :full_map
        :description
        :inputs
        :icon
        :input_types
        :output_types
        :category],
       :from [[:query/flow-fn-sys :ii11]],
       :where [:= :name ":open-fn"]}},
     :drag-meta
     {:data-type "string",
      :source-query :flow-fn-sys,
      :param-full ":open-fn",
      :param-field :name,
      :source-panel-key :flow-fn-list*,
      :type :open-fn,
      :param-table :flow-fn-sys,
      :source-table :query/flow-fn-sys,
      :connection-id nil,
      :target :name,
      :row-num 5}}},
   :darkest1
   {:y 1499.4197961877892,
    :fn (fn [x] x),
    :w 200,
    :raw-fn (fn [x] (first x)),
    :right-click? true,
    :icon "zmdi-functions",
    :z 0,
    :ports {:in {:value :any}, :out {:out :any}},
    :h 100,
    :x 5274.040574363425,
    :data
    {:flow-item
     {:description "Write you own Clojure function! Godspeed!",
      :category ":rabbit-base",
      :fn (fn [x] x),
      :name ":open-fn",
      :raw-fn (fn [x] x),
      :type :open-fn,
      :icon "zmdi-functions",
      :types {:value :any, :out :any},
      :input_types "[:any]",
      :inputs "[:value]",
      :output_types ":any",
      :expandable? true,
      :full_map
      "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
     :name "drag-from-",
     :w 5,
     :source-panel :flow-fn-list*,
     :h 6,
     :connection-id nil,
     :view-output? true,
     :queries
     {:name-drag-25
      {:select
       [:name
        :full_map
        :description
        :inputs
        :icon
        :input_types
        :output_types
        :category],
       :from [[:query/flow-fn-sys :ii11]],
       :where [:= :name ":open-fn"]}},
     :drag-meta
     {:data-type "string",
      :source-query :flow-fn-sys,
      :param-full ":open-fn",
      :param-field :name,
      :source-panel-key :flow-fn-list*,
      :type :open-fn,
      :param-table :flow-fn-sys,
      :source-table :query/flow-fn-sys,
      :connection-id nil,
      :target :name,
      :row-num 5}}},
   :open-input-1
   {:w 200,
    :h 100,
    :data
    {:drag-meta {:type :open-block},
     :flow-item {:expandable? true},
     :user-input "vivid"},
    :z 0,
    :ports {:out {:out :string}},
    :x -113.35663248697915,
    :y 1226.1349690755208},
   :open-input-3
   {:w 200,
    :h 100,
    :data
    {:drag-meta {:type :open-block},
     :flow-item {:expandable? true},
     :user-input {:width 13, :height 8, :duration 9}},
    :z 0,
    :ports
    {:out
     {:width :integer, :height :integer, :duration :integer, :* :map}},
    :x 4554.520222267909,
    :y 1374.7628150627627},
   :alert!-1
   {:w 240,
    :h 100,
    :x 5282.577773321242,
    :y 1355.4901399717228,
    :z 0,
    :data
    {:flow-item
     {:description
      "Send a pop-up notification to a client (or :all clients)",
      :category ":rabbit-base",
      :fn
      (fn [destination content w h duration]
        (rvbbit-backend.websockets/alert!
          destination
          content
          w
          h
          duration)),
      :name ":alert!",
      :icon "zmdi-alert-polygon",
      :defaults
      {:destination :client-name,
       :content "Alert!",
       :w 10,
       :h 1,
       :duration 6},
      :types
      {:destination :keyword,
       :content :any,
       :out :any,
       :w :integer,
       :h :integer,
       :duration :integer},
      :input_types "[:keyword :any :integer :integer :integer]",
      :style {:color "#FDFD96"},
      :selected-style {:color "#FDFD96"},
      :inputs "[:destination :content :w :h :duration]",
      :output_types ":any",
      :full_map
      "{:description \"Send a pop-up notification to a client (or :all clients)\", :fn (fn [destination content w h duration] (rvbbit-backend.websockets/alert! destination content w h duration)), :inputs [:destination :content :w :h :duration], :icon \"zmdi-alert-polygon\", :style {:color \"#FDFD96\"}, :selected-style {:color \"#FDFD96\"}, :defaults {:destination :client-name, :content \"Alert!\", :w 10, :h 1, :duration 6}, :types {:destination :keyword, :content :any, :out :any, :w :integer, :h :integer, :duration :integer}}"},
     :name "drag-from-",
     :w 5,
     :source-panel :flow-fn-list*,
     :root [676 74],
     :h 6,
     :connection-id nil,
     :view-output? true,
     :queries
     {:name-drag-17
      {:select
       [:name
        :full_map
        :description
        :inputs
        :icon
        :input_types
        :output_types
        :category],
       :from [[:query/flow-fn-sys :yy463]],
       :where [:= :name ":alert!"]}},
     :drag-meta
     {:data-type "string",
      :source-query :flow-fn-sys,
      :param-full ":alert!",
      :param-field :name,
      :source-panel-key :flow-fn-list*,
      :type :where,
      :param-table :flow-fn-sys,
      :source-table :query/flow-fn-sys,
      :connection-id nil,
      :target :name,
      :row-num 0}},
    :icon "zmdi-alert-polygon",
    :ports
    {:in
     {:destination :keyword,
      :content :any,
      :w :integer,
      :h :integer,
      :duration :integer},
     :out {:out :any}}},
   :make-data-colors
   {:y 1837.9007893880205,
    :fn (fn [x] x),
    :w 200,
    :raw-fn
    (fn [x y]
      (zipmap
        ["float"
         "boolean"
         "map"
         "list"
         "string"
         "vector"
         "keyword"
         "rabbit-code"
         "datetime"
         "integer"
         "unknown"
         "date"
         "nil"]
        (shuffle (into y x)))),
    :right-click? true,
    :icon "zmdi-functions",
    :z 0,
    :ports
    {:in {:value :any, :value-1 :any},
     :out
     {"float" :string,
      "boolean" :string,
      "map" :string,
      "list" :string,
      :* :map,
      "string" :string,
      "vector" :string,
      "keyword" :string,
      "rabbit-code" :string,
      "datetime" :string,
      "integer" :string,
      "unknown" :string,
      "date" :string,
      "nil" :string}},
    :h 100,
    :x 6211.317592592592,
    :data
    {:flow-item
     {:description "Write you own Clojure function! Godspeed!",
      :category ":rabbit-base",
      :fn (fn [x] x),
      :name ":open-fn",
      :raw-fn (fn [x] x),
      :type :open-fn,
      :icon "zmdi-functions",
      :types {:value :any, :out :any},
      :input_types "[:any]",
      :inputs "[:value]",
      :output_types ":any",
      :expandable? true,
      :full_map
      "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
     :name "drag-from-",
     :w 5,
     :source-panel :flow-fn-list*,
     :h 6,
     :connection-id nil,
     :queries
     {:name-drag-25
      {:select
       [:name
        :full_map
        :description
        :inputs
        :icon
        :input_types
        :output_types
        :category],
       :from [[:query/flow-fn-sys :ii11]],
       :where [:= :name ":open-fn"]}},
     :drag-meta
     {:data-type "string",
      :source-query :flow-fn-sys,
      :param-full ":open-fn",
      :param-field :name,
      :source-panel-key :flow-fn-list*,
      :type :open-fn,
      :param-table :flow-fn-sys,
      :source-table :query/flow-fn-sys,
      :connection-id nil,
      :target :name,
      :row-num 5}}},
   :in-prompt
   {:w 200,
    :h 100,
    :data
    {:drag-meta {:type :open-block},
     :flow-item {:expandable? true},
     :user-input
     "A high-definition, hyperreal, vivid 16:9 image of a New England scene in America, just before dawn during a heavy snowstorm, blending traditional and cyberpunk elements. The scene has a slightly gritty atmosphere, with the town covered in snow and buildings emitting soft pink and neon light blue glows. On the left side of the frame, a young and beautiful Irish-looking woman, clearly in her late 20s, with pouty full lips (with the bottom lip being prominent) and a slightly upturned nose, poses with a pleased expression yet mischievious on her large mouth. Her long hair is slightly wet, with snow collecting on it and her face, emphasizing the heavy snowfall. She has intricate Celtic-style tattoos of rabbits and wilderness on her neck, collarbone, and shoulders. The pre-dawn light adds a serene yet mysterious feel to the scene, underscoring the fusion of the natural world and technological influence.",
     :width 750},
    :z 0,
    :ports {:out {:out :string}},
    :x 727.2187565983952,
    :y 1028.1476308461783},
   :open-fn-6
   {:y 1360.8546035354202,
    :fn (fn [x] x),
    :w 200,
    :raw-fn
    (fn [x]
      (clojure.string/replace
        (clojure.string/replace x ".webp" ".png")
        "/home/ryanr/rvbbit-out"
        "/home/ryanr/viz-yard/resources/public/images/gen")),
    :right-click? true,
    :icon "zmdi-functions",
    :z 0,
    :ports {:in {:value :any}, :out {:out :any}},
    :h 100,
    :x 3182.757763012036,
    :data
    {:flow-item
     {:description "Write you own Clojure function! Godspeed!",
      :category ":rabbit-base",
      :fn (fn [x] x),
      :name ":open-fn",
      :raw-fn (fn [x] x),
      :type :open-fn,
      :icon "zmdi-functions",
      :types {:value :any, :out :any},
      :input_types "[:any]",
      :inputs "[:value]",
      :output_types ":any",
      :expandable? true,
      :full_map
      "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
     :name "drag-from-",
     :w 5,
     :source-panel :flow-fn-list*,
     :h 6,
     :connection-id nil,
     :view-output? true,
     :queries
     {:name-drag-25
      {:select
       [:name
        :full_map
        :description
        :inputs
        :icon
        :input_types
        :output_types
        :category],
       :from [[:query/flow-fn-sys :ii11]],
       :where [:= :name ":open-fn"]}},
     :drag-meta
     {:data-type "string",
      :source-query :flow-fn-sys,
      :param-full ":open-fn",
      :param-field :name,
      :source-panel-key :flow-fn-list*,
      :type :open-fn,
      :param-table :flow-fn-sys,
      :source-table :query/flow-fn-sys,
      :connection-id nil,
      :target :name,
      :row-num 5}}},
   :ssecond-darkest
   {:y 1644.5442626953125,
    :fn (fn [x] x),
    :w 200,
    :raw-fn (fn [x] (second x)),
    :right-click? true,
    :icon "zmdi-functions",
    :z 0,
    :ports {:in {:value :any}, :out {:out :any}},
    :h 100,
    :x 5294.654181134259,
    :data
    {:flow-item
     {:description "Write you own Clojure function! Godspeed!",
      :category ":rabbit-base",
      :fn (fn [x] x),
      :name ":open-fn",
      :raw-fn (fn [x] x),
      :type :open-fn,
      :icon "zmdi-functions",
      :types {:value :any, :out :any},
      :input_types "[:any]",
      :inputs "[:value]",
      :output_types ":any",
      :expandable? true,
      :full_map
      "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
     :name "drag-from-",
     :w 5,
     :source-panel :flow-fn-list*,
     :h 6,
     :connection-id nil,
     :queries
     {:name-drag-25
      {:select
       [:name
        :full_map
        :description
        :inputs
        :icon
        :input_types
        :output_types
        :category],
       :from [[:query/flow-fn-sys :ii11]],
       :where [:= :name ":open-fn"]}},
     :drag-meta
     {:data-type "string",
      :source-query :flow-fn-sys,
      :param-full ":open-fn",
      :param-field :name,
      :source-panel-key :flow-fn-list*,
      :type :open-fn,
      :param-table :flow-fn-sys,
      :source-table :query/flow-fn-sys,
      :connection-id nil,
      :target :name,
      :row-num 5}}},
   :node-color-thief-js
   {:y 1781.755455824908,
    :sub-flow
    {:flow-id "node-color-thief-js",
     :file-path "./flows/node-color-thief-js.edn",
     :map
     {:image-path
      {:w 200,
       :h 100,
       :data
       {:drag-meta {:type :open-block},
        :flow-item {:expandable? true},
        :user-input
        " /home/ryanr/viz-yard/resources/public/images/shannon45.png"},
       :z 0,
       :ports {:out {:out :string}},
       :x 948.9116738809121,
       :y 1074.148015202703},
      :shell-command-1
      {:w 200,
       :h 100,
       :x 1758.4411167689732,
       :y 1117.7292503720237,
       :z 0,
       :data
       {:flow-item
        {:description
         "Execute shell command. WARNING: only use if you know what you're doing / have controlled inputs",
         :category ":rabbit-base",
         :fn
         (fn [command]
           (rvbbit-backend.websockets/run-shell-command command)),
         :name ":shell-command",
         :icon "zmdi-washing-machine",
         :defaults {:command "ls -la"},
         :types {:command :string, :out :any},
         :input_types "[:string]",
         :style {:color "#ffdd3c"},
         :selected-style {:color "#ffdd3c"},
         :inputs "[:command]",
         :output_types ":any",
         :full_map
         "{:description \"Execute shell command. WARNING: only use if you know what you're doing / have controlled inputs\", :fn (fn [command] (rvbbit-backend.websockets/run-shell-command command)), :icon \"zmdi-washing-machine\", :defaults {:command \"ls -la\"}, :types {:command :string, :out :any}, :style {:color \"#ffdd3c\"}, :selected-style {:color \"#ffdd3c\"}, :inputs [:command], :required [:command]}",
         :required [:command]},
        :name "drag-from-",
        :w 5,
        :source-panel :flow-fn-list*,
        :root [539.1770935058594 176.171875],
        :h 6,
        :connection-id nil,
        :queries
        {:name-drag-42
         {:select
          [:name
           :full_map
           :description
           :inputs
           :icon
           :input_types
           :output_types
           :category],
          :from [[:query/flow-fn-sys :cc59]],
          :where [:= :name ":shell-command"]}},
        :drag-meta
        {:data-type "string",
         :source-query :flow-fn-sys,
         :param-full ":shell-command",
         :param-field :name,
         :source-panel-key :flow-fn-list*,
         :type :where,
         :param-table :flow-fn-sys,
         :source-table :query/flow-fn-sys,
         :connection-id nil,
         :target :name,
         :row-num 6}},
       :icon "zmdi-washing-machine",
       :ports
       {:in {:command :string},
        :out
        {:output :vector,
         :exception :vector,
         :seconds :vector,
         :command :string,
         :* :map}}},
      :clojure-string-join-1
      {:w 200,
       :h 100,
       :x 1348.4940418061756,
       :y 1136.4640299479165,
       :z 0,
       :data
       {:flow-item
        {:description "Clojure.string's join function.",
         :category ":clojure-base",
         :fn
         (fn [delimiter & args] (clojure.string/join delimiter args)),
         :name ":clojure-string-join",
         :icon "zmdi-group",
         :defaults {:delimiter " "},
         :types {:delimiter :string, :out :string},
         :input_types "[:string]",
         :inputs "[:delimiter]",
         :output_types ":string",
         :expandable? true,
         :full_map
         "{:description \"Clojure.string's join function.\", :fn (fn [delimiter & args] (clojure.string/join delimiter args)), :inputs [:delimiter], :required [:delimiter], :defaults {:delimiter \" \"}, :expandable? true, :icon \"zmdi-group\", :types {:delimiter :string, :out :string}}",
         :required [:delimiter]},
        :name "drag-from-",
        :w 5,
        :source-panel :flow-fn-list*,
        :root [540.1770935058594 279.171875],
        :h 6,
        :connection-id nil,
        :queries
        {:name-drag-12
         {:select
          [:name
           :full_map
           :description
           :inputs
           :icon
           :input_types
           :output_types
           :category],
          :from [[:query/flow-fn-sys :ww526]],
          :where [:= :name ":clojure-string-join"]}},
        :drag-meta
        {:data-type "string",
         :source-query :flow-fn-sys,
         :param-full ":clojure-string-join",
         :param-field :name,
         :source-panel-key :flow-fn-list*,
         :type :where,
         :param-table :flow-fn-sys,
         :source-table :query/flow-fn-sys,
         :connection-id nil,
         :target :name,
         :row-num 15}},
       :icon "zmdi-group",
       :ports
       {:in {:delimiter :string, :value-1 :any, :value-2 :any},
        :out {:out :string}}},
      :shell-command-in
      {:w 200,
       :h 100,
       :data
       {:drag-meta {:type :open-block},
        :flow-item {:expandable? true},
        :user-input
        "cd /home/ryanr/color-thief-project ; node ./colorThief.js"},
       :z 0,
       :ports {:out {:out :string}},
       :x 960.0851863779922,
       :y 1224.4579849567817},
      :join-output-as-string
      {:y 1158.848120777027,
       :fn (fn [x] x),
       :w 200,
       :raw-fn (fn [x] (clojure.string/join " " x)),
       :right-click? true,
       :icon "zmdi-functions",
       :z 0,
       :ports {:in {:value :any}, :out {:out :any}},
       :h 100,
       :x 2212.3248878272807,
       :data
       {:flow-item
        {:description "Write you own Clojure function! Godspeed!",
         :category ":rabbit-base",
         :fn (fn [x] x),
         :name ":open-fn",
         :raw-fn (fn [x] x),
         :type :open-fn,
         :icon "zmdi-functions",
         :types {:value :any, :out :any},
         :input_types "[:any]",
         :inputs "[:value]",
         :output_types ":any",
         :expandable? true,
         :full_map
         "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
        :name "drag-from-",
        :w 5,
        :source-panel :flow-fn-list*,
        :h 6,
        :connection-id nil,
        :queries
        {:name-drag-25
         {:select
          [:name
           :full_map
           :description
           :inputs
           :icon
           :input_types
           :output_types
           :category],
          :from [[:query/flow-fn-sys :ii11]],
          :where [:= :name ":open-fn"]}},
        :drag-meta
        {:data-type "string",
         :source-query :flow-fn-sys,
         :param-full ":open-fn",
         :param-field :name,
         :source-panel-key :flow-fn-list*,
         :type :open-fn,
         :param-table :flow-fn-sys,
         :source-table :query/flow-fn-sys,
         :connection-id nil,
         :target :name,
         :row-num 5}}},
      :json-to-edn
      {:w 200,
       :h 100,
       :x 2685.7088668823244,
       :y 1151.33984375,
       :z 0,
       :data
       {:flow-item
        {:description "Convert a JSON string to Clojure EDN",
         :category ":rabbit-base",
         :fn
         (fn [json-string]
           (rvbbit-backend.util/json-to-edn json-string)),
         :name ":json-to-edn",
         :icon "zmdi-file-text",
         :types {:json-string :string, :out :any},
         :input_types "[:string]",
         :inputs "[:json-string]",
         :output_types ":any",
         :full_map
         "{:description \"Convert a JSON string to Clojure EDN\", :fn (fn [json-string] (rvbbit-backend.util/json-to-edn json-string)), :inputs [:json-string], :icon \"zmdi-file-text\", :types {:json-string :string, :out :any}}"},
        :name "drag-from-",
        :w 5,
        :source-panel :flow-fn-list*,
        :root [1297.1770935058594 207.171875],
        :h 6,
        :connection-id nil,
        :queries
        {:name-drag-41
         {:select
          [:name
           :full_map
           :description
           :inputs
           :icon
           :input_types
           :output_types
           :category],
          :from [[:query/flow-fn-sys :uu284]],
          :where [:= :name ":json-to-edn"]}},
        :drag-meta
        {:data-type "string",
         :source-query :flow-fn-sys,
         :param-full ":json-to-edn",
         :param-field :name,
         :source-panel-key :flow-fn-list*,
         :type :where,
         :param-table :flow-fn-sys,
         :source-table :query/flow-fn-sys,
         :connection-id nil,
         :target :name,
         :row-num 7}},
       :icon "zmdi-file-text",
       :ports
       {:in {:json-string :string},
        :out
        {:dominantColor :string, :colorPalette :vector, :* :map}}}},
     :connections
     [[:shell-command-in :clojure-string-join-1/value-1]
      [:image-path :clojure-string-join-1/value-2]
      [:clojure-string-join-1 :shell-command-1/command]
      [:shell-command-1/output :join-output-as-string/value]
      [:join-output-as-string :json-to-edn/json-string]
      [:json-to-edn :done]]},
    :flow-id "node-color-thief-js",
    :w 200,
    :icon "zmdi-puzzle-piece",
    :z 0,
    :ports
    {:in {:image-path :string, :shell-command-in :string},
     :out {:dominantColor :string, :colorPalette :vector, :* :map}},
    :h 100,
    :file-path "./flows/node-color-thief-js.edn",
    :x 3288.9801815257347,
    :data
    {:flow-item nil,
     :name "drag-from-",
     :w 5,
     :source-panel :flow-list*,
     :root [678.71875 344.6979217529297],
     :h 6,
     :connection-id nil,
     :view-output? false,
     :queries
     {:flow-id-drag-5
      {:select [:flow_id :file_path :last_modified],
       :from [[:query/flows-sys :cc208]],
       :where [:= :flow_id "node-color-thief-js"]}},
     :drag-meta
     {:data-type "string",
      :done-block :json-to-edn,
      :source-query :flows-sys,
      :param-full "node-color-thief-js",
      :param-field :flow_id,
      :source-panel-key :flow-list*,
      :type :sub-flow,
      :param-table :flows-sys,
      :source-table :query/flows-sys,
      :connection-id nil,
      :target :flow_id,
      :row-num 4}}},
   :open-fn-9
   {:y 1308.2844527633101,
    :fn (fn [x] x),
    :w 200,
    :raw-fn (fn [& x] "vivid"),
    :right-click? true,
    :icon "zmdi-functions",
    :z 0,
    :ports
    {:in {:value :any, :value-1 :any}, :out {:error :string, :* :map}},
    :h 100,
    :x 343.7386610243055,
    :data
    {:flow-item
     {:description "Write you own Clojure function! Godspeed!",
      :category ":rabbit-base",
      :fn (fn [x] x),
      :name ":open-fn",
      :raw-fn (fn [x] x),
      :type :open-fn,
      :icon "zmdi-functions",
      :types {:value :any, :out :any},
      :input_types "[:any]",
      :inputs "[:value]",
      :output_types ":any",
      :expandable? true,
      :full_map
      "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
     :name "drag-from-",
     :w 5,
     :source-panel :flow-fn-list*,
     :h 6,
     :connection-id nil,
     :view-output? false,
     :queries
     {:name-drag-25
      {:select
       [:name
        :full_map
        :description
        :inputs
        :icon
        :input_types
        :output_types
        :category],
       :from [[:query/flow-fn-sys :ii11]],
       :where [:= :name ":open-fn"]}},
     :drag-meta
     {:data-type "string",
      :source-query :flow-fn-sys,
      :param-full ":open-fn",
      :param-field :name,
      :source-panel-key :flow-fn-list*,
      :type :open-fn,
      :param-table :flow-fn-sys,
      :source-table :query/flow-fn-sys,
      :connection-id nil,
      :target :name,
      :row-num 5}}},
   :open-input
   {:w 200,
    :h 100,
    :data
    {:drag-meta {:type :open-block},
     :flow-item {:expandable? true},
     :user-input
     {:headers :value-2,
      :method :post,
      :url :value-3,
      :body
      {:prompt :value-0,
       :n 1,
       :size "1792x1024",
       :style :value-4,
       :response_format "b64_json",
       :model "dall-e-3",
       :quality :value-1}}},
    :z 0,
    :ports
    {:out
     {:headers :map,
      :method :keyword,
      :url :string,
      :body :map,
      :* :map},
     :in
     {:value-0 :any,
      :value-1 :any,
      :value-2 :any,
      :value-3 :any,
      :value-4 :any}},
    :x 1309.4404009650732,
    :y 1191.9339613970587},
   :dom-color1
   {:y 1627.0126651539522,
    :fn (fn [x] x),
    :w 200,
    :raw-fn (fn [x] x),
    :right-click? true,
    :icon "zmdi-functions",
    :z 0,
    :ports {:in {:value :any}, :out {:out :any}},
    :h 100,
    :x 4034.728400735294,
    :data
    {:flow-item
     {:description "Write you own Clojure function! Godspeed!",
      :category ":rabbit-base",
      :fn (fn [x] x),
      :name ":open-fn",
      :raw-fn (fn [x] x),
      :type :open-fn,
      :icon "zmdi-functions",
      :types {:value :any, :out :any},
      :input_types "[:any]",
      :inputs "[:value]",
      :output_types ":any",
      :expandable? true,
      :full_map
      "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
     :name "drag-from-",
     :w 5,
     :source-panel :flow-fn-list*,
     :h 6,
     :connection-id nil,
     :queries
     {:name-drag-25
      {:select
       [:name
        :full_map
        :description
        :inputs
        :icon
        :input_types
        :output_types
        :category],
       :from [[:query/flow-fn-sys :ii11]],
       :where [:= :name ":open-fn"]}},
     :drag-meta
     {:data-type "string",
      :source-query :flow-fn-sys,
      :param-full ":open-fn",
      :param-field :name,
      :source-panel-key :flow-fn-list*,
      :type :open-fn,
      :param-table :flow-fn-sys,
      :source-table :query/flow-fn-sys,
      :connection-id nil,
      :target :name,
      :row-num 5}}},
   :open-fn-11
   {:y 1794.0621538947612,
    :fn (fn [x] x),
    :w 200,
    :raw-fn (fn [x] x),
    :right-click? true,
    :icon "zmdi-functions",
    :z 0,
    :ports
    {:in {:value :any},
     :out
     {:idx7 :string,
      :idx5 :string,
      :* :vector,
      :idx2 :string,
      :idx4 :string,
      :idx1 :string,
      :idx6 :string,
      :idx3 :string,
      :idx8 :string,
      :idx0 :string}},
    :h 100,
    :x 4061.411247702206,
    :data
    {:flow-item
     {:description "Write you own Clojure function! Godspeed!",
      :category ":rabbit-base",
      :fn (fn [x] x),
      :name ":open-fn",
      :raw-fn (fn [x] x),
      :type :open-fn,
      :icon "zmdi-functions",
      :types {:value :any, :out :any},
      :input_types "[:any]",
      :inputs "[:value]",
      :output_types ":any",
      :expandable? true,
      :full_map
      "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
     :name "drag-from-",
     :w 5,
     :source-panel :flow-fn-list*,
     :h 6,
     :connection-id nil,
     :queries
     {:name-drag-25
      {:select
       [:name
        :full_map
        :description
        :inputs
        :icon
        :input_types
        :output_types
        :category],
       :from [[:query/flow-fn-sys :ii11]],
       :where [:= :name ":open-fn"]}},
     :drag-meta
     {:data-type "string",
      :source-query :flow-fn-sys,
      :param-full ":open-fn",
      :param-field :name,
      :source-panel-key :flow-fn-list*,
      :type :open-fn,
      :param-table :flow-fn-sys,
      :source-table :query/flow-fn-sys,
      :connection-id nil,
      :target :name,
      :row-num 5}}},
   :open-fn-3
   {:y 1343.2759061925549,
    :fn (fn [x] x),
    :w 200,
    :raw-fn (fn [x] x),
    :right-click? true,
    :icon "zmdi-functions",
    :z 0,
    :ports
    {:in {:value :any},
     :out {:revised_prompt :string, :b64_json :string, :* :map}},
    :h 100,
    :x 2270.161167279412,
    :data
    {:flow-item
     {:description "Write you own Clojure function! Godspeed!",
      :category ":rabbit-base",
      :fn (fn [x] x),
      :name ":open-fn",
      :raw-fn (fn [x] x),
      :type :open-fn,
      :icon "zmdi-functions",
      :types {:value :any, :out :any},
      :input_types "[:any]",
      :inputs "[:value]",
      :output_types ":any",
      :expandable? true,
      :full_map
      "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
     :name "drag-from-",
     :w 5,
     :source-panel :flow-fn-list*,
     :h 6,
     :connection-id nil,
     :view-output? false,
     :queries
     {:name-drag-25
      {:select
       [:name
        :full_map
        :description
        :inputs
        :icon
        :input_types
        :output_types
        :category],
       :from [[:query/flow-fn-sys :ii11]],
       :where [:= :name ":open-fn"]}},
     :drag-meta
     {:data-type "string",
      :source-query :flow-fn-sys,
      :param-full ":open-fn",
      :param-field :name,
      :source-panel-key :flow-fn-list*,
      :type :open-fn,
      :param-table :flow-fn-sys,
      :source-table :query/flow-fn-sys,
      :connection-id nil,
      :target :name,
      :row-num 5}}},
   :quality
   {:w 200,
    :h 100,
    :data
    {:drag-meta {:type :open-block},
     :flow-item {:expandable? true},
     :user-input "hd"},
    :z 0,
    :ports {:out {:out :string}},
    :x 734.1538809317127,
    :y 1194.2060836226851},
   :open-fn-4
   {:y 1246.006547277114,
    :fn (fn [x] x),
    :w 200,
    :raw-fn (fn [x] x),
    :right-click? true,
    :icon "zmdi-functions",
    :z 0,
    :ports {:in {:value :any}, :out {:out :any}},
    :h 100,
    :x 2784.174551930146,
    :data
    {:flow-item
     {:description "Write you own Clojure function! Godspeed!",
      :category ":rabbit-base",
      :fn (fn [x] x),
      :name ":open-fn",
      :raw-fn (fn [x] x),
      :type :open-fn,
      :icon "zmdi-functions",
      :types {:value :any, :out :any},
      :input_types "[:any]",
      :inputs "[:value]",
      :output_types ":any",
      :expandable? true,
      :full_map
      "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
     :name "drag-from-",
     :w 5,
     :source-panel :flow-fn-list*,
     :h 6,
     :connection-id nil,
     :view-output? false,
     :queries
     {:name-drag-25
      {:select
       [:name
        :full_map
        :description
        :inputs
        :icon
        :input_types
        :output_types
        :category],
       :from [[:query/flow-fn-sys :ii11]],
       :where [:= :name ":open-fn"]}},
     :drag-meta
     {:data-type "string",
      :source-query :flow-fn-sys,
      :param-full ":open-fn",
      :param-field :name,
      :source-panel-key :flow-fn-list*,
      :type :open-fn,
      :param-table :flow-fn-sys,
      :source-table :query/flow-fn-sys,
      :connection-id nil,
      :target :name,
      :row-num 5}}},
   :open-fn-12
   {:y 1624.2565088104782,
    :fn (fn [x] x),
    :w 200,
    :raw-fn
    (fn [x] [:v-box
             :children
             [[:play "/home/ryanr/coat.mp3"]
              [:img
               {:src
                (str
                  (clojure.string/replace
                    x
                    "/home/ryanr/viz-yard/resources/public/"
                    "")),
                :width "600px",
                :style {:border-radius "10px"}}]]]),
    :right-click? true,
    :icon "zmdi-functions",
    :z 0,
    :ports
    {:in {:value :any},
     :out {:idx0 :keyword, :idx1 :keyword, :idx2 :vector, :* :vector}},
    :h 100,
    :x 4505.923477619014,
    :data
    {:flow-item
     {:description "Write you own Clojure function! Godspeed!",
      :category ":rabbit-base",
      :fn (fn [x] x),
      :name ":open-fn",
      :raw-fn (fn [x] x),
      :type :open-fn,
      :icon "zmdi-functions",
      :types {:value :any, :out :any},
      :input_types "[:any]",
      :inputs "[:value]",
      :output_types ":any",
      :expandable? true,
      :full_map
      "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
     :name "drag-from-",
     :w 5,
     :source-panel :flow-fn-list*,
     :h 6,
     :connection-id nil,
     :view-output? false,
     :queries
     {:name-drag-25
      {:select
       [:name
        :full_map
        :description
        :inputs
        :icon
        :input_types
        :output_types
        :category],
       :from [[:query/flow-fn-sys :ii11]],
       :where [:= :name ":open-fn"]}},
     :drag-meta
     {:data-type "string",
      :source-query :flow-fn-sys,
      :param-full ":open-fn",
      :param-field :name,
      :source-panel-key :flow-fn-list*,
      :type :open-fn,
      :param-table :flow-fn-sys,
      :source-table :query/flow-fn-sys,
      :connection-id nil,
      :target :name,
      :row-num 5}}},
   :open-fn-5
   {:y 1551.3756304572612,
    :fn (fn [x] x),
    :w 200,
    :raw-fn (fn [x] x),
    :right-click? true,
    :icon "zmdi-functions",
    :z 0,
    :ports {:in {:value :any}, :out {:out :any}},
    :h 100,
    :x 2821.4617187500003,
    :data
    {:flow-item
     {:description "Write you own Clojure function! Godspeed!",
      :category ":rabbit-base",
      :fn (fn [x] x),
      :name ":open-fn",
      :raw-fn (fn [x] x),
      :type :open-fn,
      :icon "zmdi-functions",
      :types {:value :any, :out :any},
      :input_types "[:any]",
      :inputs "[:value]",
      :output_types ":any",
      :expandable? true,
      :full_map
      "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
     :name "drag-from-",
     :w 5,
     :source-panel :flow-fn-list*,
     :h 6,
     :connection-id nil,
     :view-output? false,
     :queries
     {:name-drag-25
      {:select
       [:name
        :full_map
        :description
        :inputs
        :icon
        :input_types
        :output_types
        :category],
       :from [[:query/flow-fn-sys :ii11]],
       :where [:= :name ":open-fn"]}},
     :drag-meta
     {:data-type "string",
      :source-query :flow-fn-sys,
      :param-full ":open-fn",
      :param-field :name,
      :source-panel-key :flow-fn-list*,
      :type :open-fn,
      :param-table :flow-fn-sys,
      :source-table :query/flow-fn-sys,
      :connection-id nil,
      :target :name,
      :row-num 5}}},
   :upper-mid
   {:y 2136.9676296657985,
    :fn (fn [x] x),
    :w 200,
    :raw-fn (fn [x] (get x 6)),
    :right-click? true,
    :icon "zmdi-functions",
    :z 0,
    :ports {:in {:value :any}, :out {:out :any}},
    :h 100,
    :x 5306.102387152777,
    :data
    {:flow-item
     {:description "Write you own Clojure function! Godspeed!",
      :category ":rabbit-base",
      :fn (fn [x] x),
      :name ":open-fn",
      :raw-fn (fn [x] x),
      :type :open-fn,
      :icon "zmdi-functions",
      :types {:value :any, :out :any},
      :input_types "[:any]",
      :inputs "[:value]",
      :output_types ":any",
      :expandable? true,
      :full_map
      "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
     :name "drag-from-",
     :w 5,
     :source-panel :flow-fn-list*,
     :h 6,
     :connection-id nil,
     :queries
     {:name-drag-25
      {:select
       [:name
        :full_map
        :description
        :inputs
        :icon
        :input_types
        :output_types
        :category],
       :from [[:query/flow-fn-sys :ii11]],
       :where [:= :name ":open-fn"]}},
     :drag-meta
     {:data-type "string",
      :source-query :flow-fn-sys,
      :param-full ":open-fn",
      :param-field :name,
      :source-panel-key :flow-fn-list*,
      :type :open-fn,
      :param-table :flow-fn-sys,
      :source-table :query/flow-fn-sys,
      :connection-id nil,
      :target :name,
      :row-num 5}}},
   :http-call-1
   {:w 200,
    :h 100,
    :x 1747.3439280790442,
    :y 1235.2979650160846,
    :z 0,
    :data
    {:flow-item
     {:description "Basic HTTP call primitive",
      :category ":rabbit-base",
      :fn (fn [req-map] (rvbbit-backend.websockets/http-call req-map)),
      :name ":http-call",
      :icon "zmdi-http",
      :defaults
      {:req-map
       {:url "https://owen-wilson-wow-api.onrender.com/wows/random",
        :query-params {:movie "Wedding Crashers", :results 40}}},
      :types {:req-map :map, :out :any},
      :input_types "[:map]",
      :style {:color "#7BB696"},
      :selected-style {:color "#7BB696"},
      :inputs "[:req-map]",
      :output_types ":any",
      :expandable? false,
      :full_map
      "{:description \"Basic HTTP call primitive\", :fn (fn [req-map] (rvbbit-backend.websockets/http-call req-map)), :icon \"zmdi-http\", :defaults {:req-map {:url \"https://owen-wilson-wow-api.onrender.com/wows/random\", :query-params {:movie \"Wedding Crashers\", :results 40}}}, :types {:req-map :map, :out :any}, :style {:color \"#7BB696\"}, :selected-style {:color \"#7BB696\"}, :inputs [:req-map], :expandable? false, :required [:req-map]}",
      :required [:req-map]},
     :name "drag-from-",
     :w 5,
     :source-panel :flow-fn-list*,
     :root [864.1770935058594 199.171875],
     :h 6,
     :connection-id nil,
     :view-output? false,
     :queries
     {:name-drag-27
      {:select
       [:name
        :full_map
        :description
        :inputs
        :icon
        :input_types
        :output_types
        :category],
       :from [[:query/flow-fn-sys :ff241]],
       :where [:= :name ":http-call"]}},
     :drag-meta
     {:data-type "string",
      :source-query :flow-fn-sys,
      :param-full ":http-call",
      :param-field :name,
      :source-panel-key :flow-fn-list*,
      :type :where,
      :param-table :flow-fn-sys,
      :source-table :query/flow-fn-sys,
      :connection-id nil,
      :target :name,
      :row-num 5}},
    :icon "zmdi-http",
    :ports
    {:in {:req-map :map},
     :out {:created :integer, :data :rowset, :* :map}}},
   :open-fn-14
   {:y 1182.8275316519948,
    :fn (fn [x] x),
    :w 200,
    :raw-fn
    (fn [x] [:box
             :child
             (str x)
             :size
             "none"
             :width
             "500px"
             :style
             {:font-size "9px", :overflow "auto"}]
      nil),
    :right-click? true,
    :icon "zmdi-functions",
    :z 0,
    :ports {:in {:value :any}, :out {:out :any}},
    :h 100,
    :x 4444.901514382471,
    :data
    {:flow-item
     {:description "Write you own Clojure function! Godspeed!",
      :category ":rabbit-base",
      :fn (fn [x] x),
      :name ":open-fn",
      :raw-fn (fn [x] x),
      :type :open-fn,
      :icon "zmdi-functions",
      :types {:value :any, :out :any},
      :input_types "[:any]",
      :inputs "[:value]",
      :output_types ":any",
      :expandable? true,
      :full_map
      "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
     :name "drag-from-",
     :w 5,
     :source-panel :flow-fn-list*,
     :h 6,
     :connection-id nil,
     :queries
     {:name-drag-25
      {:select
       [:name
        :full_map
        :description
        :inputs
        :icon
        :input_types
        :output_types
        :category],
       :from [[:query/flow-fn-sys :ii11]],
       :where [:= :name ":open-fn"]}},
     :drag-meta
     {:data-type "string",
      :source-query :flow-fn-sys,
      :param-full ":open-fn",
      :param-field :name,
      :source-panel-key :flow-fn-list*,
      :type :open-fn,
      :param-table :flow-fn-sys,
      :source-table :query/flow-fn-sys,
      :connection-id nil,
      :target :name,
      :row-num 5}}},
   :gradient2
   {:y 2042.9487506763357,
    :fn (fn [x] x),
    :w 200,
    :raw-fn
    (fn [x y] (vec (rvbbit-backend.util/generate-gradient x y 8))),
    :right-click? true,
    :icon "zmdi-functions",
    :z 0,
    :ports
    {:in {:value :any, :value-1 :any},
     :out
     {:idx7 :string,
      :idx5 :string,
      :* :vector,
      :idx2 :string,
      :idx4 :string,
      :idx1 :string,
      :idx6 :string,
      :idx3 :string,
      :idx0 :string}},
    :h 100,
    :x 5749.094478297879,
    :data
    {:flow-item
     {:description "Write you own Clojure function! Godspeed!",
      :category ":rabbit-base",
      :fn (fn [x] x),
      :name ":open-fn",
      :raw-fn (fn [x] x),
      :type :open-fn,
      :icon "zmdi-functions",
      :types {:value :any, :out :any},
      :input_types "[:any]",
      :inputs "[:value]",
      :output_types ":any",
      :expandable? true,
      :full_map
      "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
     :name "drag-from-",
     :w 5,
     :source-panel :flow-fn-list*,
     :h 6,
     :connection-id nil,
     :queries
     {:name-drag-25
      {:select
       [:name
        :full_map
        :description
        :inputs
        :icon
        :input_types
        :output_types
        :category],
       :from [[:query/flow-fn-sys :ii11]],
       :where [:= :name ":open-fn"]}},
     :drag-meta
     {:data-type "string",
      :source-query :flow-fn-sys,
      :param-full ":open-fn",
      :param-field :name,
      :source-panel-key :flow-fn-list*,
      :type :open-fn,
      :param-table :flow-fn-sys,
      :source-table :query/flow-fn-sys,
      :connection-id nil,
      :target :name,
      :row-num 5}}},
   :mid-high
   {:y 2301.8376654547615,
    :fn (fn [x] x),
    :w 200,
    :raw-fn (fn [x] (get x 4)),
    :right-click? true,
    :icon "zmdi-functions",
    :z 0,
    :ports {:in {:value :any}, :out {:out :any}},
    :h 100,
    :x 5740.51254354941,
    :data
    {:flow-item
     {:description "Write you own Clojure function! Godspeed!",
      :category ":rabbit-base",
      :fn (fn [x] x),
      :name ":open-fn",
      :raw-fn (fn [x] x),
      :type :open-fn,
      :icon "zmdi-functions",
      :types {:value :any, :out :any},
      :input_types "[:any]",
      :inputs "[:value]",
      :output_types ":any",
      :expandable? true,
      :full_map
      "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
     :name "drag-from-",
     :w 5,
     :source-panel :flow-fn-list*,
     :h 6,
     :connection-id nil,
     :queries
     {:name-drag-25
      {:select
       [:name
        :full_map
        :description
        :inputs
        :icon
        :input_types
        :output_types
        :category],
       :from [[:query/flow-fn-sys :ii11]],
       :where [:= :name ":open-fn"]}},
     :drag-meta
     {:data-type "string",
      :source-query :flow-fn-sys,
      :param-full ":open-fn",
      :param-field :name,
      :source-panel-key :flow-fn-list*,
      :type :open-fn,
      :param-table :flow-fn-sys,
      :source-table :query/flow-fn-sys,
      :connection-id nil,
      :target :name,
      :row-num 5}}},
   :open-input-2
   {:w 200,
    :h 100,
    :data
    {:drag-meta {:type :open-block},
     :flow-item {:expandable? true},
     :user-input "natural"},
    :z 0,
    :ports {:out {:out :string}},
    :x -111.46861165364578,
    :y 1444.116943359375},
   :headers-map
   {:w 200,
    :h 100,
    :data
    {:drag-meta {:type :open-block},
     :flow-item {:expandable? true},
     :user-input
     {"Authorization"
      "Bearer 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",
      "Content-Type" "application/json"}},
    :z 0,
    :ports
    {:out {"Authorization" :string, "Content-Type" :string, :* :map}},
    :x 786.0028392650462,
    :y 1522.4280164930553},
   :url-str
   {:w 200,
    :h 100,
    :data
    {:drag-meta {:type :open-block},
     :flow-item {:expandable? true},
     :user-input "https://api.openai.com/v1/images/generations",
     :view-output? true},
    :z 0,
    :ports {:out {:out :string}},
    :x 768.1744249131942,
    :y 1362.70009765625},
   :open-fn-10
   {:y 2127.723868324454,
    :fn (fn [x] x),
    :w 200,
    :raw-fn (fn [x] x),
    :right-click? true,
    :icon "zmdi-functions",
    :z 0,
    :ports
    {:in {:value :any},
     :out {:dominantColor :string, :colorPalette :vector, :* :map}},
    :h 100,
    :x 4055.738221356873,
    :data
    {:flow-item
     {:description "Write you own Clojure function! Godspeed!",
      :category ":rabbit-base",
      :fn (fn [x] x),
      :name ":open-fn",
      :raw-fn (fn [x] x),
      :type :open-fn,
      :icon "zmdi-functions",
      :types {:value :any, :out :any},
      :input_types "[:any]",
      :inputs "[:value]",
      :output_types ":any",
      :expandable? true,
      :full_map
      "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
     :name "drag-from-",
     :w 5,
     :source-panel :flow-fn-list*,
     :h 6,
     :connection-id nil,
     :view-output? false,
     :queries
     {:name-drag-25
      {:select
       [:name
        :full_map
        :description
        :inputs
        :icon
        :input_types
        :output_types
        :category],
       :from [[:query/flow-fn-sys :ii11]],
       :where [:= :name ":open-fn"]}},
     :drag-meta
     {:data-type "string",
      :source-query :flow-fn-sys,
      :param-full ":open-fn",
      :param-field :name,
      :source-panel-key :flow-fn-list*,
      :type :open-fn,
      :param-table :flow-fn-sys,
      :source-table :query/flow-fn-sys,
      :connection-id nil,
      :target :name,
      :row-num 5}}}},
  :connections
  [[:in-prompt :open-input/value-0]
   [:quality :open-input/value-1]
   [:headers-map/* :open-input/value-2]
   [:url-str :open-input/value-3]
   [:open-input/* :open-fn-1/value]
   [:open-fn-1/* :http-call-1/req-map]
   [:http-call-1/data :open-fn-2/value]
   [:open-fn-2/idx0 :open-fn-3/value]
   [:open-fn-3/revised_prompt :open-fn-4/value]
   [:open-fn-3/b64_json :open-fn-5/value]
   [:open-fn-5 :open-fn-6/value]
   [:open-fn-5 :open-fn-7/value]
   [:open-fn-6 :open-fn-7/value-1]
   [:open-fn-7 :shell-command-1/command]
   [:open-fn-6 :done]
   [:open-fn-6 :open-fn-8/value]
   [:open-input-1 :open-fn-9/value]
   [:open-input-2 :open-fn-9/value-1]
   [:open-fn-9 :open-input/value-4]
   [:open-fn-5 :node-color-thief-js/image-path]
   [:node-color-thief-js/* :open-fn-10/value]
   [:node-color-thief-js/colorPalette :open-fn-11/value]
   [:node-color-thief-js/dominantColor :dom-color1/value]
   [:open-fn-11 :open-fn-13/value]
   [:open-fn-13 :darkest1/value]
   [:open-fn-13 :lightest1/value]
   [:open-fn-13 :ssecond-darkest/value]
   [:open-fn-13 :second-lightest/value]
   [:open-fn-13 :mid-high/value]
   [:open-fn-13 :upper-mid/value]
   [:ssecond-darkest :gradient1/value]
   [:upper-mid :gradient1/value-1]
   [:lightest1 :gradient2/value]
   [:ssecond-darkest :gradient2/value-1]
   [:gradient1 :make-data-colors/value]
   [:gradient2 :make-data-colors/value-1]
   [:open-fn-6 :open-fn-12/value]
   [:open-fn-12 :alert!-1/content]
   [:open-input-3/width :alert!-1/w]
   [:open-input-3/height :alert!-1/h]
   [:open-input-3/duration :alert!-1/duration]
   [:open-fn-4 :open-fn-14/value]
   [:open-fn-14 :alert!-2/content]
   [:open-input-3/width :alert!-2/w]
   [:open-input-3/height :alert!-2/h]
   [:open-input-3/duration :alert!-2/duration]
   [:shell-command-1/* :open-fn-8/value-1]]},
 :selected-cols nil,
 :server
 {:settings
  {:harvest-on-boot? true,
   :default "./screens/winter-theme.edn",
   :eleven-labs-api-key nil,
   :kits
   {:buffy
    {:author
     {:name "Ryan Robitaille",
      :email "ryan.robitaille@gmail.com",
      :x "@ryrobes",
      :site "https://ryrob.es/"},
     :kit-name :buffy,
     :package-name :grab-bag,
     :fn (rvbbit-backend.assistants/buffy :query-name),
     :name "Ask Buffy!",
     :icon "zmdi-cocktail",
     :run-on :queries,
     :description "What does Buffy think about this data? Who knows!"},
    :outliers
    {:description
     "A basic multivariate outlier detection runstream. Highlight outliers in various dimensional groupings as a launch pad for further exploration.",
     :image-url "images/outliers-image.png",
     :fn
     (rabbit-kit-outliers.core/get-outliers
       :query-name
       :panel-name
       :query),
     :name "Outliers",
     :icon "zmdi-functions",
     :author
     {:name "Ryan Robitaille",
      :email "ryan.robitaille@gmail.com",
      :x "@ryrobes",
      :site "https://ryrob.es/"},
     :run-on :queries,
     :repl {:host "127.0.0.1", :port 42999},
     :kit-name :outliers,
     :package-name :query-basics-1},
    :forecast
    {:description
     "WIP: basic timeseries forecasting based on previous values",
     :fn
     (rabbit-kit-outliers.core/get-forecast
       :query-name
       :panel-name
       :query),
     :name "Forecasting",
     :icon "zmdi-brightness-7",
     :author
     {:name "Ryan Robitaille",
      :email "ryan.robitaille@gmail.com",
      :x "@ryrobes",
      :site "https://ryrob.es/"},
     :run-on :queries,
     :repl {:host "127.0.0.1", :port 42999},
     :kit-name :forecast,
     :package-name :query-basics-1}},
   :graphite-host "127.0.0.1",
   :openapi-org-id nil,
   :debug-level 1,
   :screens
   ["GGGeat-ochre-mole-exiled-from-abyssal-plain"
    "SSSSSSuccessful-oval-sea-urchin-of-mountain-range"
    "SSuccessful-oval-sea-urchin-of-mountain-range"
    "aaa-run-amok"
    "asdasdasdasd"
    "autumn-theme"
    "bigfoot-snapshots"
    "bigfoot-snapshots2"
    "bigfoot-snapshots3"
    "blank-sizzle"
    "blank-sizzle2"
    "boston-test-10-3-23"
    "bunch of bullshit"
    "bunch of bullshit2"
    "bunch of bullshit4"
    "caliope"
    "calliope"
    "canvas-scrubber-test1"
    "chaos simple"
    "chaos-views"
    "clean-grey-defaults"
    "code-data-literal-stonks-test"
    "crazy-alice"
    "dark-crested-jackelope"
    "data-literals-test-sunday"
    "data-literals-test-sundaydd"
    "demo-dark-pumpkin-bkgrd-sept23"
    "demo-light-bkgrd-sept23"
    "demo-lime-green-slime"
    "desktops-and-broomsticks"
    "error-monitor"
    "error-monitor-vanessa"
    "error-monitor-vanessa2"
    "fake-books-1"
    "fetching-pentagonal-termite-of-tghe-submarine-canyon"
    "fox-hills"
    "glass-fish-board-test"
    "hue-board-1"
    "late-winter-theme"
    "layout-test-1"
    "layout-test-12"
    "light-theme"
    "literal-data-test"
    "luck-of-the-irish"
    "mapbox-test"
    "night-city-never-sleeps"
    "nivo-getting-better!"
    "nivo-hacking-2023"
    "nivo-hacking-2023333"
    "nivo-hacking-october-2nd"
    "old-defaults"
    "old-fashioned-christmas"
    "pinup-rabbit-fields"
    "poor-touring-me"
    "pres-sql-test-1"
    "recharts-test-blocks"
    "refresh-test"
    "riffle-test"
    "sizzle-board-1"
    "sneaky-swamp-creatures1"
    "swamp-nightgown"
    "swamp-reacher"
    "tallica-param-test2"
    "the-future-soon"
    "the-generated-lass"
    "the-generated-lass-glow"
    "the-generated-lass-ne"
    "tweet-bigfoot-is-blurry"
    "tweet-demo-thing-bigfoot-is-blurry"
    "unnamed-screen!"
    "weave-test"
    "weave-test1"
    "weave-test122"
    "who ya gonna call?"
    "who ya gonna call? again"
    "winter-theme"
    "winter-theme-choom"
    "winter-theme2"
    "winter-theme33"
    "winter-theme45"
    "winter-theme47"
    "wow-board"],
   :openapi-key
   "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"}},
 :runstreams nil,
 :editor? true,
 :buffy? false,
 :status-data
 {:heartbeat
  {:kick
   {:data
    [{:sent! :heartbeat,
      :to :all,
      :at "2024-01-29 16:37:34",
      :payload nil,
      :payload-kp [:heartbeat :heartbeat]}
     nil],
    :elapsed-ms nil,
    :reco-count nil}},
  "kick-test!"
  {:kick
   {:data
    [{:sent! "kick-test!",
      :to :unwavering-red-mosquito-banned-from-geyser,
      :at "2024-01-28 22:19:51",
      :payload
      {:query-log
       {:data
        [{:content ["2024-01-28 22:19:51 - query ran in 8 ms."],
          :name "query-log-:fflowparts-sys",
          :order 1706498391,
          :parameters {},
          :forced-mutates {},
          :step-mutates {}}],
        :description "query-log-:fflowparts-sys",
        :mutates {},
        :options {:actions? false, :pages? false, :search? false},
        :parameters {}}},
      :payload-kp [:fflowparts-sys "kick-test!"]}
     nil],
    :elapsed-ms nil,
    :reco-count nil}}},
 :re-pressed.core/keydown
 {:keys
  [{:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey false,
    :keyCode 67}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey false,
    :keyCode 67}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey false,
    :keyCode 67}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey false,
    :keyCode 67}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey false,
    :keyCode 67}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey false,
    :keyCode 67}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey false,
    :keyCode 67}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey false,
    :keyCode 67}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey false,
    :keyCode 67}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey false,
    :keyCode 67}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey false,
    :keyCode 67}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey false,
    :keyCode 67}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey false,
    :keyCode 27}
   {:altKey false,
    :ctrlKey true,
    :metaKey false,
    :shiftKey false,
    :keyCode 32}
   {:altKey false,
    :ctrlKey true,
    :metaKey false,
    :shiftKey false,
    :keyCode 32}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey false,
    :keyCode 32}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey false,
    :keyCode 32}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey true,
    :keyCode 32}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey true,
    :keyCode 32}
   {:altKey false,
    :ctrlKey true,
    :metaKey false,
    :shiftKey false,
    :keyCode 32}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey false,
    :keyCode 32}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey false,
    :keyCode 32}
   {:altKey false,
    :ctrlKey true,
    :metaKey false,
    :shiftKey false,
    :keyCode 32}
   {:altKey false,
    :ctrlKey true,
    :metaKey false,
    :shiftKey false,
    :keyCode 32}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey false,
    :keyCode 32}],
  :event-keys
  [[[:viz-yard.bricks/esc-unselect-current] [{:keyCode 27}]]
   [[:viz-yard.bricks/redo-one]
    [{:keyCode 90, :ctrlKey true, :shiftKey true}]]
   [[:viz-yard.bricks/undo-one]
    [{:keyCode 90, :ctrlKey true, :shiftKey false}]]
   [[:viz-yard.bricks/toggle-buffy]
    [{:keyCode 32, :shiftKey true, :ctrlKey false}]]
   [[:viz-yard.bricks/toggle-editor]
    [{:keyCode 32, :shiftKey false, :ctrlKey false}]]
   [[:viz-yard.bricks/toggle-flow]
    [{:keyCode 32, :shiftKey false, :ctrlKey true}]]
   [[:viz-yard.bricks/next-panel] [{:keyCode 9}]]
   [[:viz-yard.bricks/toggle-kick-alert] [{:keyCode 75}]]
   [[:viz-yard.bricks/toggle-peek] [{:keyCode 80}]]
   [[:viz-yard.bricks/toggle-lines] [{:keyCode 76}]]
   [[:viz-yard.bricks/toggle-auto-run] [{:keyCode 79}]]
   [[:viz-yard.bricks/delete-selected-panel]
    [{:keyCode 46, :shiftKey true}]]
   [[:viz-yard.bricks/cycle-column-select false] [{:keyCode 81}]]
   [[:viz-yard.bricks/cycle-column-select true] [{:keyCode 69}]]
   [[:viz-yard.audio/start-recording] [{:keyCode 84}]]
   [[:viz-yard.audio/stop-recording] [{:keyCode 89}]]
   [[:viz-yard.bricks/stretch-panel :wider]
    [{:keyCode 68, :shiftKey true}]]
   [[:viz-yard.bricks/stretch-panel :longer]
    [{:keyCode 83, :shiftKey true}]]
   [[:viz-yard.bricks/stretch-panel :narrower]
    [{:keyCode 65, :shiftKey true}]]
   [[:viz-yard.bricks/stretch-panel :shorter]
    [{:keyCode 87, :shiftKey true}]]
   [[:viz-yard.bricks/panel-depth-up] [{:keyCode 82, :shiftKey true}]]
   [[:viz-yard.bricks/panel-depth-down]
    [{:keyCode 70, :shiftKey true}]]
   [[:viz-yard.bricks/nudge-panel :up] [{:keyCode 87}]]
   [[:viz-yard.bricks/nudge-panel :down] [{:keyCode 83}]]
   [[:viz-yard.bricks/nudge-panel :left] [{:keyCode 65}]]
   [[:viz-yard.bricks/nudge-panel :right] [{:keyCode 68}]]
   [[:viz-yard.core/alt-key-down] [{:keyCode 67}]]],
  :clear-keys nil,
  :always-listen-keys nil,
  :prevent-default-keys
  [{:keyCode 32}
   {:keyCode 46, :shiftKey true}
   {:keyCode 83, :ctrlKey true}
   {:keyCode 9}
   {:keyCode 70, :ctrlKey true}]},
 :flow-subs [],
 :client-name :unwavering-red-mosquito-banned-from-geyser,
 :flows
 {"live-scratch-flow"
  {:map
   {:dalle3-create-image-1
    {:y 1475,
     :sub-flow
     {:flow-id "dalle3-create-image",
      :file-path "./flows/dalle3-create-image.edn",
      :map
      {:open-fn-13
       {:y 1824.6140314275567,
        :fn (fn [x] x),
        :w 200,
        :raw-fn
        (fn [hex-colors]
          (vec
            (let [hex-to-rgb (fn [hex]
                               (map
                                 (fn 
                                   [idx]
                                   (Integer/parseInt
                                     (subs hex idx (+ idx 2))
                                     16))
                                 [1 3 5]))
                  brightness (fn [rgb]
                               (let 
                                 [[r g b] rgb]
                                 (+
                                   (* 0.299 r)
                                   (* 0.587 g)
                                   (* 0.114 b))))]
              (sort-by (comp brightness hex-to-rgb) hex-colors)))),
        :right-click? true,
        :icon "zmdi-functions",
        :z 0,
        :ports
        {:in {:value :any},
         :out
         {:idx7 :string,
          :idx5 :string,
          :* :vector,
          :idx2 :string,
          :idx4 :string,
          :idx1 :string,
          :idx6 :string,
          :idx3 :string,
          :idx8 :string,
          :idx0 :string}},
        :h 100,
        :x 4508.6715997869305,
        :data
        {:flow-item
         {:description "Write you own Clojure function! Godspeed!",
          :category ":rabbit-base",
          :fn (fn [x] x),
          :name ":open-fn",
          :raw-fn (fn [x] x),
          :type :open-fn,
          :icon "zmdi-functions",
          :types {:value :any, :out :any},
          :input_types "[:any]",
          :inputs "[:value]",
          :output_types ":any",
          :expandable? true,
          :full_map
          "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
         :name "drag-from-",
         :w 5,
         :source-panel :flow-fn-list*,
         :h 6,
         :connection-id nil,
         :view-output? false,
         :queries
         {:name-drag-25
          {:select
           [:name
            :full_map
            :description
            :inputs
            :icon
            :input_types
            :output_types
            :category],
           :from [[:query/flow-fn-sys :ii11]],
           :where [:= :name ":open-fn"]}},
         :drag-meta
         {:data-type "string",
          :source-query :flow-fn-sys,
          :param-full ":open-fn",
          :param-field :name,
          :source-panel-key :flow-fn-list*,
          :type :open-fn,
          :param-table :flow-fn-sys,
          :source-table :query/flow-fn-sys,
          :connection-id nil,
          :target :name,
          :row-num 5}}},
       :second-lightest
       {:y 1972.8225287543403,
        :fn (fn [x] x),
        :w 200,
        :raw-fn (fn [x] (last (drop-last x))),
        :right-click? true,
        :icon "zmdi-functions",
        :z 0,
        :ports {:in {:value :any}, :out {:out :any}},
        :h 100,
        :x 5305.513375289351,
        :data
        {:flow-item
         {:description "Write you own Clojure function! Godspeed!",
          :category ":rabbit-base",
          :fn (fn [x] x),
          :name ":open-fn",
          :raw-fn (fn [x] x),
          :type :open-fn,
          :icon "zmdi-functions",
          :types {:value :any, :out :any},
          :input_types "[:any]",
          :inputs "[:value]",
          :output_types ":any",
          :expandable? true,
          :full_map
          "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
         :name "drag-from-",
         :w 5,
         :source-panel :flow-fn-list*,
         :h 6,
         :connection-id nil,
         :view-output? true,
         :queries
         {:name-drag-25
          {:select
           [:name
            :full_map
            :description
            :inputs
            :icon
            :input_types
            :output_types
            :category],
           :from [[:query/flow-fn-sys :ii11]],
           :where [:= :name ":open-fn"]}},
         :drag-meta
         {:data-type "string",
          :source-query :flow-fn-sys,
          :param-full ":open-fn",
          :param-field :name,
          :source-panel-key :flow-fn-list*,
          :type :open-fn,
          :param-table :flow-fn-sys,
          :source-table :query/flow-fn-sys,
          :connection-id nil,
          :target :name,
          :row-num 5}}},
       :open-fn-8
       {:y 1289.3273225170874,
        :fn (fn [x] x),
        :w 200,
        :raw-fn
        (fn [x y]
          (str
            (clojure.string/replace
              x
              "/home/ryanr/viz-yard/resources/public/"
              "url(")
            ")")),
        :right-click? true,
        :icon "zmdi-functions",
        :z 0,
        :ports {:in {:value :any, :value-1 :any}, :out {:out :any}},
        :h 100,
        :x 4066.4052582891677,
        :data
        {:flow-item
         {:description "Write you own Clojure function! Godspeed!",
          :category ":rabbit-base",
          :fn (fn [x] x),
          :name ":open-fn",
          :raw-fn (fn [x] x),
          :type :open-fn,
          :icon "zmdi-functions",
          :types {:value :any, :out :any},
          :input_types "[:any]",
          :inputs "[:value]",
          :output_types ":any",
          :expandable? true,
          :full_map
          "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
         :name "drag-from-",
         :w 5,
         :source-panel :flow-fn-list*,
         :h 6,
         :connection-id nil,
         :view-output? false,
         :queries
         {:name-drag-25
          {:select
           [:name
            :full_map
            :description
            :inputs
            :icon
            :input_types
            :output_types
            :category],
           :from [[:query/flow-fn-sys :ii11]],
           :where [:= :name ":open-fn"]}},
         :drag-meta
         {:data-type "string",
          :source-query :flow-fn-sys,
          :param-full ":open-fn",
          :param-field :name,
          :source-panel-key :flow-fn-list*,
          :type :open-fn,
          :param-table :flow-fn-sys,
          :source-table :query/flow-fn-sys,
          :connection-id nil,
          :target :name,
          :row-num 5}}},
       :alert!-2
       {:w 200,
        :h 100,
        :x 5313.887965339137,
        :y 1188.6692051877603,
        :z 0,
        :data
        {:flow-item
         {:description
          "Send a pop-up notification to a client (or :all clients)",
          :category ":rabbit-base",
          :fn
          (fn [destination content w h duration]
            (rvbbit-backend.websockets/alert!
              destination
              content
              w
              h
              duration)),
          :name ":alert!",
          :icon "zmdi-alert-polygon",
          :defaults
          {:destination :client-name,
           :content "Alert!",
           :w 10,
           :h 1,
           :duration 6},
          :types
          {:destination :keyword,
           :content :any,
           :out :any,
           :w :integer,
           :h :integer,
           :duration :integer},
          :input_types "[:keyword :any :integer :integer :integer]",
          :style {:color "#FDFD96"},
          :selected-style {:color "#FDFD96"},
          :inputs "[:destination :content :w :h :duration]",
          :output_types ":any",
          :full_map
          "{:description \"Send a pop-up notification to a client (or :all clients)\", :fn (fn [destination content w h duration] (rvbbit-backend.websockets/alert! destination content w h duration)), :inputs [:destination :content :w :h :duration], :icon \"zmdi-alert-polygon\", :style {:color \"#FDFD96\"}, :selected-style {:color \"#FDFD96\"}, :defaults {:destination :client-name, :content \"Alert!\", :w 10, :h 1, :duration 6}, :types {:destination :keyword, :content :any, :out :any, :w :integer, :h :integer, :duration :integer}}"},
         :name "drag-from-",
         :w 5,
         :source-panel :flow-fn-list*,
         :root [1154 188],
         :h 6,
         :connection-id nil,
         :queries
         {:name-drag-34
          {:select
           [:name
            :full_map
            :description
            :inputs
            :icon
            :input_types
            :output_types
            :category],
           :from [[:query/flow-fn-sys :qq253]],
           :where [:= :name ":alert!"]}},
         :drag-meta
         {:data-type "string",
          :source-query :flow-fn-sys,
          :param-full ":alert!",
          :param-field :name,
          :source-panel-key :flow-fn-list*,
          :type :where,
          :param-table :flow-fn-sys,
          :source-table :query/flow-fn-sys,
          :connection-id nil,
          :target :name,
          :row-num 0}},
        :icon "zmdi-alert-polygon",
        :ports
        {:in
         {:destination :keyword,
          :content :any,
          :w :integer,
          :h :integer,
          :duration :integer},
         :out {:out :any}}},
       :open-fn-7
       {:y 1558.8995291537408,
        :fn (fn [x] x),
        :w 200,
        :raw-fn (fn [x y] (str "convert " x " " y)),
        :right-click? true,
        :icon "zmdi-functions",
        :z 0,
        :ports {:in {:value :any, :value-1 :any}, :out {:out :any}},
        :h 100,
        :x 3365.9914373132146,
        :data
        {:flow-item
         {:description "Write you own Clojure function! Godspeed!",
          :category ":rabbit-base",
          :fn (fn [x] x),
          :name ":open-fn",
          :raw-fn (fn [x] x),
          :type :open-fn,
          :icon "zmdi-functions",
          :types {:value :any, :out :any},
          :input_types "[:any]",
          :inputs "[:value]",
          :output_types ":any",
          :expandable? true,
          :full_map
          "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
         :name "drag-from-",
         :w 5,
         :source-panel :flow-fn-list*,
         :h 6,
         :connection-id nil,
         :view-output? true,
         :queries
         {:name-drag-25
          {:select
           [:name
            :full_map
            :description
            :inputs
            :icon
            :input_types
            :output_types
            :category],
           :from [[:query/flow-fn-sys :ii11]],
           :where [:= :name ":open-fn"]}},
         :drag-meta
         {:data-type "string",
          :source-query :flow-fn-sys,
          :param-full ":open-fn",
          :param-field :name,
          :source-panel-key :flow-fn-list*,
          :type :open-fn,
          :param-table :flow-fn-sys,
          :source-table :query/flow-fn-sys,
          :connection-id nil,
          :target :name,
          :row-num 5}}},
       :shell-command-1
       {:w 200,
        :h 100,
        :x 3657.4198481531157,
        :y 1353.6626850116338,
        :z 0,
        :data
        {:flow-item
         {:description
          "Execute shell command. WARNING: only use if you know what you're doing / have controlled inputs",
          :category ":rabbit-base",
          :fn
          (fn [command]
            (rvbbit-backend.websockets/run-shell-command command)),
          :name ":shell-command",
          :icon "zmdi-washing-machine",
          :defaults {:command "ls -la"},
          :types {:command :string, :out :any},
          :input_types "[:string]",
          :style {:color "#ffdd3c"},
          :selected-style {:color "#ffdd3c"},
          :inputs "[:command]",
          :output_types ":any",
          :full_map
          "{:description \"Execute shell command. WARNING: only use if you know what you're doing / have controlled inputs\", :fn (fn [command] (rvbbit-backend.websockets/run-shell-command command)), :icon \"zmdi-washing-machine\", :defaults {:command \"ls -la\"}, :types {:command :string, :out :any}, :style {:color \"#ffdd3c\"}, :selected-style {:color \"#ffdd3c\"}, :inputs [:command], :required [:command]}",
          :required [:command]},
         :name "drag-from-",
         :w 5,
         :source-panel :flow-fn-list*,
         :root [890 244],
         :h 6,
         :connection-id nil,
         :view-output? true,
         :queries
         {:name-drag-37
          {:select
           [:name
            :full_map
            :description
            :inputs
            :icon
            :input_types
            :output_types
            :category],
           :from [[:query/flow-fn-sys :vv683]],
           :where [:= :name ":shell-command"]}},
         :drag-meta
         {:data-type "string",
          :source-query :flow-fn-sys,
          :param-full ":shell-command",
          :param-field :name,
          :source-panel-key :flow-fn-list*,
          :type :where,
          :param-table :flow-fn-sys,
          :source-table :query/flow-fn-sys,
          :connection-id nil,
          :target :name,
          :row-num 7}},
        :icon "zmdi-washing-machine",
        :ports
        {:in {:command :string},
         :out
         {:output :vector,
          :exception :vector,
          :seconds :vector,
          :command :string,
          :* :map}}},
       :lightest1
       {:y 1798.000480143229,
        :fn (fn [x] x),
        :w 200,
        :raw-fn (fn [x] (last x)),
        :right-click? true,
        :icon "zmdi-functions",
        :z 0,
        :ports {:in {:value :any}, :out {:out :any}},
        :h 100,
        :x 5290.254224537037,
        :data
        {:flow-item
         {:description "Write you own Clojure function! Godspeed!",
          :category ":rabbit-base",
          :fn (fn [x] x),
          :name ":open-fn",
          :raw-fn (fn [x] x),
          :type :open-fn,
          :icon "zmdi-functions",
          :types {:value :any, :out :any},
          :input_types "[:any]",
          :inputs "[:value]",
          :output_types ":any",
          :expandable? true,
          :full_map
          "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
         :name "drag-from-",
         :w 5,
         :source-panel :flow-fn-list*,
         :h 6,
         :connection-id nil,
         :view-output? true,
         :queries
         {:name-drag-25
          {:select
           [:name
            :full_map
            :description
            :inputs
            :icon
            :input_types
            :output_types
            :category],
           :from [[:query/flow-fn-sys :ii11]],
           :where [:= :name ":open-fn"]}},
         :drag-meta
         {:data-type "string",
          :source-query :flow-fn-sys,
          :param-full ":open-fn",
          :param-field :name,
          :source-panel-key :flow-fn-list*,
          :type :open-fn,
          :param-table :flow-fn-sys,
          :source-table :query/flow-fn-sys,
          :connection-id nil,
          :target :name,
          :row-num 5}}},
       :gradient1
       {:y 1779.8277822989005,
        :fn (fn [x] x),
        :w 200,
        :raw-fn
        (fn [x y] (vec (rvbbit-backend.util/generate-gradient x y 8))),
        :right-click? true,
        :icon "zmdi-functions",
        :z 0,
        :ports
        {:in {:value :any, :value-1 :any},
         :out
         {:idx7 :string,
          :idx5 :string,
          :* :vector,
          :idx2 :string,
          :idx4 :string,
          :idx1 :string,
          :idx6 :string,
          :idx3 :string,
          :idx0 :string}},
        :h 100,
        :x 5737.372641782406,
        :data
        {:flow-item
         {:description "Write you own Clojure function! Godspeed!",
          :category ":rabbit-base",
          :fn (fn [x] x),
          :name ":open-fn",
          :raw-fn (fn [x] x),
          :type :open-fn,
          :icon "zmdi-functions",
          :types {:value :any, :out :any},
          :input_types "[:any]",
          :inputs "[:value]",
          :output_types ":any",
          :expandable? true,
          :full_map
          "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
         :name "drag-from-",
         :w 5,
         :source-panel :flow-fn-list*,
         :h 6,
         :connection-id nil,
         :view-output? true,
         :queries
         {:name-drag-25
          {:select
           [:name
            :full_map
            :description
            :inputs
            :icon
            :input_types
            :output_types
            :category],
           :from [[:query/flow-fn-sys :ii11]],
           :where [:= :name ":open-fn"]}},
         :drag-meta
         {:data-type "string",
          :source-query :flow-fn-sys,
          :param-full ":open-fn",
          :param-field :name,
          :source-panel-key :flow-fn-list*,
          :type :open-fn,
          :param-table :flow-fn-sys,
          :source-table :query/flow-fn-sys,
          :connection-id nil,
          :target :name,
          :row-num 5}}},
       :open-fn-1
       {:y 1416.240407986111,
        :fn (fn [x] x),
        :w 200,
        :raw-fn (fn [x] x),
        :right-click? true,
        :icon "zmdi-functions",
        :z 0,
        :ports
        {:in {:value :any},
         :out
         {:headers :map,
          :method :keyword,
          :url :string,
          :body :map,
          :* :map}},
        :h 100,
        :x 1314.2310474537035,
        :data
        {:flow-item
         {:description "Write you own Clojure function! Godspeed!",
          :category ":rabbit-base",
          :fn (fn [x] x),
          :name ":open-fn",
          :raw-fn (fn [x] x),
          :type :open-fn,
          :icon "zmdi-functions",
          :types {:value :any, :out :any},
          :input_types "[:any]",
          :inputs "[:value]",
          :output_types ":any",
          :expandable? true,
          :full_map
          "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
         :name "drag-from-",
         :w 5,
         :source-panel :flow-fn-list*,
         :h 6,
         :connection-id nil,
         :view-output? true,
         :queries
         {:name-drag-25
          {:select
           [:name
            :full_map
            :description
            :inputs
            :icon
            :input_types
            :output_types
            :category],
           :from [[:query/flow-fn-sys :ii11]],
           :where [:= :name ":open-fn"]}},
         :drag-meta
         {:data-type "string",
          :source-query :flow-fn-sys,
          :param-full ":open-fn",
          :param-field :name,
          :source-panel-key :flow-fn-list*,
          :type :open-fn,
          :param-table :flow-fn-sys,
          :source-table :query/flow-fn-sys,
          :connection-id nil,
          :target :name,
          :row-num 5}}},
       :open-fn-2
       {:y 1472.904453412224,
        :fn (fn [x] x),
        :w 200,
        :raw-fn (fn [x] x),
        :right-click? true,
        :icon "zmdi-functions",
        :z 0,
        :ports {:in {:value :any}, :out {:idx0 :map, :* :vector}},
        :h 100,
        :x 1850.385489430147,
        :data
        {:flow-item
         {:description "Write you own Clojure function! Godspeed!",
          :category ":rabbit-base",
          :fn (fn [x] x),
          :name ":open-fn",
          :raw-fn (fn [x] x),
          :type :open-fn,
          :icon "zmdi-functions",
          :types {:value :any, :out :any},
          :input_types "[:any]",
          :inputs "[:value]",
          :output_types ":any",
          :expandable? true,
          :full_map
          "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
         :name "drag-from-",
         :w 5,
         :source-panel :flow-fn-list*,
         :h 6,
         :connection-id nil,
         :view-output? true,
         :queries
         {:name-drag-25
          {:select
           [:name
            :full_map
            :description
            :inputs
            :icon
            :input_types
            :output_types
            :category],
           :from [[:query/flow-fn-sys :ii11]],
           :where [:= :name ":open-fn"]}},
         :drag-meta
         {:data-type "string",
          :source-query :flow-fn-sys,
          :param-full ":open-fn",
          :param-field :name,
          :source-panel-key :flow-fn-list*,
          :type :open-fn,
          :param-table :flow-fn-sys,
          :source-table :query/flow-fn-sys,
          :connection-id nil,
          :target :name,
          :row-num 5}}},
       :darkest1
       {:y 1499.4197961877892,
        :fn (fn [x] x),
        :w 200,
        :raw-fn (fn [x] (first x)),
        :right-click? true,
        :icon "zmdi-functions",
        :z 0,
        :ports {:in {:value :any}, :out {:out :any}},
        :h 100,
        :x 5274.040574363425,
        :data
        {:flow-item
         {:description "Write you own Clojure function! Godspeed!",
          :category ":rabbit-base",
          :fn (fn [x] x),
          :name ":open-fn",
          :raw-fn (fn [x] x),
          :type :open-fn,
          :icon "zmdi-functions",
          :types {:value :any, :out :any},
          :input_types "[:any]",
          :inputs "[:value]",
          :output_types ":any",
          :expandable? true,
          :full_map
          "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
         :name "drag-from-",
         :w 5,
         :source-panel :flow-fn-list*,
         :h 6,
         :connection-id nil,
         :view-output? true,
         :queries
         {:name-drag-25
          {:select
           [:name
            :full_map
            :description
            :inputs
            :icon
            :input_types
            :output_types
            :category],
           :from [[:query/flow-fn-sys :ii11]],
           :where [:= :name ":open-fn"]}},
         :drag-meta
         {:data-type "string",
          :source-query :flow-fn-sys,
          :param-full ":open-fn",
          :param-field :name,
          :source-panel-key :flow-fn-list*,
          :type :open-fn,
          :param-table :flow-fn-sys,
          :source-table :query/flow-fn-sys,
          :connection-id nil,
          :target :name,
          :row-num 5}}},
       :open-input-1
       {:w 200,
        :h 100,
        :data
        {:drag-meta {:type :open-block},
         :flow-item {:expandable? true},
         :user-input "vivid"},
        :z 0,
        :ports {:out {:out :string}},
        :x -113.35663248697915,
        :y 1226.1349690755208},
       :open-input-3
       {:w 200,
        :h 100,
        :data
        {:drag-meta {:type :open-block},
         :flow-item {:expandable? true},
         :user-input {:width 13, :height 8, :duration 9}},
        :z 0,
        :ports
        {:out
         {:width :integer,
          :height :integer,
          :duration :integer,
          :* :map}},
        :x 4554.520222267909,
        :y 1374.7628150627627},
       :alert!-1
       {:w 240,
        :h 100,
        :x 5282.577773321242,
        :y 1355.4901399717228,
        :z 0,
        :data
        {:flow-item
         {:description
          "Send a pop-up notification to a client (or :all clients)",
          :category ":rabbit-base",
          :fn
          (fn [destination content w h duration]
            (rvbbit-backend.websockets/alert!
              destination
              content
              w
              h
              duration)),
          :name ":alert!",
          :icon "zmdi-alert-polygon",
          :defaults
          {:destination :client-name,
           :content "Alert!",
           :w 10,
           :h 1,
           :duration 6},
          :types
          {:destination :keyword,
           :content :any,
           :out :any,
           :w :integer,
           :h :integer,
           :duration :integer},
          :input_types "[:keyword :any :integer :integer :integer]",
          :style {:color "#FDFD96"},
          :selected-style {:color "#FDFD96"},
          :inputs "[:destination :content :w :h :duration]",
          :output_types ":any",
          :full_map
          "{:description \"Send a pop-up notification to a client (or :all clients)\", :fn (fn [destination content w h duration] (rvbbit-backend.websockets/alert! destination content w h duration)), :inputs [:destination :content :w :h :duration], :icon \"zmdi-alert-polygon\", :style {:color \"#FDFD96\"}, :selected-style {:color \"#FDFD96\"}, :defaults {:destination :client-name, :content \"Alert!\", :w 10, :h 1, :duration 6}, :types {:destination :keyword, :content :any, :out :any, :w :integer, :h :integer, :duration :integer}}"},
         :name "drag-from-",
         :w 5,
         :source-panel :flow-fn-list*,
         :root [676 74],
         :h 6,
         :connection-id nil,
         :view-output? true,
         :queries
         {:name-drag-17
          {:select
           [:name
            :full_map
            :description
            :inputs
            :icon
            :input_types
            :output_types
            :category],
           :from [[:query/flow-fn-sys :yy463]],
           :where [:= :name ":alert!"]}},
         :drag-meta
         {:data-type "string",
          :source-query :flow-fn-sys,
          :param-full ":alert!",
          :param-field :name,
          :source-panel-key :flow-fn-list*,
          :type :where,
          :param-table :flow-fn-sys,
          :source-table :query/flow-fn-sys,
          :connection-id nil,
          :target :name,
          :row-num 0}},
        :icon "zmdi-alert-polygon",
        :ports
        {:in
         {:destination :keyword,
          :content :any,
          :w :integer,
          :h :integer,
          :duration :integer},
         :out {:out :any}}},
       :make-data-colors
       {:y 1837.9007893880205,
        :fn (fn [x] x),
        :w 200,
        :raw-fn
        (fn [x y]
          (zipmap
            ["float"
             "boolean"
             "map"
             "list"
             "string"
             "vector"
             "keyword"
             "rabbit-code"
             "datetime"
             "integer"
             "unknown"
             "date"
             "nil"]
            (shuffle (into y x)))),
        :right-click? true,
        :icon "zmdi-functions",
        :z 0,
        :ports
        {:in {:value :any, :value-1 :any},
         :out
         {"float" :string,
          "boolean" :string,
          "map" :string,
          "list" :string,
          :* :map,
          "string" :string,
          "vector" :string,
          "keyword" :string,
          "rabbit-code" :string,
          "datetime" :string,
          "integer" :string,
          "unknown" :string,
          "date" :string,
          "nil" :string}},
        :h 100,
        :x 6211.317592592592,
        :data
        {:flow-item
         {:description "Write you own Clojure function! Godspeed!",
          :category ":rabbit-base",
          :fn (fn [x] x),
          :name ":open-fn",
          :raw-fn (fn [x] x),
          :type :open-fn,
          :icon "zmdi-functions",
          :types {:value :any, :out :any},
          :input_types "[:any]",
          :inputs "[:value]",
          :output_types ":any",
          :expandable? true,
          :full_map
          "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
         :name "drag-from-",
         :w 5,
         :source-panel :flow-fn-list*,
         :h 6,
         :connection-id nil,
         :queries
         {:name-drag-25
          {:select
           [:name
            :full_map
            :description
            :inputs
            :icon
            :input_types
            :output_types
            :category],
           :from [[:query/flow-fn-sys :ii11]],
           :where [:= :name ":open-fn"]}},
         :drag-meta
         {:data-type "string",
          :source-query :flow-fn-sys,
          :param-full ":open-fn",
          :param-field :name,
          :source-panel-key :flow-fn-list*,
          :type :open-fn,
          :param-table :flow-fn-sys,
          :source-table :query/flow-fn-sys,
          :connection-id nil,
          :target :name,
          :row-num 5}}},
       :in-prompt
       {:w 200,
        :h 100,
        :data
        {:drag-meta {:type :open-block},
         :flow-item {:expandable? true},
         :user-input
         "A high-definition, hyperreal, vivid 16:9 image of a New England scene in America, just before dawn during a heavy snowstorm, blending traditional and cyberpunk elements. The scene has a slightly gritty atmosphere, with the town covered in snow and buildings emitting soft pink and neon light blue glows. On the left side of the frame, a young and beautiful Irish-looking woman, clearly in her late 20s, with pouty full lips (with the bottom lip being prominent) and a slightly upturned nose, poses with a pleased expression yet mischievious on her large mouth. Her long hair is slightly wet, with snow collecting on it and her face, emphasizing the heavy snowfall. She has intricate Celtic-style tattoos of rabbits and wilderness on her neck, collarbone, and shoulders. The pre-dawn light adds a serene yet mysterious feel to the scene, underscoring the fusion of the natural world and technological influence.",
         :width 750},
        :z 0,
        :ports {:out {:out :string}},
        :x 727.2187565983952,
        :y 1028.1476308461783},
       :open-fn-6
       {:y 1360.8546035354202,
        :fn (fn [x] x),
        :w 200,
        :raw-fn
        (fn [x]
          (clojure.string/replace
            (clojure.string/replace x ".webp" ".png")
            "/home/ryanr/rvbbit-out"
            "/home/ryanr/viz-yard/resources/public/images/gen")),
        :right-click? true,
        :icon "zmdi-functions",
        :z 0,
        :ports {:in {:value :any}, :out {:out :any}},
        :h 100,
        :x 3182.757763012036,
        :data
        {:flow-item
         {:description "Write you own Clojure function! Godspeed!",
          :category ":rabbit-base",
          :fn (fn [x] x),
          :name ":open-fn",
          :raw-fn (fn [x] x),
          :type :open-fn,
          :icon "zmdi-functions",
          :types {:value :any, :out :any},
          :input_types "[:any]",
          :inputs "[:value]",
          :output_types ":any",
          :expandable? true,
          :full_map
          "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
         :name "drag-from-",
         :w 5,
         :source-panel :flow-fn-list*,
         :h 6,
         :connection-id nil,
         :view-output? true,
         :queries
         {:name-drag-25
          {:select
           [:name
            :full_map
            :description
            :inputs
            :icon
            :input_types
            :output_types
            :category],
           :from [[:query/flow-fn-sys :ii11]],
           :where [:= :name ":open-fn"]}},
         :drag-meta
         {:data-type "string",
          :source-query :flow-fn-sys,
          :param-full ":open-fn",
          :param-field :name,
          :source-panel-key :flow-fn-list*,
          :type :open-fn,
          :param-table :flow-fn-sys,
          :source-table :query/flow-fn-sys,
          :connection-id nil,
          :target :name,
          :row-num 5}}},
       :ssecond-darkest
       {:y 1644.5442626953125,
        :fn (fn [x] x),
        :w 200,
        :raw-fn (fn [x] (second x)),
        :right-click? true,
        :icon "zmdi-functions",
        :z 0,
        :ports {:in {:value :any}, :out {:out :any}},
        :h 100,
        :x 5294.654181134259,
        :data
        {:flow-item
         {:description "Write you own Clojure function! Godspeed!",
          :category ":rabbit-base",
          :fn (fn [x] x),
          :name ":open-fn",
          :raw-fn (fn [x] x),
          :type :open-fn,
          :icon "zmdi-functions",
          :types {:value :any, :out :any},
          :input_types "[:any]",
          :inputs "[:value]",
          :output_types ":any",
          :expandable? true,
          :full_map
          "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
         :name "drag-from-",
         :w 5,
         :source-panel :flow-fn-list*,
         :h 6,
         :connection-id nil,
         :queries
         {:name-drag-25
          {:select
           [:name
            :full_map
            :description
            :inputs
            :icon
            :input_types
            :output_types
            :category],
           :from [[:query/flow-fn-sys :ii11]],
           :where [:= :name ":open-fn"]}},
         :drag-meta
         {:data-type "string",
          :source-query :flow-fn-sys,
          :param-full ":open-fn",
          :param-field :name,
          :source-panel-key :flow-fn-list*,
          :type :open-fn,
          :param-table :flow-fn-sys,
          :source-table :query/flow-fn-sys,
          :connection-id nil,
          :target :name,
          :row-num 5}}},
       :node-color-thief-js
       {:y 1781.755455824908,
        :sub-flow
        {:flow-id "node-color-thief-js",
         :file-path "./flows/node-color-thief-js.edn",
         :map
         {:image-path
          {:w 200,
           :h 100,
           :data
           {:drag-meta {:type :open-block},
            :flow-item {:expandable? true},
            :user-input
            " /home/ryanr/viz-yard/resources/public/images/shannon45.png"},
           :z 0,
           :ports {:out {:out :string}},
           :x 948.9116738809121,
           :y 1074.148015202703},
          :shell-command-1
          {:w 200,
           :h 100,
           :x 1758.4411167689732,
           :y 1117.7292503720237,
           :z 0,
           :data
           {:flow-item
            {:description
             "Execute shell command. WARNING: only use if you know what you're doing / have controlled inputs",
             :category ":rabbit-base",
             :fn
             (fn [command]
               (rvbbit-backend.websockets/run-shell-command command)),
             :name ":shell-command",
             :icon "zmdi-washing-machine",
             :defaults {:command "ls -la"},
             :types {:command :string, :out :any},
             :input_types "[:string]",
             :style {:color "#ffdd3c"},
             :selected-style {:color "#ffdd3c"},
             :inputs "[:command]",
             :output_types ":any",
             :full_map
             "{:description \"Execute shell command. WARNING: only use if you know what you're doing / have controlled inputs\", :fn (fn [command] (rvbbit-backend.websockets/run-shell-command command)), :icon \"zmdi-washing-machine\", :defaults {:command \"ls -la\"}, :types {:command :string, :out :any}, :style {:color \"#ffdd3c\"}, :selected-style {:color \"#ffdd3c\"}, :inputs [:command], :required [:command]}",
             :required [:command]},
            :name "drag-from-",
            :w 5,
            :source-panel :flow-fn-list*,
            :root [539.1770935058594 176.171875],
            :h 6,
            :connection-id nil,
            :queries
            {:name-drag-42
             {:select
              [:name
               :full_map
               :description
               :inputs
               :icon
               :input_types
               :output_types
               :category],
              :from [[:query/flow-fn-sys :cc59]],
              :where [:= :name ":shell-command"]}},
            :drag-meta
            {:data-type "string",
             :source-query :flow-fn-sys,
             :param-full ":shell-command",
             :param-field :name,
             :source-panel-key :flow-fn-list*,
             :type :where,
             :param-table :flow-fn-sys,
             :source-table :query/flow-fn-sys,
             :connection-id nil,
             :target :name,
             :row-num 6}},
           :icon "zmdi-washing-machine",
           :ports
           {:in {:command :string},
            :out
            {:output :vector,
             :exception :vector,
             :seconds :vector,
             :command :string,
             :* :map}}},
          :clojure-string-join-1
          {:w 200,
           :h 100,
           :x 1348.4940418061756,
           :y 1136.4640299479165,
           :z 0,
           :data
           {:flow-item
            {:description "Clojure.string's join function.",
             :category ":clojure-base",
             :fn
             (fn [delimiter & args]
               (clojure.string/join delimiter args)),
             :name ":clojure-string-join",
             :icon "zmdi-group",
             :defaults {:delimiter " "},
             :types {:delimiter :string, :out :string},
             :input_types "[:string]",
             :inputs "[:delimiter]",
             :output_types ":string",
             :expandable? true,
             :full_map
             "{:description \"Clojure.string's join function.\", :fn (fn [delimiter & args] (clojure.string/join delimiter args)), :inputs [:delimiter], :required [:delimiter], :defaults {:delimiter \" \"}, :expandable? true, :icon \"zmdi-group\", :types {:delimiter :string, :out :string}}",
             :required [:delimiter]},
            :name "drag-from-",
            :w 5,
            :source-panel :flow-fn-list*,
            :root [540.1770935058594 279.171875],
            :h 6,
            :connection-id nil,
            :queries
            {:name-drag-12
             {:select
              [:name
               :full_map
               :description
               :inputs
               :icon
               :input_types
               :output_types
               :category],
              :from [[:query/flow-fn-sys :ww526]],
              :where [:= :name ":clojure-string-join"]}},
            :drag-meta
            {:data-type "string",
             :source-query :flow-fn-sys,
             :param-full ":clojure-string-join",
             :param-field :name,
             :source-panel-key :flow-fn-list*,
             :type :where,
             :param-table :flow-fn-sys,
             :source-table :query/flow-fn-sys,
             :connection-id nil,
             :target :name,
             :row-num 15}},
           :icon "zmdi-group",
           :ports
           {:in {:delimiter :string, :value-1 :any, :value-2 :any},
            :out {:out :string}}},
          :shell-command-in
          {:w 200,
           :h 100,
           :data
           {:drag-meta {:type :open-block},
            :flow-item {:expandable? true},
            :user-input
            "cd /home/ryanr/color-thief-project ; node ./colorThief.js"},
           :z 0,
           :ports {:out {:out :string}},
           :x 960.0851863779922,
           :y 1224.4579849567817},
          :join-output-as-string
          {:y 1158.848120777027,
           :fn (fn [x] x),
           :w 200,
           :raw-fn (fn [x] (clojure.string/join " " x)),
           :right-click? true,
           :icon "zmdi-functions",
           :z 0,
           :ports {:in {:value :any}, :out {:out :any}},
           :h 100,
           :x 2212.3248878272807,
           :data
           {:flow-item
            {:description "Write you own Clojure function! Godspeed!",
             :category ":rabbit-base",
             :fn (fn [x] x),
             :name ":open-fn",
             :raw-fn (fn [x] x),
             :type :open-fn,
             :icon "zmdi-functions",
             :types {:value :any, :out :any},
             :input_types "[:any]",
             :inputs "[:value]",
             :output_types ":any",
             :expandable? true,
             :full_map
             "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
            :name "drag-from-",
            :w 5,
            :source-panel :flow-fn-list*,
            :h 6,
            :connection-id nil,
            :queries
            {:name-drag-25
             {:select
              [:name
               :full_map
               :description
               :inputs
               :icon
               :input_types
               :output_types
               :category],
              :from [[:query/flow-fn-sys :ii11]],
              :where [:= :name ":open-fn"]}},
            :drag-meta
            {:data-type "string",
             :source-query :flow-fn-sys,
             :param-full ":open-fn",
             :param-field :name,
             :source-panel-key :flow-fn-list*,
             :type :open-fn,
             :param-table :flow-fn-sys,
             :source-table :query/flow-fn-sys,
             :connection-id nil,
             :target :name,
             :row-num 5}}},
          :json-to-edn
          {:w 200,
           :h 100,
           :x 2685.7088668823244,
           :y 1151.33984375,
           :z 0,
           :data
           {:flow-item
            {:description "Convert a JSON string to Clojure EDN",
             :category ":rabbit-base",
             :fn
             (fn [json-string]
               (rvbbit-backend.util/json-to-edn json-string)),
             :name ":json-to-edn",
             :icon "zmdi-file-text",
             :types {:json-string :string, :out :any},
             :input_types "[:string]",
             :inputs "[:json-string]",
             :output_types ":any",
             :full_map
             "{:description \"Convert a JSON string to Clojure EDN\", :fn (fn [json-string] (rvbbit-backend.util/json-to-edn json-string)), :inputs [:json-string], :icon \"zmdi-file-text\", :types {:json-string :string, :out :any}}"},
            :name "drag-from-",
            :w 5,
            :source-panel :flow-fn-list*,
            :root [1297.1770935058594 207.171875],
            :h 6,
            :connection-id nil,
            :queries
            {:name-drag-41
             {:select
              [:name
               :full_map
               :description
               :inputs
               :icon
               :input_types
               :output_types
               :category],
              :from [[:query/flow-fn-sys :uu284]],
              :where [:= :name ":json-to-edn"]}},
            :drag-meta
            {:data-type "string",
             :source-query :flow-fn-sys,
             :param-full ":json-to-edn",
             :param-field :name,
             :source-panel-key :flow-fn-list*,
             :type :where,
             :param-table :flow-fn-sys,
             :source-table :query/flow-fn-sys,
             :connection-id nil,
             :target :name,
             :row-num 7}},
           :icon "zmdi-file-text",
           :ports
           {:in {:json-string :string},
            :out
            {:dominantColor :string,
             :colorPalette :vector,
             :* :map}}}},
         :connections
         [[:shell-command-in :clojure-string-join-1/value-1]
          [:image-path :clojure-string-join-1/value-2]
          [:clojure-string-join-1 :shell-command-1/command]
          [:shell-command-1/output :join-output-as-string/value]
          [:join-output-as-string :json-to-edn/json-string]
          [:json-to-edn :done]]},
        :flow-id "node-color-thief-js",
        :w 200,
        :icon "zmdi-puzzle-piece",
        :z 0,
        :ports
        {:in {:image-path :string, :shell-command-in :string},
         :out
         {:dominantColor :string, :colorPalette :vector, :* :map}},
        :h 100,
        :file-path "./flows/node-color-thief-js.edn",
        :x 3288.9801815257347,
        :data
        {:flow-item nil,
         :name "drag-from-",
         :w 5,
         :source-panel :flow-list*,
         :root [678.71875 344.6979217529297],
         :h 6,
         :connection-id nil,
         :view-output? false,
         :queries
         {:flow-id-drag-5
          {:select [:flow_id :file_path :last_modified],
           :from [[:query/flows-sys :cc208]],
           :where [:= :flow_id "node-color-thief-js"]}},
         :drag-meta
         {:data-type "string",
          :done-block :json-to-edn,
          :source-query :flows-sys,
          :param-full "node-color-thief-js",
          :param-field :flow_id,
          :source-panel-key :flow-list*,
          :type :sub-flow,
          :param-table :flows-sys,
          :source-table :query/flows-sys,
          :connection-id nil,
          :target :flow_id,
          :row-num 4}}},
       :open-fn-9
       {:y 1308.2844527633101,
        :fn (fn [x] x),
        :w 200,
        :raw-fn (fn [& x] "vivid"),
        :right-click? true,
        :icon "zmdi-functions",
        :z 0,
        :ports
        {:in {:value :any, :value-1 :any},
         :out {:error :string, :* :map}},
        :h 100,
        :x 343.7386610243055,
        :data
        {:flow-item
         {:description "Write you own Clojure function! Godspeed!",
          :category ":rabbit-base",
          :fn (fn [x] x),
          :name ":open-fn",
          :raw-fn (fn [x] x),
          :type :open-fn,
          :icon "zmdi-functions",
          :types {:value :any, :out :any},
          :input_types "[:any]",
          :inputs "[:value]",
          :output_types ":any",
          :expandable? true,
          :full_map
          "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
         :name "drag-from-",
         :w 5,
         :source-panel :flow-fn-list*,
         :h 6,
         :connection-id nil,
         :view-output? false,
         :queries
         {:name-drag-25
          {:select
           [:name
            :full_map
            :description
            :inputs
            :icon
            :input_types
            :output_types
            :category],
           :from [[:query/flow-fn-sys :ii11]],
           :where [:= :name ":open-fn"]}},
         :drag-meta
         {:data-type "string",
          :source-query :flow-fn-sys,
          :param-full ":open-fn",
          :param-field :name,
          :source-panel-key :flow-fn-list*,
          :type :open-fn,
          :param-table :flow-fn-sys,
          :source-table :query/flow-fn-sys,
          :connection-id nil,
          :target :name,
          :row-num 5}}},
       :open-input
       {:w 200,
        :h 100,
        :data
        {:drag-meta {:type :open-block},
         :flow-item {:expandable? true},
         :user-input
         {:headers :value-2,
          :method :post,
          :url :value-3,
          :body
          {:prompt :value-0,
           :n 1,
           :size "1792x1024",
           :style :value-4,
           :response_format "b64_json",
           :model "dall-e-3",
           :quality :value-1}}},
        :z 0,
        :ports
        {:out
         {:headers :map,
          :method :keyword,
          :url :string,
          :body :map,
          :* :map},
         :in
         {:value-0 :any,
          :value-1 :any,
          :value-2 :any,
          :value-3 :any,
          :value-4 :any}},
        :x 1309.4404009650732,
        :y 1191.9339613970587},
       :dom-color1
       {:y 1627.0126651539522,
        :fn (fn [x] x),
        :w 200,
        :raw-fn (fn [x] x),
        :right-click? true,
        :icon "zmdi-functions",
        :z 0,
        :ports {:in {:value :any}, :out {:out :any}},
        :h 100,
        :x 4034.728400735294,
        :data
        {:flow-item
         {:description "Write you own Clojure function! Godspeed!",
          :category ":rabbit-base",
          :fn (fn [x] x),
          :name ":open-fn",
          :raw-fn (fn [x] x),
          :type :open-fn,
          :icon "zmdi-functions",
          :types {:value :any, :out :any},
          :input_types "[:any]",
          :inputs "[:value]",
          :output_types ":any",
          :expandable? true,
          :full_map
          "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
         :name "drag-from-",
         :w 5,
         :source-panel :flow-fn-list*,
         :h 6,
         :connection-id nil,
         :queries
         {:name-drag-25
          {:select
           [:name
            :full_map
            :description
            :inputs
            :icon
            :input_types
            :output_types
            :category],
           :from [[:query/flow-fn-sys :ii11]],
           :where [:= :name ":open-fn"]}},
         :drag-meta
         {:data-type "string",
          :source-query :flow-fn-sys,
          :param-full ":open-fn",
          :param-field :name,
          :source-panel-key :flow-fn-list*,
          :type :open-fn,
          :param-table :flow-fn-sys,
          :source-table :query/flow-fn-sys,
          :connection-id nil,
          :target :name,
          :row-num 5}}},
       :open-fn-11
       {:y 1794.0621538947612,
        :fn (fn [x] x),
        :w 200,
        :raw-fn (fn [x] x),
        :right-click? true,
        :icon "zmdi-functions",
        :z 0,
        :ports
        {:in {:value :any},
         :out
         {:idx7 :string,
          :idx5 :string,
          :* :vector,
          :idx2 :string,
          :idx4 :string,
          :idx1 :string,
          :idx6 :string,
          :idx3 :string,
          :idx8 :string,
          :idx0 :string}},
        :h 100,
        :x 4061.411247702206,
        :data
        {:flow-item
         {:description "Write you own Clojure function! Godspeed!",
          :category ":rabbit-base",
          :fn (fn [x] x),
          :name ":open-fn",
          :raw-fn (fn [x] x),
          :type :open-fn,
          :icon "zmdi-functions",
          :types {:value :any, :out :any},
          :input_types "[:any]",
          :inputs "[:value]",
          :output_types ":any",
          :expandable? true,
          :full_map
          "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
         :name "drag-from-",
         :w 5,
         :source-panel :flow-fn-list*,
         :h 6,
         :connection-id nil,
         :queries
         {:name-drag-25
          {:select
           [:name
            :full_map
            :description
            :inputs
            :icon
            :input_types
            :output_types
            :category],
           :from [[:query/flow-fn-sys :ii11]],
           :where [:= :name ":open-fn"]}},
         :drag-meta
         {:data-type "string",
          :source-query :flow-fn-sys,
          :param-full ":open-fn",
          :param-field :name,
          :source-panel-key :flow-fn-list*,
          :type :open-fn,
          :param-table :flow-fn-sys,
          :source-table :query/flow-fn-sys,
          :connection-id nil,
          :target :name,
          :row-num 5}}},
       :open-fn-3
       {:y 1343.2759061925549,
        :fn (fn [x] x),
        :w 200,
        :raw-fn (fn [x] x),
        :right-click? true,
        :icon "zmdi-functions",
        :z 0,
        :ports
        {:in {:value :any},
         :out {:revised_prompt :string, :b64_json :string, :* :map}},
        :h 100,
        :x 2270.161167279412,
        :data
        {:flow-item
         {:description "Write you own Clojure function! Godspeed!",
          :category ":rabbit-base",
          :fn (fn [x] x),
          :name ":open-fn",
          :raw-fn (fn [x] x),
          :type :open-fn,
          :icon "zmdi-functions",
          :types {:value :any, :out :any},
          :input_types "[:any]",
          :inputs "[:value]",
          :output_types ":any",
          :expandable? true,
          :full_map
          "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
         :name "drag-from-",
         :w 5,
         :source-panel :flow-fn-list*,
         :h 6,
         :connection-id nil,
         :view-output? false,
         :queries
         {:name-drag-25
          {:select
           [:name
            :full_map
            :description
            :inputs
            :icon
            :input_types
            :output_types
            :category],
           :from [[:query/flow-fn-sys :ii11]],
           :where [:= :name ":open-fn"]}},
         :drag-meta
         {:data-type "string",
          :source-query :flow-fn-sys,
          :param-full ":open-fn",
          :param-field :name,
          :source-panel-key :flow-fn-list*,
          :type :open-fn,
          :param-table :flow-fn-sys,
          :source-table :query/flow-fn-sys,
          :connection-id nil,
          :target :name,
          :row-num 5}}},
       :quality
       {:w 200,
        :h 100,
        :data
        {:drag-meta {:type :open-block},
         :flow-item {:expandable? true},
         :user-input "hd"},
        :z 0,
        :ports {:out {:out :string}},
        :x 734.1538809317127,
        :y 1194.2060836226851},
       :open-fn-4
       {:y 1246.006547277114,
        :fn (fn [x] x),
        :w 200,
        :raw-fn (fn [x] x),
        :right-click? true,
        :icon "zmdi-functions",
        :z 0,
        :ports {:in {:value :any}, :out {:out :any}},
        :h 100,
        :x 2784.174551930146,
        :data
        {:flow-item
         {:description "Write you own Clojure function! Godspeed!",
          :category ":rabbit-base",
          :fn (fn [x] x),
          :name ":open-fn",
          :raw-fn (fn [x] x),
          :type :open-fn,
          :icon "zmdi-functions",
          :types {:value :any, :out :any},
          :input_types "[:any]",
          :inputs "[:value]",
          :output_types ":any",
          :expandable? true,
          :full_map
          "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
         :name "drag-from-",
         :w 5,
         :source-panel :flow-fn-list*,
         :h 6,
         :connection-id nil,
         :view-output? false,
         :queries
         {:name-drag-25
          {:select
           [:name
            :full_map
            :description
            :inputs
            :icon
            :input_types
            :output_types
            :category],
           :from [[:query/flow-fn-sys :ii11]],
           :where [:= :name ":open-fn"]}},
         :drag-meta
         {:data-type "string",
          :source-query :flow-fn-sys,
          :param-full ":open-fn",
          :param-field :name,
          :source-panel-key :flow-fn-list*,
          :type :open-fn,
          :param-table :flow-fn-sys,
          :source-table :query/flow-fn-sys,
          :connection-id nil,
          :target :name,
          :row-num 5}}},
       :open-fn-12
       {:y 1624.2565088104782,
        :fn (fn [x] x),
        :w 200,
        :raw-fn
        (fn [x] [:v-box
                 :children
                 [[:play "/home/ryanr/coat.mp3"]
                  [:img
                   {:src
                    (str
                      (clojure.string/replace
                        x
                        "/home/ryanr/viz-yard/resources/public/"
                        "")),
                    :width "600px",
                    :style {:border-radius "10px"}}]]]),
        :right-click? true,
        :icon "zmdi-functions",
        :z 0,
        :ports
        {:in {:value :any},
         :out
         {:idx0 :keyword, :idx1 :keyword, :idx2 :vector, :* :vector}},
        :h 100,
        :x 4505.923477619014,
        :data
        {:flow-item
         {:description "Write you own Clojure function! Godspeed!",
          :category ":rabbit-base",
          :fn (fn [x] x),
          :name ":open-fn",
          :raw-fn (fn [x] x),
          :type :open-fn,
          :icon "zmdi-functions",
          :types {:value :any, :out :any},
          :input_types "[:any]",
          :inputs "[:value]",
          :output_types ":any",
          :expandable? true,
          :full_map
          "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
         :name "drag-from-",
         :w 5,
         :source-panel :flow-fn-list*,
         :h 6,
         :connection-id nil,
         :view-output? false,
         :queries
         {:name-drag-25
          {:select
           [:name
            :full_map
            :description
            :inputs
            :icon
            :input_types
            :output_types
            :category],
           :from [[:query/flow-fn-sys :ii11]],
           :where [:= :name ":open-fn"]}},
         :drag-meta
         {:data-type "string",
          :source-query :flow-fn-sys,
          :param-full ":open-fn",
          :param-field :name,
          :source-panel-key :flow-fn-list*,
          :type :open-fn,
          :param-table :flow-fn-sys,
          :source-table :query/flow-fn-sys,
          :connection-id nil,
          :target :name,
          :row-num 5}}},
       :open-fn-5
       {:y 1551.3756304572612,
        :fn (fn [x] x),
        :w 200,
        :raw-fn (fn [x] x),
        :right-click? true,
        :icon "zmdi-functions",
        :z 0,
        :ports {:in {:value :any}, :out {:out :any}},
        :h 100,
        :x 2821.4617187500003,
        :data
        {:flow-item
         {:description "Write you own Clojure function! Godspeed!",
          :category ":rabbit-base",
          :fn (fn [x] x),
          :name ":open-fn",
          :raw-fn (fn [x] x),
          :type :open-fn,
          :icon "zmdi-functions",
          :types {:value :any, :out :any},
          :input_types "[:any]",
          :inputs "[:value]",
          :output_types ":any",
          :expandable? true,
          :full_map
          "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
         :name "drag-from-",
         :w 5,
         :source-panel :flow-fn-list*,
         :h 6,
         :connection-id nil,
         :view-output? false,
         :queries
         {:name-drag-25
          {:select
           [:name
            :full_map
            :description
            :inputs
            :icon
            :input_types
            :output_types
            :category],
           :from [[:query/flow-fn-sys :ii11]],
           :where [:= :name ":open-fn"]}},
         :drag-meta
         {:data-type "string",
          :source-query :flow-fn-sys,
          :param-full ":open-fn",
          :param-field :name,
          :source-panel-key :flow-fn-list*,
          :type :open-fn,
          :param-table :flow-fn-sys,
          :source-table :query/flow-fn-sys,
          :connection-id nil,
          :target :name,
          :row-num 5}}},
       :upper-mid
       {:y 2136.9676296657985,
        :fn (fn [x] x),
        :w 200,
        :raw-fn (fn [x] (get x 6)),
        :right-click? true,
        :icon "zmdi-functions",
        :z 0,
        :ports {:in {:value :any}, :out {:out :any}},
        :h 100,
        :x 5306.102387152777,
        :data
        {:flow-item
         {:description "Write you own Clojure function! Godspeed!",
          :category ":rabbit-base",
          :fn (fn [x] x),
          :name ":open-fn",
          :raw-fn (fn [x] x),
          :type :open-fn,
          :icon "zmdi-functions",
          :types {:value :any, :out :any},
          :input_types "[:any]",
          :inputs "[:value]",
          :output_types ":any",
          :expandable? true,
          :full_map
          "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
         :name "drag-from-",
         :w 5,
         :source-panel :flow-fn-list*,
         :h 6,
         :connection-id nil,
         :queries
         {:name-drag-25
          {:select
           [:name
            :full_map
            :description
            :inputs
            :icon
            :input_types
            :output_types
            :category],
           :from [[:query/flow-fn-sys :ii11]],
           :where [:= :name ":open-fn"]}},
         :drag-meta
         {:data-type "string",
          :source-query :flow-fn-sys,
          :param-full ":open-fn",
          :param-field :name,
          :source-panel-key :flow-fn-list*,
          :type :open-fn,
          :param-table :flow-fn-sys,
          :source-table :query/flow-fn-sys,
          :connection-id nil,
          :target :name,
          :row-num 5}}},
       :http-call-1
       {:w 200,
        :h 100,
        :x 1747.3439280790442,
        :y 1235.2979650160846,
        :z 0,
        :data
        {:flow-item
         {:description "Basic HTTP call primitive",
          :category ":rabbit-base",
          :fn
          (fn [req-map] (rvbbit-backend.websockets/http-call req-map)),
          :name ":http-call",
          :icon "zmdi-http",
          :defaults
          {:req-map
           {:url
            "https://owen-wilson-wow-api.onrender.com/wows/random",
            :query-params {:movie "Wedding Crashers", :results 40}}},
          :types {:req-map :map, :out :any},
          :input_types "[:map]",
          :style {:color "#7BB696"},
          :selected-style {:color "#7BB696"},
          :inputs "[:req-map]",
          :output_types ":any",
          :expandable? false,
          :full_map
          "{:description \"Basic HTTP call primitive\", :fn (fn [req-map] (rvbbit-backend.websockets/http-call req-map)), :icon \"zmdi-http\", :defaults {:req-map {:url \"https://owen-wilson-wow-api.onrender.com/wows/random\", :query-params {:movie \"Wedding Crashers\", :results 40}}}, :types {:req-map :map, :out :any}, :style {:color \"#7BB696\"}, :selected-style {:color \"#7BB696\"}, :inputs [:req-map], :expandable? false, :required [:req-map]}",
          :required [:req-map]},
         :name "drag-from-",
         :w 5,
         :source-panel :flow-fn-list*,
         :root [864.1770935058594 199.171875],
         :h 6,
         :connection-id nil,
         :view-output? false,
         :queries
         {:name-drag-27
          {:select
           [:name
            :full_map
            :description
            :inputs
            :icon
            :input_types
            :output_types
            :category],
           :from [[:query/flow-fn-sys :ff241]],
           :where [:= :name ":http-call"]}},
         :drag-meta
         {:data-type "string",
          :source-query :flow-fn-sys,
          :param-full ":http-call",
          :param-field :name,
          :source-panel-key :flow-fn-list*,
          :type :where,
          :param-table :flow-fn-sys,
          :source-table :query/flow-fn-sys,
          :connection-id nil,
          :target :name,
          :row-num 5}},
        :icon "zmdi-http",
        :ports
        {:in {:req-map :map},
         :out {:created :integer, :data :rowset, :* :map}}},
       :open-fn-14
       {:y 1182.8275316519948,
        :fn (fn [x] x),
        :w 200,
        :raw-fn
        (fn [x] [:box
                 :child
                 (str x)
                 :size
                 "none"
                 :width
                 "500px"
                 :style
                 {:font-size "9px", :overflow "auto"}]
          nil),
        :right-click? true,
        :icon "zmdi-functions",
        :z 0,
        :ports {:in {:value :any}, :out {:out :any}},
        :h 100,
        :x 4444.901514382471,
        :data
        {:flow-item
         {:description "Write you own Clojure function! Godspeed!",
          :category ":rabbit-base",
          :fn (fn [x] x),
          :name ":open-fn",
          :raw-fn (fn [x] x),
          :type :open-fn,
          :icon "zmdi-functions",
          :types {:value :any, :out :any},
          :input_types "[:any]",
          :inputs "[:value]",
          :output_types ":any",
          :expandable? true,
          :full_map
          "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
         :name "drag-from-",
         :w 5,
         :source-panel :flow-fn-list*,
         :h 6,
         :connection-id nil,
         :queries
         {:name-drag-25
          {:select
           [:name
            :full_map
            :description
            :inputs
            :icon
            :input_types
            :output_types
            :category],
           :from [[:query/flow-fn-sys :ii11]],
           :where [:= :name ":open-fn"]}},
         :drag-meta
         {:data-type "string",
          :source-query :flow-fn-sys,
          :param-full ":open-fn",
          :param-field :name,
          :source-panel-key :flow-fn-list*,
          :type :open-fn,
          :param-table :flow-fn-sys,
          :source-table :query/flow-fn-sys,
          :connection-id nil,
          :target :name,
          :row-num 5}}},
       :gradient2
       {:y 2042.9487506763357,
        :fn (fn [x] x),
        :w 200,
        :raw-fn
        (fn [x y] (vec (rvbbit-backend.util/generate-gradient x y 8))),
        :right-click? true,
        :icon "zmdi-functions",
        :z 0,
        :ports
        {:in {:value :any, :value-1 :any},
         :out
         {:idx7 :string,
          :idx5 :string,
          :* :vector,
          :idx2 :string,
          :idx4 :string,
          :idx1 :string,
          :idx6 :string,
          :idx3 :string,
          :idx0 :string}},
        :h 100,
        :x 5749.094478297879,
        :data
        {:flow-item
         {:description "Write you own Clojure function! Godspeed!",
          :category ":rabbit-base",
          :fn (fn [x] x),
          :name ":open-fn",
          :raw-fn (fn [x] x),
          :type :open-fn,
          :icon "zmdi-functions",
          :types {:value :any, :out :any},
          :input_types "[:any]",
          :inputs "[:value]",
          :output_types ":any",
          :expandable? true,
          :full_map
          "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
         :name "drag-from-",
         :w 5,
         :source-panel :flow-fn-list*,
         :h 6,
         :connection-id nil,
         :queries
         {:name-drag-25
          {:select
           [:name
            :full_map
            :description
            :inputs
            :icon
            :input_types
            :output_types
            :category],
           :from [[:query/flow-fn-sys :ii11]],
           :where [:= :name ":open-fn"]}},
         :drag-meta
         {:data-type "string",
          :source-query :flow-fn-sys,
          :param-full ":open-fn",
          :param-field :name,
          :source-panel-key :flow-fn-list*,
          :type :open-fn,
          :param-table :flow-fn-sys,
          :source-table :query/flow-fn-sys,
          :connection-id nil,
          :target :name,
          :row-num 5}}},
       :mid-high
       {:y 2301.8376654547615,
        :fn (fn [x] x),
        :w 200,
        :raw-fn (fn [x] (get x 4)),
        :right-click? true,
        :icon "zmdi-functions",
        :z 0,
        :ports {:in {:value :any}, :out {:out :any}},
        :h 100,
        :x 5740.51254354941,
        :data
        {:flow-item
         {:description "Write you own Clojure function! Godspeed!",
          :category ":rabbit-base",
          :fn (fn [x] x),
          :name ":open-fn",
          :raw-fn (fn [x] x),
          :type :open-fn,
          :icon "zmdi-functions",
          :types {:value :any, :out :any},
          :input_types "[:any]",
          :inputs "[:value]",
          :output_types ":any",
          :expandable? true,
          :full_map
          "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
         :name "drag-from-",
         :w 5,
         :source-panel :flow-fn-list*,
         :h 6,
         :connection-id nil,
         :queries
         {:name-drag-25
          {:select
           [:name
            :full_map
            :description
            :inputs
            :icon
            :input_types
            :output_types
            :category],
           :from [[:query/flow-fn-sys :ii11]],
           :where [:= :name ":open-fn"]}},
         :drag-meta
         {:data-type "string",
          :source-query :flow-fn-sys,
          :param-full ":open-fn",
          :param-field :name,
          :source-panel-key :flow-fn-list*,
          :type :open-fn,
          :param-table :flow-fn-sys,
          :source-table :query/flow-fn-sys,
          :connection-id nil,
          :target :name,
          :row-num 5}}},
       :open-input-2
       {:w 200,
        :h 100,
        :data
        {:drag-meta {:type :open-block},
         :flow-item {:expandable? true},
         :user-input "natural"},
        :z 0,
        :ports {:out {:out :string}},
        :x -111.46861165364578,
        :y 1444.116943359375},
       :headers-map
       {:w 200,
        :h 100,
        :data
        {:drag-meta {:type :open-block},
         :flow-item {:expandable? true},
         :user-input
         {"Authorization"
          "Bearer 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",
          "Content-Type" "application/json"}},
        :z 0,
        :ports
        {:out
         {"Authorization" :string, "Content-Type" :string, :* :map}},
        :x 786.0028392650462,
        :y 1522.4280164930553},
       :url-str
       {:w 200,
        :h 100,
        :data
        {:drag-meta {:type :open-block},
         :flow-item {:expandable? true},
         :user-input "https://api.openai.com/v1/images/generations",
         :view-output? true},
        :z 0,
        :ports {:out {:out :string}},
        :x 768.1744249131942,
        :y 1362.70009765625},
       :open-fn-10
       {:y 2127.723868324454,
        :fn (fn [x] x),
        :w 200,
        :raw-fn (fn [x] x),
        :right-click? true,
        :icon "zmdi-functions",
        :z 0,
        :ports
        {:in {:value :any},
         :out
         {:dominantColor :string, :colorPalette :vector, :* :map}},
        :h 100,
        :x 4055.738221356873,
        :data
        {:flow-item
         {:description "Write you own Clojure function! Godspeed!",
          :category ":rabbit-base",
          :fn (fn [x] x),
          :name ":open-fn",
          :raw-fn (fn [x] x),
          :type :open-fn,
          :icon "zmdi-functions",
          :types {:value :any, :out :any},
          :input_types "[:any]",
          :inputs "[:value]",
          :output_types ":any",
          :expandable? true,
          :full_map
          "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
         :name "drag-from-",
         :w 5,
         :source-panel :flow-fn-list*,
         :h 6,
         :connection-id nil,
         :view-output? false,
         :queries
         {:name-drag-25
          {:select
           [:name
            :full_map
            :description
            :inputs
            :icon
            :input_types
            :output_types
            :category],
           :from [[:query/flow-fn-sys :ii11]],
           :where [:= :name ":open-fn"]}},
         :drag-meta
         {:data-type "string",
          :source-query :flow-fn-sys,
          :param-full ":open-fn",
          :param-field :name,
          :source-panel-key :flow-fn-list*,
          :type :open-fn,
          :param-table :flow-fn-sys,
          :source-table :query/flow-fn-sys,
          :connection-id nil,
          :target :name,
          :row-num 5}}}},
      :connections
      [[:in-prompt :open-input/value-0]
       [:quality :open-input/value-1]
       [:headers-map/* :open-input/value-2]
       [:url-str :open-input/value-3]
       [:open-input/* :open-fn-1/value]
       [:open-fn-1/* :http-call-1/req-map]
       [:http-call-1/data :open-fn-2/value]
       [:open-fn-2/idx0 :open-fn-3/value]
       [:open-fn-3/revised_prompt :open-fn-4/value]
       [:open-fn-3/b64_json :open-fn-5/value]
       [:open-fn-5 :open-fn-6/value]
       [:open-fn-5 :open-fn-7/value]
       [:open-fn-6 :open-fn-7/value-1]
       [:open-fn-7 :shell-command-1/command]
       [:open-fn-6 :done]
       [:open-fn-6 :open-fn-8/value]
       [:open-input-1 :open-fn-9/value]
       [:open-input-2 :open-fn-9/value-1]
       [:open-fn-9 :open-input/value-4]
       [:open-fn-5 :node-color-thief-js/image-path]
       [:node-color-thief-js/* :open-fn-10/value]
       [:node-color-thief-js/colorPalette :open-fn-11/value]
       [:node-color-thief-js/dominantColor :dom-color1/value]
       [:open-fn-11 :open-fn-13/value]
       [:open-fn-13 :darkest1/value]
       [:open-fn-13 :lightest1/value]
       [:open-fn-13 :ssecond-darkest/value]
       [:open-fn-13 :second-lightest/value]
       [:open-fn-13 :mid-high/value]
       [:open-fn-13 :upper-mid/value]
       [:ssecond-darkest :gradient1/value]
       [:upper-mid :gradient1/value-1]
       [:lightest1 :gradient2/value]
       [:ssecond-darkest :gradient2/value-1]
       [:gradient1 :make-data-colors/value]
       [:gradient2 :make-data-colors/value-1]
       [:open-fn-6 :open-fn-12/value]
       [:open-fn-12 :alert!-1/content]
       [:open-input-3/width :alert!-1/w]
       [:open-input-3/height :alert!-1/h]
       [:open-input-3/duration :alert!-1/duration]
       [:open-fn-4 :open-fn-14/value]
       [:open-fn-14 :alert!-2/content]
       [:open-input-3/width :alert!-2/w]
       [:open-input-3/height :alert!-2/h]
       [:open-input-3/duration :alert!-2/duration]
       [:shell-command-1/* :open-fn-8/value-1]]},
     :flow-id "dalle3-create-image",
     :w 300,
     :icon "zmdi-puzzle-piece",
     :z 0,
     :ports
     {:in
      {:open-input-1 :string,
       :open-input-3 :integer,
       :in-prompt :string,
       :quality :string,
       :open-input-2 :string,
       :headers-map :string,
       :url-str :string},
      :out {:out :any}},
     :h 75,
     :file-path "./flows/dalle3-create-image.edn",
     :x 1075,
     :data {:drag-meta {:done-block :open-fn-6, :type :sub-flow}}},
    :open-fn-8
    {:y 1700,
     :fn (fn [x y z] (+ x y)),
     :w 150,
     :raw-fn (fn [x y z] (+ x y)),
     :right-click? true,
     :icon "zmdi-functions",
     :z 0,
     :ports {:in {:x :any, :y :any, :z :any}, :out {:out :any}},
     :h 60,
     :x 1550,
     :data
     {:flow-item
      {:category ":rabbit-base",
       :fn (fn [x y z] (+ x y)),
       :name ":open-fn",
       :raw-fn (fn [x y z] (+ x y)),
       :type :open-fn,
       :icon "zmdi-functions",
       :types {:value :any, :out :any},
       :expandable? true,
       :drag-meta {:type :open-fn}}}},
    :open-fn-7
    {:y 1625,
     :fn (fn [x] x),
     :w 200,
     :raw-fn (fn [x] x),
     :right-click? true,
     :icon "zmdi-functions",
     :z 0,
     :ports {:in {:value :any}, :out {:out :any}},
     :h 60,
     :x 1775,
     :data
     {:flow-item
      {:description "Write you own Clojure function! Godspeed!",
       :category ":rabbit-base",
       :fn (fn [x] x),
       :name ":open-fn",
       :raw-fn (fn [x] x),
       :type :open-fn,
       :icon "zmdi-functions",
       :types {:value :any, :out :any},
       :input_types "[:any]",
       :inputs "[:value]",
       :output_types ":any",
       :expandable? true,
       :full_map
       "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
      :name "drag-from-",
      :w 5,
      :source-panel :flow-fn-list*,
      :h 6,
      :connection-id nil,
      :queries
      {:name-drag-25
       {:select
        [:name
         :full_map
         :description
         :inputs
         :icon
         :input_types
         :output_types
         :category],
        :from [[:query/flow-fn-sys :ii11]],
        :where [:= :name ":open-fn"]}},
      :drag-meta
      {:data-type "string",
       :source-query :flow-fn-sys,
       :param-full ":open-fn",
       :param-field :name,
       :source-panel-key :flow-fn-list*,
       :type :open-fn,
       :param-table :flow-fn-sys,
       :source-table :query/flow-fn-sys,
       :connection-id nil,
       :target :name,
       :row-num 5}}},
    :open-fn-1
    {:y 1100,
     :fn (fn [x] x),
     :w 200,
     :raw-fn (fn [x] x),
     :right-click? true,
     :icon "zmdi-functions",
     :z 0,
     :ports {:in {:value :any}, :out {:out :any}},
     :h 60,
     :x 1250,
     :data
     {:flow-item
      {:description "Write you own Clojure function! Godspeed!",
       :category ":rabbit-base",
       :fn (fn [x] x),
       :name ":open-fn",
       :raw-fn (fn [x] x),
       :type :open-fn,
       :icon "zmdi-functions",
       :types {:value :any, :out :any},
       :input_types "[:any]",
       :inputs "[:value]",
       :output_types ":any",
       :expandable? true,
       :full_map
       "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
      :name "drag-from-",
      :w 5,
      :source-panel :flow-fn-list*,
      :h 6,
      :connection-id nil,
      :queries
      {:name-drag-25
       {:select
        [:name
         :full_map
         :description
         :inputs
         :icon
         :input_types
         :output_types
         :category],
        :from [[:query/flow-fn-sys :ii11]],
        :where [:= :name ":open-fn"]}},
      :drag-meta
      {:data-type "string",
       :source-query :flow-fn-sys,
       :param-full ":open-fn",
       :param-field :name,
       :source-panel-key :flow-fn-list*,
       :type :open-fn,
       :param-table :flow-fn-sys,
       :source-table :query/flow-fn-sys,
       :connection-id nil,
       :target :name,
       :row-num 5}}},
    :kick-1
    {:w 225,
     :h 60,
     :x 1200,
     :y 1250,
     :z 0,
     :data
     {:flow-item
      {:description "Push items to the client UI.",
       :category ":rabbit-base",
       :fn
       (fn [destination
            ref
            item-key
            thread-id
            message-name
            thread-desc
            &
            args]
         (rvbbit-backend.websockets/kick
           destination
           ref
           item-key
           thread-id
           message-name
           thread-desc
           args)),
       :name ":kick",
       :type :kick,
       :icon "images/pink-rabbit-head.png",
       :defaults
       {:destination :client-name,
        :item-key ":base",
        :thread-id :flow-id,
        :message-name "Unnamed Message",
        :thread-desc :flow-id,
        :ref :flow-id},
       :types
       {:destination [:keyword :vector :list :set],
        :ref :string,
        :item-key :keyword,
        :thread-id :string,
        :message-name :string,
        :thread-desc :string,
        :out :any},
       :pill-name "content",
       :input_types
       "[[:keyword :vector :list :set] :string :keyword :string :string :string]",
       :style {:color "#fc0fc0"},
       :selected-style {:color "#fc0fc0"},
       :inputs
       "[:destination :ref :item-key :thread-id :message-name :thread-desc]",
       :output_types ":any",
       :expandable? true,
       :full_map
       "{:description \"Push items to the client UI.\", :fn (fn [destination ref item-key thread-id message-name thread-desc & args] (rvbbit-backend.websockets/kick destination ref item-key thread-id message-name thread-desc args)), :type :kick, :icon \"images/pink-rabbit-head.png\", :defaults {:destination :client-name, :item-key \":base\", :thread-id :flow-id, :message-name \"Unnamed Message\", :thread-desc :flow-id, :ref :flow-id}, :types {:destination [:keyword :vector :list :set], :ref :string, :item-key :keyword, :thread-id :string, :message-name :string, :thread-desc :string, :out :any}, :pill-name \"content\", :style {:color \"#fc0fc0\"}, :selected-style {:color \"#fc0fc0\"}, :inputs [:destination :ref :item-key :thread-id :message-name :thread-desc], :expandable? true, :required [:destination :ref :item-key :thread-id :message-name :thread-desc]}",
       :required
       [:destination
        :ref
        :item-key
        :thread-id
        :message-name
        :thread-desc]},
      :name "drag-from-",
      :w 5,
      :source-panel :flow-fn-list*,
      :root [775 343.66666412353516],
      :h 6,
      :connection-id nil,
      :queries
      {:name-drag-32
       {:select
        [:name
         :full_map
         :description
         :inputs
         :icon
         :input_types
         :output_types
         :category],
        :from [[:query/flow-fn-sys :jj136]],
        :where [:= :name ":kick"]}},
      :drag-meta
      {:data-type "string",
       :source-query :flow-fn-sys,
       :param-full ":kick",
       :param-field :name,
       :source-panel-key :flow-fn-list*,
       :type :kick,
       :param-table :flow-fn-sys,
       :source-table :query/flow-fn-sys,
       :connection-id nil,
       :target :name,
       :row-num 4}},
     :icon "images/pink-rabbit-head.png",
     :ports
     {:in
      {:destination [:keyword :vector :list :set],
       :ref :string,
       :item-key :keyword,
       :thread-id :string,
       :message-name :string,
       :thread-desc :string},
      :out {:out :any}}},
    :open-fn-2
    {:y 1250,
     :fn (fn [x] x),
     :w 150,
     :raw-fn (fn [x] x),
     :right-click? true,
     :icon "zmdi-functions",
     :z 0,
     :ports {:in {:value :any}, :out {:out :any}},
     :h 60,
     :x 1475,
     :data
     {:flow-item
      {:description "Write you own Clojure function! Godspeed!",
       :category ":rabbit-base",
       :fn (fn [x] x),
       :name ":open-fn",
       :raw-fn (fn [x] x),
       :type :open-fn,
       :icon "zmdi-functions",
       :types {:value :any, :out :any},
       :input_types "[:any]",
       :inputs "[:value]",
       :output_types ":any",
       :expandable? true,
       :full_map
       "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
      :name "drag-from-",
      :w 5,
      :source-panel :flow-fn-list*,
      :h 6,
      :connection-id nil,
      :queries
      {:name-drag-25
       {:select
        [:name
         :full_map
         :description
         :inputs
         :icon
         :input_types
         :output_types
         :category],
        :from [[:query/flow-fn-sys :ii11]],
        :where [:= :name ":open-fn"]}},
      :drag-meta
      {:data-type "string",
       :source-query :flow-fn-sys,
       :param-full ":open-fn",
       :param-field :name,
       :source-panel-key :flow-fn-list*,
       :type :open-fn,
       :param-table :flow-fn-sys,
       :source-table :query/flow-fn-sys,
       :connection-id nil,
       :target :name,
       :row-num 5}}},
    :open-input-1
    {:w 200,
     :h 60,
     :data
     {:drag-meta {:type :open-block},
      :flow-item {:expandable? true},
      :user-input "TEST"},
     :z 0,
     :ports {:in {}, :out {:out :string}},
     :x 1525,
     :y 1100},
    :kick-2
    {:y 1350,
     :w 250,
     :right-click? true,
     :icon "images/pink-rabbit-head.png",
     :z 0,
     :ports
     {:in
      {:destination [:keyword :vector :list :set],
       :ref :string,
       :item-key :keyword,
       :thread-id :string,
       :message-name :string,
       :thread-desc :string},
      :out {:out :any}},
     :h 60,
     :x 1200,
     :data
     {:flow-item
      {:category ":rabbit-base",
       :name ":kick",
       :type :kick,
       :icon "images/pink-rabbit-head.png",
       :defaults
       {:destination :client-name,
        :item-key ":base",
        :thread-id :flow-id,
        :message-name "Unnamed Message",
        :thread-desc :flow-id,
        :ref :flow-id},
       :types
       {:destination [:keyword :vector :list :set],
        :ref :string,
        :item-key :keyword,
        :thread-id :string,
        :message-name :string,
        :thread-desc :string,
        :out :any},
       :style {:color "#fc0fc0"},
       :selected-style {:color "#fc0fc0"},
       :expandable? true,
       :required
       [:destination
        :ref
        :item-key
        :thread-id
        :message-name
        :thread-desc]},
      :drag-meta {:type :kick}}},
    :dalle3-create-image nil,
    :open-fn-6
    {:y 1250,
     :fn (fn [x] x),
     :w 250,
     :raw-fn (fn [x] x),
     :right-click? true,
     :icon "zmdi-functions",
     :z 0,
     :ports {:in {:value :any}, :out {:out :any}},
     :h 60,
     :x 1650,
     :data
     {:flow-item
      {:description "Write you own Clojure function! Godspeed!",
       :category ":rabbit-base",
       :fn (fn [x] x),
       :name ":open-fn",
       :raw-fn (fn [x] x),
       :type :open-fn,
       :icon "zmdi-functions",
       :types {:value :any, :out :any},
       :input_types "[:any]",
       :inputs "[:value]",
       :output_types ":any",
       :expandable? true,
       :full_map
       "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
      :name "drag-from-",
      :w 5,
      :source-panel :flow-fn-list*,
      :h 6,
      :connection-id nil,
      :drag-meta
      {:data-type "string",
       :source-query :flow-fn-sys,
       :param-full ":open-fn",
       :param-field :name,
       :source-panel-key :flow-fn-list*,
       :type :open-fn,
       :param-table :flow-fn-sys,
       :source-table :query/flow-fn-sys,
       :connection-id nil,
       :target :name,
       :row-num 5}}},
    :open-fn-9
    {:y 1683.1153846153848,
     :fn (fn [g] g),
     :w 125,
     :raw-fn (fn [g] g),
     :right-click? true,
     :icon "zmdi-functions",
     :z 0,
     :ports {:in {:g :any}, :out {:out :any}},
     :h 60,
     :x 1342.6615384615384,
     :data
     {:flow-item
      {:category ":rabbit-base",
       :fn (fn [g] g),
       :name ":open-fn",
       :raw-fn (fn [g] g),
       :type :open-fn,
       :icon "zmdi-functions",
       :types {:value :any, :out :any},
       :expandable? true,
       :drag-meta {:type :open-fn}}}},
    :open-input
    {:w 300,
     :h 60,
     :data
     {:drag-meta {:type :open-block},
      :flow-item {:expandable? true},
      :user-input [9 8 7]},
     :z 0,
     :ports {:in {}, :out {:out :vector}},
     :x 1550,
     :y 1350},
    :open-input-4
    {:w 125,
     :h 60,
     :data
     {:drag-meta {:type :open-block},
      :flow-item {:expandable? true},
      :user-input "stringy"},
     :z 0,
     :ports {:in {}, :out {:out :string}},
     :x 1250,
     :y 1575},
    :open-fn-3
    {:y 1525,
     :fn (fn [x] x),
     :w 150,
     :raw-fn (fn [x] x),
     :right-click? true,
     :icon "zmdi-functions",
     :z 0,
     :ports {:in {:value :any}, :out {:out :any}},
     :h 60,
     :x 1425,
     :data
     {:flow-item
      {:description "Write you own Clojure function! Godspeed!",
       :category ":rabbit-base",
       :fn (fn [x] x),
       :name ":open-fn",
       :raw-fn (fn [x] x),
       :type :open-fn,
       :icon "zmdi-functions",
       :types {:value :any, :out :any},
       :input_types "[:any]",
       :inputs "[:value]",
       :output_types ":any",
       :expandable? true,
       :full_map
       "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
      :name "drag-from-",
      :w 5,
      :source-panel :flow-fn-list*,
      :h 6,
      :connection-id nil,
      :queries
      {:name-drag-25
       {:select
        [:name
         :full_map
         :description
         :inputs
         :icon
         :input_types
         :output_types
         :category],
        :from [[:query/flow-fn-sys :ii11]],
        :where [:= :name ":open-fn"]}},
      :drag-meta
      {:data-type "string",
       :source-query :flow-fn-sys,
       :param-full ":open-fn",
       :param-field :name,
       :source-panel-key :flow-fn-list*,
       :type :open-fn,
       :param-table :flow-fn-sys,
       :source-table :query/flow-fn-sys,
       :connection-id nil,
       :target :name,
       :row-num 5}}},
    :open-fn-4
    {:y 1525,
     :fn (fn [x] x),
     :w 125,
     :raw-fn (fn [x] x),
     :right-click? true,
     :icon "zmdi-functions",
     :z 0,
     :ports {:in {:value :any}, :out {:out :any}},
     :h 60,
     :x 1600,
     :data
     {:flow-item
      {:description "Write you own Clojure function! Godspeed!",
       :category ":rabbit-base",
       :fn (fn [x] x),
       :name ":open-fn",
       :raw-fn (fn [x] x),
       :type :open-fn,
       :icon "zmdi-functions",
       :types {:value :any, :out :any},
       :input_types "[:any]",
       :inputs "[:value]",
       :output_types ":any",
       :expandable? true,
       :full_map
       "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
      :name "drag-from-",
      :w 5,
      :source-panel :flow-fn-list*,
      :h 6,
      :connection-id nil,
      :queries
      {:name-drag-25
       {:select
        [:name
         :full_map
         :description
         :inputs
         :icon
         :input_types
         :output_types
         :category],
        :from [[:query/flow-fn-sys :ii11]],
        :where [:= :name ":open-fn"]}},
      :drag-meta
      {:data-type "string",
       :source-query :flow-fn-sys,
       :param-full ":open-fn",
       :param-field :name,
       :source-panel-key :flow-fn-list*,
       :type :open-fn,
       :param-table :flow-fn-sys,
       :source-table :query/flow-fn-sys,
       :connection-id nil,
       :target :name,
       :row-num 5}}},
    :open-fn-5
    {:y 1525,
     :fn (fn [x] x),
     :w 175,
     :raw-fn (fn [x] x),
     :right-click? true,
     :icon "zmdi-functions",
     :z 0,
     :ports {:in {:value :any}, :out {:out :any}},
     :h 60,
     :x 1750,
     :data
     {:flow-item
      {:description "Write you own Clojure function! Godspeed!",
       :category ":rabbit-base",
       :fn (fn [x] x),
       :name ":open-fn",
       :raw-fn (fn [x] x),
       :type :open-fn,
       :icon "zmdi-functions",
       :types {:value :any, :out :any},
       :input_types "[:any]",
       :inputs "[:value]",
       :output_types ":any",
       :expandable? true,
       :full_map
       "{:description \"Write you own Clojure function! Godspeed!\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}"},
      :name "drag-from-",
      :w 5,
      :source-panel :flow-fn-list*,
      :h 6,
      :connection-id nil,
      :queries
      {:name-drag-25
       {:select
        [:name
         :full_map
         :description
         :inputs
         :icon
         :input_types
         :output_types
         :category],
        :from [[:query/flow-fn-sys :ii11]],
        :where [:= :name ":open-fn"]}},
      :drag-meta
      {:data-type "string",
       :source-query :flow-fn-sys,
       :param-full ":open-fn",
       :param-field :name,
       :source-panel-key :flow-fn-list*,
       :type :open-fn,
       :param-table :flow-fn-sys,
       :source-table :query/flow-fn-sys,
       :connection-id nil,
       :target :name,
       :row-num 5}}},
    :open-input-2
    {:w 200,
     :h 60,
     :data
     {:drag-meta {:type :open-block},
      :flow-item {:expandable? true},
      :user-input 123},
     :z 0,
     :ports {:in {}, :out {:out :integer}},
     :x 1750,
     :y 1100}},
   :connections
   [[:open-fn-1 :open-fn-2/value]
    [:open-input/idx1 :open-fn-3/value]
    [:open-input/idx2 :open-fn-4/value]
    [:open-fn-2 :open-fn-3/value]
    [:open-input/* :open-fn-5/value]
    [:open-fn-5 :open-fn-7/value]
    [:open-fn-3 :open-fn-8/x]
    [:open-fn-4 :open-fn-8/y]
    [:open-fn-5 :open-fn-8/z]
    [:open-input-1 :open-fn-6/value]
    [:open-input-2 :open-fn-6/value]
    [:open-input/idx0 :open-fn-9/g]
    [:open-fn-1 :open-fn-3/value]
    [:open-fn-6 :open-fn-5/value]
    [:kick-2 :open-fn-9/g]]}},
 :alt-key-held? false,
 :openai-api-key "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",
 :window {:w 2057, :h 1222},
 :post-meta
 {:flows-drag-13 {:* {:rowcount 55}},
  :flow-functions-drag-1 {:* {:rowcount 29}},
  :fflows-sys
  {:*
   {:rowcount
    "[SQLITE_ERROR] SQL error or missing database (near \")\": syntax error)"}},
  :fflowparts-sys
  {:*
   {:rowcount
    "[SQLITE_ERROR] SQL error or missing database (near \")\": syntax error)"}}},
 :status {:heartbeat {:kick []}, "kick-test!" {:kick :fflowparts-sys}},
 :screen-name "final-fantasy-dorchester",
 :recos-page2 0,
 :selected-tab "gray beaver",
 :col-names nil,
 :snapshots nil,
 :openai-org-id "org-YLngjih2M4oju0tnnZtKCAYg",
 :alerts [],
 :recos-page 0,
 :re-pollsive.core/polling
 {:rules
  [{:interval 10,
    :event [:viz-yard.bricks/dispatch-auto-queries],
    :poll-when [:viz-yard.bricks/auto-run-and-connected?],
    :dispatch-event-on-start? false}
   {:interval 5,
    :event [:viz-yard.bricks/update-metadata],
    :dispatch-event-on-start? false,
    :started-at 0,
    :stopped-time-since-last-poll nil,
    :started-before? true}
   {:interval 120,
    :event [:viz-yard.bricks/clean-up-reco-previews],
    :dispatch-event-on-start? false,
    :started-at 0,
    :stopped-time-since-last-poll nil,
    :started-before? true}
   {:interval 2,
    :event [:viz-yard.bricks/prune-alerts],
    :dispatch-event-on-start? false,
    :started-at 0,
    :stopped-time-since-last-poll nil,
    :started-before? true}
   {:interval 1,
    :event [:viz-yard.bricks/refresh-runstreams],
    :poll-when [:viz-yard.bricks/runstream-running?],
    :dispatch-event-on-start? false}
   {:interval 1,
    :event [:viz-yard.bricks/sub-to-flows],
    :poll-when [:viz-yard.bricks/new-flow-subs?],
    :dispatch-event-on-start? false}
   {:interval 1000,
    :event [:viz-yard.bricks/update-metadata-tabs],
    :dispatch-event-on-start? false,
    :started-at 0,
    :stopped-time-since-last-poll nil,
    :started-before? true}
   {:interval 1,
    :event [:viz-yard.bricks/update-conditionals],
    :dispatch-event-on-start? false,
    :started-at 0,
    :stopped-time-since-last-poll nil,
    :started-before? true}
   {:interval 4,
    :event [:viz-yard.bricks/refresh-status],
    :poll-when [:viz-yard.bricks/bg-status?],
    :dispatch-event-on-start? false}],
  :counter 50220},
 :base-sniff-queries {:flows 1142177134, :flow_functions -261942842},
 :re-pressed.core/keyup
 {:keys
  [{:altKey false,
    :ctrlKey true,
    :metaKey false,
    :shiftKey false,
    :keyCode 90}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey false,
    :keyCode 67}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey false,
    :keyCode 67}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey false,
    :keyCode 32}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey false,
    :keyCode 32}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey false,
    :keyCode 32}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey false,
    :keyCode 32}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey false,
    :keyCode 67}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey false,
    :keyCode 67}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey false,
    :keyCode 67}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey false,
    :keyCode 27}
   {:altKey false,
    :ctrlKey true,
    :metaKey false,
    :shiftKey false,
    :keyCode 90}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey false,
    :keyCode 90}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey false,
    :keyCode 32}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey false,
    :keyCode 32}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey false,
    :keyCode 32}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey false,
    :keyCode 32}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey false,
    :keyCode 32}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey false,
    :keyCode 32}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey false,
    :keyCode 32}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey false,
    :keyCode 32}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey false,
    :keyCode 32}
   {:altKey false,
    :ctrlKey true,
    :metaKey false,
    :shiftKey false,
    :keyCode 32}
   {:altKey false,
    :ctrlKey true,
    :metaKey false,
    :shiftKey false,
    :keyCode 32}
   {:altKey false,
    :ctrlKey false,
    :metaKey false,
    :shiftKey false,
    :keyCode 32}],
  :event-keys [[[:viz-yard.core/alt-key-up] [{:keyCode 67}]]],
  :clear-keys nil,
  :always-listen-keys nil},
 :panels-hash -468499405,
 :elevenlabs-api-key "f74e20dec69741c2d51663cbd8cd4cf6",
 :websocket-fx.core/sockets
 {:default
  {:status :connected,
   :options
   {:url "ws://localhost:3030/ws",
    :format :edn,
    :on-disconnect
    [:websocket-fx.core/unsubscribe :default :server-push2],
    :on-connect
    [:websocket-fx.core/subscribe
     :default
     :server-push2
     {:message
      {:kind :server-push2,
       :client-name :unwavering-red-mosquito-banned-from-geyser,
       :ui-keypath [:server],
       :extras {:hello? true}},
      :on-message [:viz-yard.http/simple-response]}]},
   :requests {},
   :subscriptions
   {:server-push2
    {:message
     {:kind :server-push2,
      :client-name :unwavering-red-mosquito-banned-from-geyser,
      :ui-keypath [:server],
      :extras {:hello? true}},
     :on-message [:viz-yard.http/simple-response]}}}},
 :user-params-hash 1072551317,
 :grid-recos? true,
 :panels
 {:hello-there-brother
  {:h 3,
   :w 12,
   :root [2 2],
   :name "hello there!",
   :tab "strategic grill locations",
   :views
   {:heya!
    [:box
     :align
     :center
     :justify
     :center
     :style
     {:font-size "50px",
      :font-weight 700,
      :color :theme/editor-outer-rim-color,
      :padding-top "14px",
      :opacity 1,
      :font-family :theme/base-font}
     :child
     "hello! 🐇 🍂 🦃"]},
   :queries {}},
  :block-9683
  {:h 7,
   :w 20,
   :connection-id "flows-db",
   :name "select-all-flows",
   :queries
   {:flows-drag-13
    {:select
     [:body
      :components
      :connections
      :file_path
      :flow_id
      :last_modified
      :ts],
     :from [[:flows :pp201]]}},
   :root [2 8],
   :tab "strategic grill locations"},
  :block-4768
  {:h 7,
   :w 27,
   :connection-id "system-db",
   :name "select-all-flow_functions",
   :queries
   {:flow-functions-drag-1
    {:select
     [:category
      :connection_id
      :description
      :file_path
      :full_map
      :icon
      :input_types
      :inputs
      :name
      :output_types
      :run_id
      :updated],
     :from [[:flow_functions :gg619]]}},
   :root [2 15],
   :tab "strategic grill locations"},
  :block-722
  {:h 4,
   :w 5,
   :root [23 0],
   :tab "strategic grill locations",
   :selected-view :hi,
   :name "block-722",
   :views
   {:hi
    [:box
     :align
     :center
     :justify
     :center
     :attr
     {:id ":block-722.:hi"}
     :style
     {:font-size "106px",
      :font-weight 700,
      :padding-top "6px",
      :padding-left "14px",
      :margin-top "-8px",
      :color :theme/editor-outer-rim-color,
      :font-family :theme/base-font}
     :child
     "hi!"],
    :stack
    [:layout
     {:panels {:hello-there {:h 0.99, :w 0.99, :root [0 0]}}}]},
   :queries {}}},
 :selected-block "none!",
 :click-param
 {:theme
  {:codemirror-theme "ayu-dark",
   :editor-param-background-color "#000000",
   :base-block-style {:backdrop-filter "blur(2px) brightness(70%) "},
   :vega-defaults
   {:view {:stroke "transparent"},
    :axis
    {:domainColor "#ffffff22",
     :grid true,
     :font "Lato",
     :labelColor "#ffffff88",
     :titleFont "Lato",
     :titleColor "#ffffff99",
     :labelFont "Lato",
     :domain false,
     :gridColor "#ffffff22",
     :tickColor "#ffffff22",
     :axisFont "Lato"},
    :legend
    {:labelFont "Lato",
     :legendFont "Lato",
     :labelColor "#ffffff99",
     :titleColor "#ffffff99",
     :stroke "#ffffff99",
     :titleFont "Lato"},
    :header
    {:labelFont "Lato", :titleFont "Lato", :titleColor "#ffffff99"},
    :mark {:font "Lato"},
    :title
    {:font "Lato",
     :subtitleFont "Lato",
     :labelFont "Lato",
     :titleFont "Lato",
     :titleColor "#ffffff99"}},
   :grid-selected-column-css
   {:background-color "#00000088", :filter "brightness(200%)"},
   :base-block-color-selected "#00030a",
   :block-title-font-color "#ffffff",
   :base-block-color "#2c092a82",
   :editor-rim-color "#588bde",
   :base-block-filter-selected
   "drop-shadow(0.35rem 0.35rem 0.4rem #8dceff) drop-shadow(-0.35rem -0.35rem 0.4rem #8dceff)",
   :vega-default-color-scheme {:scheme "pastel2"},
   :data-colors
   {"float" "#5A5F84",
    "boolean" "#714247",
    "map" "#F2E9D7",
    "list" "#958CA4",
    "string" "#c890ff",
    "vector" "#424771",
    "keyword" "#69648A",
    "rabbit-code" "#eeeeee",
    "datetime" "#747B97",
    "integer" "#00ddfb",
    "unknown" "#9399AC",
    "date" "#eeeeee",
    "nil" "#eeeeee"},
   :editor-grid-selected-font-color "#000000",
   :monospaced-font "JetBrains Mono",
   :editor-grid-selected-background-color "#e1a3be",
   :nivo-defaults
   {:font-family "Instagram Sans",
    :labels
    {:text
     {:fill "#ffffff",
      :font-size "16px",
      :font-family "Instagram Sans",
      :font-weight 700}},
    :tooltip
    {:container
     {:background "#000",
      :color "#ffffff",
      :text {:fill "#eeeeee"},
      :fontSize "18px",
      :borderRadius "4px",
      :boxShadow "0 1px 2px rgba(0, 0, 0, 0.55)",
      :padding "5px 9px"},
     :basic {:whiteSpace "pre", :display "flex", :alignItems "center"},
     :tableCell {:padding "3px 5px"}},
    :axis
    {:legend
     {:text
      {:fill "#ffffff",
       :font-size "14px",
       :font-family "Instagram Sans",
       :font-weight 700}},
     :ticks
     {:line {:stroke "#ffffff60"},
      :text {:fill "#ffffff60", :font-weight 700}}},
    :grid
    {:line
     {:stroke "#ffffff", :strokeWidth 0, :strokeDasharray "0 0"}}},
   :editor-outer-rim-color "#588bde",
   :grid-selected-font-color "#000000",
   :block-title-selected-font-color "#ffffff",
   :grid-selected-background-color "#a3d3ff",
   :grid-font-color "#ffffff",
   :canvas-background-css
   {:background-image2
    "url(images/coming-home-for-xmas1234-8k-4k.png)",
    :background-image "url(images/final-fantasy-dorchester-8k-4k.png)",
    :transition "all 0.8s ease-in-out",
    :background-size "cover",
    :background-color "#424f57"},
   :editor-font-color "#ffffff",
   :base-font "Instagram Sans",
   :block-tab-selected-font-color "#c9d1ff",
   :editor-background-color "#000006",
   :editor-grid-font-color "#ffffff"},
  :param
  {:selected-view [nil nil],
   :selected-view-data nil,
   :selected-block :block-8589},
  :connections-sys
  {:database_name "*cache-db*", :connection_id "system-db"},
  :tables-sys
  {:db_schema "none",
   :db_catalog nil,
   :connection_id "system-db",
   :schema_cat nil,
   :table_name "flow_functions",
   :fields 13},
  :flow-fn-sys
  {:name ":kick",
   :full_map
   "{:description \"Push items to the client UI.\", :fn (fn [destination ref item-key thread-id message-name thread-desc & args] (rvbbit-backend.websockets/kick destination ref item-key thread-id message-name thread-desc args)), :type :kick, :icon \"images/pink-rabbit-head.png\", :defaults {:destination :client-name, :item-key \":base\", :thread-id :flow-id, :message-name \"Unnamed Message\", :thread-desc :flow-id, :ref :flow-id}, :types {:destination [:keyword :vector :list :set], :ref :string, :item-key :keyword, :thread-id :string, :message-name :string, :thread-desc :string, :out :any}, :pill-name \"content\", :style {:color \"#fc0fc0\"}, :selected-style {:color \"#fc0fc0\"}, :inputs [:destination :ref :item-key :thread-id :message-name :thread-desc], :expandable? true, :required [:destination :ref :item-key :thread-id :message-name :thread-desc]}",
   :description "Push items to the client UI.",
   :inputs
   "[:destination :ref :item-key :thread-id :message-name :thread-desc]",
   :icon "images/pink-rabbit-head.png",
   :input_types
   "[[:keyword :vector :list :set] :string :keyword :string :string :string]",
   :output_types ":any",
   :category ":rabbit-base"},
  :flow-fn-categories-sys {:category ":rabbit-base"},
  :sys {:selected-tab "gray beaver", :selected-tab-idx 1}},
 :selected-flow "live-scratch-flow"}