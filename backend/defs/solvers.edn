{:colors-of-the-moment {:signal :signal/changed-wallpaper?
                        :cache? false
                        :type   :flow
                        :data   {:flowmap "node-color-thief-js-webp"
                                 :opts    {:overrides {:image-path :solver/wallpaper-of-the-moment}}
                                 :return  nil}}
 :all-large-webp-files {:signal false
                        :type   :clojure
                        :cache? true
                        :data   (let [dir     "/home/ryanr/rvbbit/frontend/resources/public/images/large"
                                      rel-dir "./images/large/"
                                      _ (Thread/sleep 5000)
                                      files   (->> (file-seq (clojure.java.io/file dir))
                                                   (filter (fn [x] (.isFile x)))
                                                   (filter (fn [x]
                                                             (not (clojure.string/includes? (str (.getName x)) "8k"))))
                                                   (map (fn [x] (.getName x))))]
                                  (println (count files))
                                  (vec (for [f files] {:filename (str f)})))}
 :wallpaper-of-the-moment-8k
   {:signal :signal/every-5-minutes
    :type   :clojure
    :cache? false
    :data   (do (defonce selected-files (atom []))
                (let [dir         "/home/ryanr/rvbbit/frontend/resources/public/images/large"
                      rel-dir     "./images/large/"
                      files       (->> (file-seq (clojure.java.io/file dir))
                                       (filter (fn [x] (.isFile x)))
                                       (filter (fn [x] (clojure.string/includes? (str (.getName x)) "8k")))
                                       (map (fn [x] (.getName x)))
                                       (shuffle))
                      random-file (first (remove (set (deref selected-files)) files))
                      _ (if random-file
                          (swap! selected-files conj random-file)
                          (do (reset! selected-files [])
                              (let [random-file (first files)] (swap! selected-files conj random-file))))
                      res         (str rel-dir random-file)]
                  (println res)
                  (println "(" (count (deref selected-files)) " files selected previously)")
                  res))}
 :count-sql-solver-1 {:signal :solver/sql-solver-1 :type :clojure :data (count :data/sql-solver-1)}
 :send-to-upscaler-3 {:signal    false
                      :type      :clojure
                      :cache?    false
                      :input-map {:rating 3 :source-path :flow/openai-image-gen-ladder3>:save-base64-to-webp-file}
                      :data      (let [source-path :source-path
                                       file-name   (.getName (clojure.java.io/file source-path))
                                       dest-path   (str "/home/ryanr/to-upscale/" :rating "/" file-name)]
                                   (with-open [in-file  (clojure.java.io/input-stream source-path)
                                               out-file (clojure.java.io/output-stream dest-path)]
                                     (clojure.java.io/copy in-file out-file)))}
 :colors-of-the-moment-8k {:signal :signal/changed-wallpaper-8k?
                           :cache? true
                           :type   :flow
                           :data   {:flowmap "node-color-thief-js-webp"
                                    :opts    {:overrides {:image-path :solver/wallpaper-of-the-moment-8k}}
                                    :return  nil}}
 :get-my-colors {:signal    false
                 :cache?    true
                 :type      :flow
                 :input-map {:input-image-path
                               "/home/ryanr/rvbbit/frontend/resources/public/images/gen/b64-image3-3490-16567.png"}
                 :data      {:flowmap "node-color-thief-js-webp" :opts {:overrides {:image-path :input-image-path}}}}
 :send-to-upscaler-1 {:signal    false
                      :type      :clojure
                      :cache?    false
                      :input-map {:rating 1 :source-path :flow/openai-image-gen-ladder3>:save-base64-to-webp-file}
                      :data      (let [source-path :source-path
                                       file-name   (.getName (clojure.java.io/file source-path))
                                       dest-path   (str "/home/ryanr/to-upscale/" :rating "/" file-name)]
                                   (with-open [in-file  (clojure.java.io/input-stream source-path)
                                               out-file (clojure.java.io/output-stream dest-path)]
                                     (clojure.java.io/copy in-file out-file)))}
 :vibrant-antelope-solver {:signal :signal/cool-raccoon-signal-yo :type :clojure :data (+ 1 2 3 88 (rand-int 1234))}
 :sql-snapshot-solver-1
   {:signal :signal/every-5-minutes
    :type :sql
    :snapshot? true
    :data
      {:cache?          false
       :group-by        [:ts]
       :from            [{:select   [:recent_messages_per_second :messages_per_second :mem_used :batches :packets :ts]
                          :from     [[:client_memory :ee183]]
                          :order-by [[:mem_time :desc]]}]
       :order-by        [[:ts :desc]]
       :connection-id   "system-db"
       :select          [[[[:sum :mem_used]] :mem_used] [[:sum :recent_messages_per_second] :messages_per_second] :ts]
       :post-process-fn (fn [x] (vec (reverse (for [row x] (assoc row :mb (int (/ (get row :mem_used 0) 1048576)))))))}}
 :solver-fn-test1 {:signal    false
                   :type      :clojure
                   :cache?    true
                   :input-map {:some-string "HEYa!" :some-number 123}
                   :data      (str :some-string (+ 123 :some-number))}
 :send-to-upscaler-4 {:signal    false
                      :type      :clojure
                      :cache?    false
                      :input-map {:rating 4 :source-path :flow/openai-image-gen-ladder3>:save-base64-to-webp-file}
                      :data      (let [source-path :source-path
                                       file-name   (.getName (clojure.java.io/file source-path))
                                       dest-path   (str "/home/ryanr/to-upscale/" :rating "/" file-name)]
                                   (with-open [in-file  (clojure.java.io/input-stream source-path)
                                               out-file (clojure.java.io/output-stream dest-path)]
                                     (clojure.java.io/copy in-file out-file)))}
 :sql-solver-1
   {:signal :signal/every-5-minutes
    :type :sql
    :snapshot? false
    :data
      {:cache?          false
       :group-by        [:ts]
       :from            [{:select   [:recent_messages_per_second :messages_per_second :mem_used :batches :packets :ts]
                          :from     [[:client_memory :ee183]]
                          :order-by [[:mem_time :desc]]}]
       :order-by        [[:ts :desc]]
       :connection-id   "system-db"
       :select          [[[[:sum :mem_used]] :mem_used] [[:sum :recent_messages_per_second] :messages_per_second] :ts]
       :post-process-fn (fn [x] (vec (reverse (for [row x] (assoc row :mb (int (/ (get row :mem_used 0) 1048576)))))))}}
 :static-data {:signal false :type :clojure :data [(apply + [1 2 3])]}
 :png-wallpaper? {:signal :signal/changed-wallpaper?
                  :type   :clojure
                  :cache? true
                  :data   (true? (clojure.string/ends-with? :solver/wallpaper-of-the-moment ".png"))}
 :send-to-upscaler-2 {:signal    false
                      :type      :clojure
                      :cache?    false
                      :input-map {:rating 2 :source-path :flow/openai-image-gen-ladder3>:save-base64-to-webp-file}
                      :data      (let [source-path :source-path
                                       file-name   (.getName (clojure.java.io/file source-path))
                                       dest-path   (str "/home/ryanr/to-upscale/" :rating "/" file-name)]
                                   (with-open [in-file  (clojure.java.io/input-stream source-path)
                                               out-file (clojure.java.io/output-stream dest-path)]
                                     (clojure.java.io/copy in-file out-file)))}
 :wallpaper-of-the-moment
   {:signal  :signal/every-5-minutes
    :type    :clojure
    :things? true
    :data    (do (defonce selected-files-4k (atom []))
                 (let [dir         "/home/ryanr/rvbbit/frontend/resources/public/images/large"
                       rel-dir     "./images/large/"
                       files       (->> (file-seq (clojure.java.io/file dir))
                                        (filter (fn [x] (.isFile x)))
                                        (filter (fn [x] (not (clojure.string/includes? (str (.getName x)) "8k"))))
                                        (map (fn [x] (.getName x)))
                                        (shuffle))
                       random-file (rand-nth (vec (remove (set (deref selected-files-4k)) files)))
                       _ (if random-file
                           (swap! selected-files-4k conj random-file)
                           (do (reset! selected-files-4k [])
                               (let [random-file (first files)] (swap! selected-files-4k conj random-file))))
                       res         (str rel-dir random-file)]
                   (println res)
                   (println "(" (count (deref selected-files-4k)) " files selected previously)")
                   res))}
 :dazzling-gnu-solver {:signal :signal/hourly? :type :clojure :cache? true :data (+ 1 2 3 90 (rand-int 124345))}}