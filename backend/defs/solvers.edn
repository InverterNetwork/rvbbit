{:colors-of-the-moment
 {:signal :signal/changed-wallpaper?,
  :cache? true,
  :type :flow,
  :data
  {:flowmap "node-color-thief-js-webp",
   :opts {:overrides {:image-path :solver/wallpaper-of-the-moment}},
   :return nil}},
 :wallpaper-of-the-moment-8k
 {:signal :signal/every-5-minutes,
  :type :clojure2,
  :cache? false,
  :data
  (do
   (defonce selected-files (atom []))
   (let
    [dir
     "/home/ryanr/rvbbit/frontend/resources/public/images/large"
     rel-dir
     "./images/large/"
     files
     (->>
      (file-seq (clojure.java.io/file dir))
      (filter (fn [x] (.isFile x)))
      (filter
       (fn [x] (clojure.string/includes? (str (.getName x)) "8k")))
      (map (fn [x] (.getName x)))
      (shuffle))
     random-file
     (first (remove (set (deref selected-files)) files))
     _
     (if
      random-file
      (swap! selected-files conj random-file)
      (do
       (reset! selected-files [])
       (let
        [random-file (first files)]
        (swap! selected-files conj random-file))))
     res
     (str rel-dir random-file)]
    (println res)
    (println
     "("
     (count (deref selected-files))
     " files selected previously)")
    res))},
 :colors-of-the-moment-8k
 {:signal :signal/changed-wallpaper-8k?,
  :cache? true,
  :type :flow,
  :data
  {:flowmap "node-color-thief-js-webp",
   :opts {:overrides {:image-path :solver/wallpaper-of-the-moment-8k}},
   :return nil}},
 :vibrant-antelope-solver
 {:signal :signal/cool-raccoon-signal-yo,
  :type :clojure2,
  :data (+ 1 2 3 88 (rand-int 1234))},
 :sql-solver-1
 {:signal false,
  :type :sql,
  :data
  {:cache? false,
   :limit 25,
   :group-by [:ts],
   :refresh-every 20,
   :from
   [{:select
     [:recent_messages_per_second
      :messages_per_second
      :mem_used
      :batches
      :packets
      :ts],
     :from [[:client_memory :ee183]],
     :order-by [[:mem_time :desc]]}],
   :order-by [[:ts :desc]],
   :connection-id "system-db",
   :select
   [[[[:sum :mem_used]] :mem_used]
    [[:sum :recent_messages_per_second] :messages_per_second]
    :ts],
   :post-process-fn
   (fn
    [x]
    (vec
     (reverse
      (for
       [row x]
       (assoc row :mb (int (/ (get row :mem_used 0) 1048576)))))))}},
 :static-data
 {:signal false, :type :clojure, :data [(apply + [1 2 3])]},
 :png-wallpaper?
 {:signal :signal/changed-wallpaper?,
  :type :clojure,
  :cache? true,
  :data
  (true?
   (clojure.string/ends-with?
    :solver/wallpaper-of-the-moment
    ".png"))},
 :wallpaper-of-the-moment
 {:signal :signal/every-5-minutes,
  :type :clojure,
  :things? true,
  :data
  (do
   (defonce selected-files-4k (atom []))
   (let
    [dir
     "/home/ryanr/rvbbit/frontend/resources/public/images/large"
     rel-dir
     "./images/large/"
     files
     (->>
      (file-seq (clojure.java.io/file dir))
      (filter (fn [x] (.isFile x)))
      (filter
       (fn
        [x]
        (not (clojure.string/includes? (str (.getName x)) "8k"))))
      (map (fn [x] (.getName x)))
      (shuffle))
     random-file
     (first (remove (set (deref selected-files-4k)) files))
     _
     (if
      random-file
      (swap! selected-files-4k conj random-file)
      (do
       (reset! selected-files-4k [])
       (let
        [random-file (first files)]
        (swap! selected-files-4k conj random-file))))
     res
     (str rel-dir random-file)]
    (println res)
    (println
     "("
     (count (deref selected-files-4k))
     " files selected previously)")
    res))},
 :dazzling-gnu-solver
 {:signal :signal/hourly?,
  :type :clojure,
  :cache? true,
  :data (+ 1 2 3 90 (rand-int 124345))}}
