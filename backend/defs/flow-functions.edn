
{:rabbit-base {:rabbit-sql-query {:description "Run a SQL query straight off a Rabbit board, input is RabbitSQL
                                                , returns a rowset (vector of maps)."
                                  :view (fn [_])
                                  :fn (fn [_])
                                  :inputs [:query]
                                  :icon "zmdi-dns"
                                  :types {:query :rabbitsql
                                          :out :rowset}}
        ;;        :single-if {:description "Conditional. TODO"
        ;;                    :view (fn [_])
        ;;                    :fn (fn [_])
        ;;                    :inputs [:in]
        ;;                    :icon "zmdi-arrow-split"
        ;;                    :types {:in :any
        ;;                            :out :rowset}}
               ;;alert! [client-name content w h duration]
               :alert! {:description "Send a pop-up notification to a client (or :all clients)"
                        :fn (fn [destination content w h duration] (rvbbit-backend.websockets/alert! destination content w h duration))
                        :inputs [:destination :content :w :h :duration]
                        :icon "zmdi-alert-polygon"
                        :style {:color "#FDFD96"}
                        :selected-style {:color "#FDFD96"}
                        ;:required [:image-url]
                        :defaults {:destination :client-name
                                   :content "Alert!"
                                   :w 10 :h 1 :duration 6}
                        :types {:destination :keyword
                                :content :any
                                :out :any
                                :w :integer
                                :h :integer
                                :duration :integer}}
               :dialog-raw! {:description "Send dialog content to a client - BYOB YOLO"
                             :fn (fn [destination content w h duration] (rvbbit-backend.websockets/alert! destination content w h duration :raw))
                             :inputs [:destination :content :w :h :duration]
                             :icon "zmdi-alert-polygon"
                             :style {:color "#FDFD96"}
                             :selected-style {:color "#FDFD96"}
                             ;:required [:image-url]
                             :defaults {:destination :client-name
                                        :content "Alert!"
                                        :w 10 :h 1 :duration 6}
                             :types {:destination :keyword
                                     :content :any
                                     :out :any
                                     :w :integer
                                     :h :integer
                                     :duration :integer}}
               :dialog-buttons! {:description "Send dialog content to a client - given a vector of choices, will render buttons"
                                 :fn (fn [destination content w h duration] (rvbbit-backend.websockets/alert! destination content w h duration :buttons))
                                 :inputs [:destination :content :w :h :duration]
                                 :icon "zmdi-alert-polygon"
                                 :style {:color "#FDFD96"}
                                 :selected-style {:color "#FDFD96"}
                                 ;:required [:image-url]
                                 :defaults {:destination :client-name
                                            :content "Alert!"
                                            :w 10 :h 1 :duration 6}
                                 :types {:destination :keyword
                                         :content :any
                                         :out :any
                                         :w :integer
                                         :h :integer
                                         :duration :integer}}
               :insert-to-cache-db {:description "Takes a rowset (vector of maps) and inserts it into the Rabbit cache db for speed & external joins, returns a 'done' signal."
                                    :view (fn [_])
                                    :fn (fn [_])
                                    :inputs [:data]
                                    :icon "zmdi-dns"
                                    :types {:data :rowset
                                            :out :keyword}}
               :read-file {:description "Read file content from the server. Useful in chaining together operations."
                           :fn (fn [full-path] (rvbbit-backend.websockets/read-local-file full-path))
                           :inputs [:full-path]
                           :icon "zmdi-file-text"
                           :types {:full-path :string
                                   :out :string}}
               :json-to-edn {:description "Convert a JSON string to Clojure EDN"
                             :fn (fn [json-string] (rvbbit-backend.util/json-to-edn json-string))
                             :inputs [:json-string]
                             :icon "zmdi-file-text"
                             :types {:json-string :string
                                     :out :any}}
               :get-colors {:description "Get top 50 color frequencies from an image in hex form."
                            :fn (fn [image-url] (rvbbit-backend.util/get-colors image-url))
                            :inputs [:image-url]
                            :icon "zmdi-gradient"
                            :required [:image-url]
                            :defaults {:image-url "/home/ryanr/viz-yard/resources/public/images/shannon45.png"}
                            :types {:image-url :string
                                    :out :string}}
               :write-file {:description "Write file content to the server. Useful in chaining together operations."
                            :fn (fn [full-path file-data] (rvbbit-backend.websockets/write-local-file full-path file-data))
                            :inputs [:full-path :file-data]
                            :icon "zmdi-file-text"
                            :types {:full-path :string
                                    :file-data :string
                                    :out :string}}
               :shell-command {:description "Execute shell command. WARNING: only use if you know what you're doing / have controlled inputs"
                               :fn (fn [command] (rvbbit-backend.websockets/run-shell-command command))
                               :inputs [:command]
                               :required [:command]
                               :defaults {:command "ls -la"}
                               :style {;:background-color "#333333"
                                       :color "#ffdd3c"}
                               :selected-style {:color "#ffdd3c"}
                               ;:expandable? true
                               :icon "zmdi-washing-machine"
                               ;:type :kick ;; for special UI handling
                               :types {:command :string
                                       :out :any}}
               :open-fn {:description "Write you own Clojure function! Godspeed!"
                         :view (fn [_])
                         :fn (fn [x] x)
                         :raw-fn (fn [x] x)
                         :inputs [:value]
                         :expandable? true
                         :icon "zmdi-functions"
                         :type :open-fn
                         :types {:value :any
                                 :out :any}}
               :http-call {:description "Basic HTTP call primitive"
                           :fn (fn [req-map] (rvbbit-backend.websockets/http-call req-map))
                           :inputs [:req-map]
                           :required [:req-map]
                           :defaults {:req-map {:url "https://owen-wilson-wow-api.onrender.com/wows/random"
                                                :query-params {:movie "Wedding Crashers"
                                                               :results 40}}}
                           :style {;:background-color "#333333"
                                   :color "#7BB696"}
                           :selected-style {:color "#7BB696"}
                           :expandable? false
                           :icon "zmdi-http" ;;"zmdi-washing-machine"
                           ;;:type :kick ;; for special UI handling
                           :types {:req-map :map
                                   :out :any}}
               :start-process {:description "Start an external process (eg. Python script, etc)"
                           :fn (fn [process-name command-vec wait? ssh-host ssh-user ssh-pass]
                                 (rvbbit-backend.websockets/start-process process-name command-vec wait? ssh-host ssh-user ssh-pass))
                           :inputs [:process-name :command-vec :wait? :ssh-host :ssh-user :ssh-pass]
                           :required [:process-name :command-vec]
                           :defaults {:process-name "ls -l -h"
                                      :ssh-host ""
                                      :ssh-user ""
                                      :ssh-pass ""
                                      :command-vec ["ls" "-l" "-h"]
                                      :wait? true}
                           :icon "fa-solid fa-terminal" ;;"zmdi-washing-machine" ;; <i class= "fa-solid fa-terminal" ></i>
                           ;;:type :kick ;; for special UI handling
                           :types {:process-name :string
                                   :command-vec :vector
                                   :ssh-host :string
                                   :ssh-user :string
                                   :ssh-pass :string
                                   :wait? :boolean
                                   :out :any}}
               :stop-process {:description "Stop an external process (eg. Python script, etc)"
                               :fn (fn [process-name]
                                     (rvbbit-backend.websockets/stop-process process-name))
                               :inputs [:process-name]
                               :required [:process-name]
                        ;;        :defaults {:process-name "ls -l -h"
                        ;;                   :command-vec ["ls" "-l" "-h"]
                        ;;                   :wait? true}
                               :icon "fa-solid fa-terminal" ;;"zmdi-washing-machine" ;; <i class= "fa-solid fa-terminal" ></i>
                           ;;:type :kick ;; for special UI handling
                               :types {:process-name :string
                                       :out :any}}
               :make-http-call {:description "Basic HTTP call primitive"
                                :fn (fn [req-map] (rvbbit-backend.websockets/make-http-call req-map))
                                ;:when false
                                :inputs [:req-map]
                                :required [:req-map]
                                :defaults {:req-map {:url "https://owen-wilson-wow-api.onrender.com/wows/random"
                                                     :query-params {:movie "Wedding Crashers"
                                                                    :results 40}}}
                                :style {:color "#7BB696"}
                                :selected-style {:color "#7BB696"}
                                :expandable? false
                                :icon "zmdi-http"
                                :types {:req-map :map
                                        :out :any}}
               :save-base64-to-webp {:description "Saves a base64 string to a webp file (default format for OpenAI image generation)"
                                     :fn (fn [b64-data file-path] (rvbbit-backend.util/save-base64-to-webp b64-data file-path))
                                     :inputs [:b64-data :file-path]
                                     :required [:b64-data :file-path]
                                     :icon "zmdi-broken-image"
                                     :types {:b64-data :any
                                             :file-path :string
                                             :out :any}}
               :color-thief {:file-path "./flows/node-color-thief-js.edn"
                             :icon "zmdi-gradient"
                             :description "Take an image local path and generate a color palette map from it."}
               :kick {:description "Push items to the client UI."
                       ;:view (fn [_])
                      :fn (fn [destination ref item-key thread-id  message-name thread-desc & args]
                            (rvbbit-backend.websockets/kick destination ref item-key thread-id message-name thread-desc args))
                      :inputs [:destination :ref :item-key :thread-id :message-name :thread-desc]
                      :required [:destination :ref :item-key :thread-id :message-name :thread-desc]
                      :defaults {:destination :client-name ;; if no value is sent, will be populated with these values/vars
                                 :item-key ":base" ;;:flow-id
                                 :thread-id :flow-id
                                 :message-name "Unnamed Message"
                                 :thread-desc :flow-id ;'(str "Unnamed Thread from " :flow-id)
                                 :ref :flow-id}
                      :style {;:background-color "#333333"
                              :color "#fc0fc0"}
                      :selected-style {:color "#fc0fc0"}
                      :expandable? true
                      :pill-name "content"
                      :icon "images/pink-rabbit-head.png" ;;"zmdi-washing-machine"
                      :type :kick ;; for special UI handling
                      :types {:destination [:keyword :vector :list :set]
                              :ref :string
                              :item-key :keyword ;[:string :keyword]
                              :thread-id :string
                              :message-name :string
                              :thread-desc :string
                              :out :any}}}
 :owen-wilson {:wow! {:file-path "./flows/a-random-wow.edn"
                      :icon "zmdi-pizza"
                      :description "A random Owen Wilson quote from the Wedding Crashers movie."}}
 :clojure-base {:count {:description "Clojure count function, takes a sequence and returns an integer of the number of items."
                        ;:view (fn [_])
                        :fn count
                        :inputs [:seq]
                        :icon "zmdi-view-module"
                        :types {:seq [:rowset :vector :list :set]
                                :out :integer}}
                :+ {:description "Clojure add function."
                    ;:view (fn [_])
                    :fn (fn [& args] (apply + args))
                    :inputs [:args]
                    :icon "zmdi-plus"
                    :types {:args [:integer :float]
                            ;:value2 [:integer :float]
                            :out [:integer :float]}}
                ;; :+ {:description "Clojure add function."
                ;;     ;:view (fn [_])
                ;;     :fn +
                ;;     :inputs [:args+]
                ;;     :icon "zmdi-plus"
                ;;     :types {:args+ [:integer :float]
                ;;             ;:value2 [:integer :float]
                ;;             :out [:integer :float]}}
                :* {:description "Clojure multiply function."
                    ;:view (fn [_])
                    :fn *
                    :inputs [:value1 :value2]
                    :icon "zmdi-plus"
                    :types {:value1 [:integer :float]
                            :value2 [:integer :float]
                            :out [:integer :float]}}
                :- {:description "Clojure subtract function."
                    ;:view (fn [_])
                    :fn -
                    :inputs [:value1 :value2]
                    :defaults {:value1 10
                               :value2 5}
                    :icon "zmdi-minus"
                    :types {:value1 [:integer :float]
                            :value2 [:integer :float]
                            :out [:integer :float]}}
                := {:description "Clojure subtract function."
                    ;:view (fn [_])
                    :fn =
                    :inputs [:value1 :value2]
                    :icon "zmdi-swap"
                    :types {:value1 :any
                            :value2 :any
                            :out :boolean}}
                :> {:description "Clojure greater-than function."
                    ;:view (fn [_])
                    :fn >
                    :inputs [:value1 :value2]
                    :icon "zmdi-chevron-right"
                    :types {:value1 [:integer :float]
                            :value2 [:integer :float]
                            :out :boolean}}
                :< {:description "Clojure less-than function."
                    ;:view (fn [_])
                    :fn >
                    :inputs [:value1 :value2]
                    :icon "zmdi-chevron-left"
                    :types {:value1 [:integer :float]
                            :value2 [:integer :float]
                            :out :boolean}}
                :>= {:description "Clojure greater-than-or-equal function."
                     ;:view (fn [_])
                     :fn >
                     :inputs [:value1 :value2]
                     :icon "zmdi-chevron-right"
                     :types {:value1 [:integer :float]
                             :value2 [:integer :float]
                             :out :boolean}}
                :<= {:description "Clojure less-than-or-equal function."
                     ;:view (fn [_])
                     :fn >
                     :inputs [:value1 :value2]
                     :icon "zmdi-chevron-left"
                     :types {:value1 [:integer :float]
                             :value2 [:integer :float]
                             :out :boolean}}
                :not {:description "Clojure Not function."
                      ;:view (fn [_])
                      :fn not
                      :inputs [:value]
                      :icon "zmdi-pizza"
                      :types {:value :boolean
                              :out :boolean}}
                :true? {:description "Clojure true? function."
                        ;:view (fn [_])
                        :fn true?
                        :inputs [:value]
                        :icon "zmdi-pizza"
                        :types {:value :boolean
                                :out :boolean}}
                :false? {:description "Clojure false? function."
                         ;:view (fn [_])
                         :fn false?
                         :inputs [:value]
                         :icon "zmdi-pizza"
                         :types {:value :boolean
                                 :out :boolean}}
                :and {:description "Clojure 'and' function."
                      ;:view (fn [_])
                      :fn (fn [& x] (apply (fn [& args] (every? identity args)) x))
                      :inputs [:value]
                      :expandable? true
                      :icon "zmdi-group"
                      :types {:value* :any
                              :out :boolean}}
                :clojure-string-join {:description "Clojure.string's join function."
                                      :fn (fn [delimiter & args] (clojure.string/join delimiter args))
                                      :inputs [:delimiter]
                                      :required [:delimiter]
                                      :defaults {:delimiter " "}
                                      :expandable? true
                                      :icon "zmdi-group"
                                      :types {:delimiter :string
                                              :out :string}}
                :or {:description "Clojure 'or' function."
                     ;:view (fn [_])
                     :fn (fn [& x] (apply (fn [& args] (some identity args)) x))
                     :inputs [:value] ;; to denote expandable in ports for the UI (which will 'create' them as needed since the fn is an unlimited arity fn)
                     :expandable? true
                     :icon "zmdi-ungroup"
                     :types {:value :any
                             :out :boolean}}
                :some {:description "Clojure some function (fixed to act as a simple IN)."
                       ;:view (fn [_])
                       :fn (fn [x y] (some (fn [z] (= z y)) y))
                       :inputs [:value :values]
                       :icon "zmdi-group-work"
                       :types {:value :any
                               :values [:rowset :vector :list :set]
                               :out :boolean}}}}
